VM Arguments: 
sun.java.command=Harness Queens 10 5000
                              @ 11  Queens.getRowColumn(int, int):boolean (40 bytes)   relevance-based (relevance=1.148099, probability=7.752268, bonus=1.000000, nodes=31 <= 300.000000)
                              @ 28  Queens.setRowColumn(int, int, boolean):void (29 bytes)   relevance-based (relevance=0.209258, probability=1.000004, bonus=1.000000, nodes=20 <= 62.777295)
                                @ 11  Queens.getRowColumn(int, int):boolean (40 bytes)   relevance-based (relevance=0.238122, probability=7.683691, bonus=1.000000, nodes=31 <= 71.436679)
                              @ 43  Queens.placeQueen(int):boolean (66 bytes)   not inlining relevance-based (relevance=0.207406, probability=0.991154, bonus=1.000000, nodes=74 > 62.221701)
                              @ 55  Queens.setRowColumn(int, int, boolean):void (29 bytes)   relevance-based (relevance=0.194443, probability=0.929207, bonus=1.000000, nodes=20 <= 58.332873)
                              @ 17  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.169069, probability=0.143694, bonus=1.000000, nodes=9)
                              @ 27  java.lang.StringLatin1.hashCode(byte[]):int (52 bytes)   relevance-based (relevance=0.169069, probability=0.143694, bonus=1.000000, nodes=22 <= 50.720591)
                              @ 13  java.util.Arrays.fill(boolean[], boolean):void (21 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=20 <= 300.000000)
                              @ 29  java.util.Arrays.fill(boolean[], boolean):void (21 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=20 <= 300.000000)
                              @ 45  java.util.Arrays.fill(boolean[], boolean):void (21 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=20 <= 300.000000)
                              @ 61  java.util.Arrays.fill(int[], int):void (21 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=21 <= 300.000000)
                              @ 66  Queens.placeQueen(int):boolean (66 bytes)   not inlining too large previous low-level graph (low-level-nodes: 903, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=44)
                              @ 15  Queens.queens():boolean (70 bytes)   not inlining too large previous low-level graph (low-level-nodes: 630, relevance=1.000000, probability=10.002435, bonus=1.000000, nodes=40)
                              @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                              @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 44  java.lang.StringLatin1.equals(byte[], byte[]):boolean (36 bytes)   relevance-based (relevance=1.000000, probability=0.863264, bonus=1.000000, nodes=33 <= 300.000000)
