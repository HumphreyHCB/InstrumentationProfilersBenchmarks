VM Arguments: 
sun.java.command=Harness Bounce 10 10000
                            @ 22  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  Bounce$$Lambda/0x00007f6d08003908.<init>(Random):void (10 bytes)   inline method (bytecode parsing)
                              @ 68  Bounce$Ball.bounce():boolean (144 bytes)   relevance-based (relevance=1.362768, probability=0.990099, bonus=1.000000, nodes=82 <= 300.000000)
                              @ 68  Bounce$Ball.bounce():boolean (144 bytes)   relevance-based (relevance=1.362768, probability=98.022338, bonus=1.000000, nodes=82 <= 300.000000)
                              @ 68  Bounce$Ball.bounce():boolean (144 bytes)   relevance-based (relevance=1.362768, probability=4902.703737, bonus=1.000000, nodes=82 <= 300.000000)
                            @ 22  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  Bounce$$Lambda/0x00007f6d08003908.<init>(Random):void (10 bytes)   inline method (bytecode parsing)
                              @ 4  som.Random.<init>():void (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                            @ 1  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                            @ 5  Bounce.lambda$benchmark$0(Random, int):Bounce$Ball (9 bytes)   inline method (bytecode parsing)
                                    @ 6  som.Random.next():int (24 bytes)   relevance-based (relevance=1.000000, probability=99.875458, bonus=1.000000, nodes=14 <= 300.000000)
                                    @ 18  som.Random.next():int (24 bytes)   relevance-based (relevance=1.000000, probability=99.875458, bonus=1.000000, nodes=14 <= 300.000000)
                                    @ 30  som.Random.next():int (24 bytes)   relevance-based (relevance=1.000000, probability=99.875458, bonus=1.000000, nodes=14 <= 300.000000)
                                    @ 46  som.Random.next():int (24 bytes)   relevance-based (relevance=1.000000, probability=99.875458, bonus=1.000000, nodes=14 <= 300.000000)
                                  @ 5  Bounce$Ball.<init>(Random):void (61 bytes)   relevance-based (relevance=1.000000, probability=99.875458, bonus=1.000000, nodes=66 <= 300.000000)
                                @ 17  Bounce$$Lambda/0x00007f6d08003908.apply(int):Object (9 bytes)   relevance-based (relevance=1.000000, probability=99.875458, bonus=1.000000, nodes=70 <= 300.000000)
                              @ 27  java.util.Arrays.setAll(Object[], IntFunction):void (30 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=87 <= 300.000000)
                              @ 68  Bounce$Ball.bounce():boolean (144 bytes)   relevance-based (relevance=1.363002, probability=5150.501000, bonus=1.000000, nodes=82 <= 300.000000)
                              @ 6  som.Random.next():int (24 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                              @ 18  som.Random.next():int (24 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                              @ 30  som.Random.next():int (24 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                              @ 46  som.Random.next():int (24 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                              @ 17  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.170617, probability=0.144813, bonus=1.000000, nodes=9)
                              @ 27  java.lang.StringLatin1.hashCode(byte[]):int (52 bytes)   relevance-based (relevance=0.170617, probability=0.144813, bonus=1.000000, nodes=22 <= 51.185089)
                              @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                              @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 44  java.lang.StringLatin1.equals(byte[], byte[]):boolean (36 bytes)   relevance-based (relevance=1.000000, probability=0.862627, bonus=1.000000, nodes=33 <= 300.000000)
