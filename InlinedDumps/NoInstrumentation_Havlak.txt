VM Arguments: 
sun.java.command=Harness Havlak 10 15000
                            @ 8  havlak.HavlakLoopFinder.lambda$findLoops$2(Vector, UnionFindNode):void (6 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 2  som.Vector.append(Object):void (51 bytes)   not inlining relevance-based (relevance=0.027568, probability=0.008086, bonus=1.000000, nodes=35 > 8.270334)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 47  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  havlak.UnionFindNode$$Lambda/0x00007f8b9c00ce90.<init>(UnionFindNode):void (10 bytes)   inline method (bytecode parsing)
                            @ 8  havlak.UnionFindNode.lambda$findSet$0(UnionFindNode):void (9 bytes)   inline method (bytecode parsing)
                              @ 5  havlak.UnionFindNode.union(UnionFindNode):void (6 bytes)   inline method (bytecode parsing)
                                      @ 20  havlak.UnionFindNode$$Lambda/0x00007f8b9c00ce90.apply(Object):void (12 bytes)   relevance-based (relevance=0.197341, probability=0.060299, bonus=1.000000, nodes=20 <= 59.202294)
                                    @ 52  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=0.197341, probability=0.057886, bonus=1.000000, nodes=37 <= 59.202294)
                                  @ 18  havlak.UnionFindNode.findSet():UnionFindNode (57 bytes)   not inlining relevance-based (relevance=0.197341, probability=0.057886, bonus=1.000000, nodes=68 > 59.202294)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000013, probability=0.000004, bonus=1.000000, nodes=41 > 0.003877)
                                  @ 21  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=0.197341, probability=0.057886, bonus=1.000000, nodes=35 <= 59.202294)
                                @ 16  havlak.HavlakLoopFinder.lambda$stepD$6(int, Vector, Integer):void (37 bytes)   relevance-based (relevance=0.197341, probability=0.057886, bonus=1.000000, nodes=53 <= 59.202294)
                            @ 5  havlak.UnionFindNode.getDfsNumber():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 17  havlak.UnionFindNode.union(UnionFindNode):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  havlak.UnionFindNode.getLoop():SimpleLoop (5 bytes)   inline accessor method (bytecode parsing)
                            @ 28  havlak.UnionFindNode.getLoop():SimpleLoop (5 bytes)   inline accessor method (bytecode parsing)
                            @ 40  havlak.UnionFindNode.getBb():BasicBlock (5 bytes)   inline accessor method (bytecode parsing)
                            @ 43  havlak.SimpleLoop.addNode(BasicBlock):void (9 bytes)   inline method (bytecode parsing)
                            @ 10  havlak.SimpleLoop.addChildLoop(SimpleLoop):void (9 bytes)   inline method (bytecode parsing)
                            @ 2  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  som.IdentitySet$$Lambda/0x00007f8b9c00d4f0.<init>(Object):void (10 bytes)   inline method (bytecode parsing)
                            @ 7  som.Set.hasSome(TestInterface):boolean (9 bytes)   inline method (bytecode parsing)
                                            @ 5  som.IdentitySet.lambda$contains$0(Object, Object):boolean (11 bytes)   trivial (relevance=0.169839, probability=0.036001, bonus=1.000000, nodes=8)
                                          @ 20  som.IdentitySet$$Lambda/0x00007f8b9c00d4f0.test(Object):boolean (9 bytes)   trivial (relevance=0.169839, probability=0.036001, bonus=1.000000, nodes=9)
                                        @ 5  som.Vector.hasSome(TestInterface):boolean (38 bytes)   relevance-based (relevance=0.194988, probability=0.042666, bonus=1.000000, nodes=25 <= 58.496356)
                                      @ 2  som.IdentitySet.contains(Object):boolean (11 bytes)   relevance-based (relevance=0.194988, probability=0.042666, bonus=1.000000, nodes=40 <= 58.496356)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                        @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000012, probability=0.000003, bonus=1.000000, nodes=41 > 0.003675)
                                      @ 13  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=0.187040, probability=0.042666, bonus=1.000000, nodes=35 <= 56.111936)
                                    @ 5  som.Set.add(Object):void (17 bytes)   not inlining relevance-based (relevance=0.187040, probability=0.042666, bonus=1.000000, nodes=74 > 56.111936)
                                  @ 32  havlak.SimpleLoop.setParent(SimpleLoop):void (14 bytes)   relevance-based (relevance=0.187040, probability=0.042666, bonus=1.000000, nodes=16 <= 56.111936)
                            @ 2  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  som.IdentitySet$$Lambda/0x00007f8b9c00d4f0.<init>(Object):void (10 bytes)   inline method (bytecode parsing)
                            @ 7  som.Set.hasSome(TestInterface):boolean (9 bytes)   inline method (bytecode parsing)
                                          @ 5  som.IdentitySet.lambda$contains$0(Object, Object):boolean (11 bytes)   trivial (relevance=0.594036, probability=0.125920, bonus=1.000000, nodes=8)
                                        @ 20  som.IdentitySet$$Lambda/0x00007f8b9c00d4f0.test(Object):boolean (9 bytes)   trivial (relevance=0.594036, probability=0.125920, bonus=1.000000, nodes=9)
                                      @ 5  som.Vector.hasSome(TestInterface):boolean (38 bytes)   relevance-based (relevance=0.681997, probability=0.149230, bonus=1.000000, nodes=25 <= 204.598956)
                                    @ 2  som.IdentitySet.contains(Object):boolean (11 bytes)   relevance-based (relevance=0.681997, probability=0.149230, bonus=1.000000, nodes=40 <= 204.598956)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                      @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000043, probability=0.000010, bonus=1.000000, nodes=41 > 0.012853)
                                    @ 13  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=0.654197, probability=0.149230, bonus=1.000000, nodes=35 <= 196.259124)
                                  @ 5  som.Set.add(Object):void (17 bytes)   relevance-based (relevance=0.654197, probability=0.149230, bonus=1.000000, nodes=74 <= 196.259124)
                                @ 16  havlak.HavlakLoopFinder.lambda$setLoopAttributes$5(int, SimpleLoop, UnionFindNode):void (47 bytes)   relevance-based (relevance=0.654197, probability=0.191897, bonus=1.000000, nodes=123 <= 196.259124)
                            @ 7  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                      @ 7  havlak.BasicBlock.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=0.234680, bonus=1.000000, nodes=5)
                                    @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   relevance-based (relevance=1.600104, probability=0.234680, bonus=1.000000, nodes=12 <= 300.000000)
                                      @ 8  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=0.800052, probability=0.117340, bonus=1.000000, nodes=13 <= 240.015641)
                                    @ 59  som.Dictionary.insertBucketEntry(Dictionary$CustomHash, Object, int, Dictionary$Entry):void (62 bytes)   relevance-based (relevance=0.800052, probability=0.117340, bonus=1.000000, nodes=24 <= 240.015641)
                            @ 8  som.IdentityDictionary$IdEntry.<init>(int, Object, Object, Dictionary$Entry):void (10 bytes)   inline method (bytecode parsing)
                                      @ 6  som.Dictionary$Entry.<init>(int, Object, Object, Dictionary$Entry):void (26 bytes)   relevance-based (relevance=0.800052, probability=0.117340, bonus=1.000000, nodes=17 <= 240.015641)
                                    @ 36  som.IdentityDictionary.newEntry(Dictionary$CustomHash, Object, int):Dictionary$Entry (12 bytes)   relevance-based (relevance=0.800052, probability=0.117340, bonus=1.000000, nodes=19 <= 240.015641)
                                  @ 10  som.Dictionary.atPut(Dictionary$CustomHash, Object):void (79 bytes)   relevance-based (relevance=0.800052, probability=0.234680, bonus=1.000000, nodes=70 <= 240.015641)
                                @ 8  havlak.HavlakLoopFinder.lambda$initAllNodes$0(BasicBlock):void (14 bytes)   relevance-based (relevance=0.800052, probability=0.234680, bonus=1.000000, nodes=76 <= 240.015641)
                              @ 20  havlak.HavlakLoopFinder$$Lambda/0x00007f8b9c00c418.apply(Object):void (16 bytes)   not inlining relevance-based (relevance=1.000000, probability=1.041686, bonus=1.000000, nodes=317 > 300.000000)
                            @ 5  som.Set.lambda$contains$1(Object, Object):boolean (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Integer.equals(Object):boolean (29 bytes)   relevance-based (relevance=0.248924, probability=0.125039, bonus=1.000000, nodes=19 <= 74.677267)
                                @ 8  havlak.HavlakLoopFinder.lambda$stepEProcessNonBackPreds$3(UnionFindNode, UnionFindNode):boolean (11 bytes)   trivial (relevance=0.559785, probability=0.281189, bonus=1.000000, nodes=8)
                                @ 5  som.IdentitySet.lambda$contains$0(Object, Object):boolean (11 bytes)   trivial (relevance=0.870918, probability=0.437476, bonus=1.000000, nodes=8)
                              @ 20  som.IdentitySet$$Lambda/0x00007f8b9c00d4f0.test(Object):boolean (9 bytes)   relevance-based (relevance=0.870918, probability=0.843703, bonus=1.000000, nodes=49 <= 261.275309)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 47  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  havlak.UnionFindNode$$Lambda/0x00007f8b9c00ce90.<init>(UnionFindNode):void (10 bytes)   inline method (bytecode parsing)
                            @ 8  havlak.UnionFindNode.lambda$findSet$0(UnionFindNode):void (9 bytes)   inline method (bytecode parsing)
                              @ 5  havlak.UnionFindNode.union(UnionFindNode):void (6 bytes)   inline method (bytecode parsing)
                                @ 20  havlak.UnionFindNode$$Lambda/0x00007f8b9c00ce90.apply(Object):void (12 bytes)   relevance-based (relevance=0.898576, probability=0.898576, bonus=1.000000, nodes=20 <= 269.572703)
                              @ 52  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000030, probability=0.000030, bonus=1.000000, nodes=41 > 0.008891)
                            @ 26  havlak.BasicBlock.getOutEdges():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  som.Vector.size():int (10 bytes)   inline method (bytecode parsing)
                              @ 8  havlak.UnionFindNode.initNode(BasicBlock, int):void (21 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=15 <= 300.000000)
                            @ 7  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                  @ 7  havlak.BasicBlock.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   relevance-based (relevance=2.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                  @ 8  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 59  som.Dictionary.insertBucketEntry(Dictionary$CustomHash, Object, int, Dictionary$Entry):void (62 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 8  som.IdentityDictionary$IdEntry.<init>(int, Object, Object, Dictionary$Entry):void (10 bytes)   inline method (bytecode parsing)
                                  @ 6  som.Dictionary$Entry.<init>(int, Object, Object, Dictionary$Entry):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=17 <= 300.000000)
                                @ 36  som.IdentityDictionary.newEntry(Dictionary$CustomHash, Object, int):Dictionary$Entry (12 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=19 <= 300.000000)
                              @ 20  som.Dictionary.atPut(Dictionary$CustomHash, Object):void (79 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=70 <= 300.000000)
                              @ 48  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=1.600060, probability=1.454502, bonus=1.000000, nodes=10 <= 300.000000)
                                  @ 7  havlak.BasicBlock.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.454502, bonus=1.000000, nodes=5)
                                @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   relevance-based (relevance=1.000000, probability=1.454502, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.454502, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.454502, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 62  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.600060, probability=1.454502, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 26  havlak.BasicBlock.getOutEdges():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  som.Vector.size():int (10 bytes)   inline method (bytecode parsing)
                                @ 8  havlak.UnionFindNode.initNode(BasicBlock, int):void (21 bytes)   relevance-based (relevance=1.000000, probability=0.909030, bonus=1.000000, nodes=15 <= 300.000000)
                            @ 7  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                    @ 7  havlak.BasicBlock.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=0.909030, bonus=1.000000, nodes=5)
                                  @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   relevance-based (relevance=2.000000, probability=0.909030, bonus=1.000000, nodes=12 <= 300.000000)
                                    @ 8  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=0.454515, bonus=1.000000, nodes=13 <= 300.000000)
                                  @ 59  som.Dictionary.insertBucketEntry(Dictionary$CustomHash, Object, int, Dictionary$Entry):void (62 bytes)   relevance-based (relevance=1.000000, probability=0.454515, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 8  som.IdentityDictionary$IdEntry.<init>(int, Object, Object, Dictionary$Entry):void (10 bytes)   inline method (bytecode parsing)
                                    @ 6  som.Dictionary$Entry.<init>(int, Object, Object, Dictionary$Entry):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.454515, bonus=1.000000, nodes=17 <= 300.000000)
                                  @ 36  som.IdentityDictionary.newEntry(Dictionary$CustomHash, Object, int):Dictionary$Entry (12 bytes)   relevance-based (relevance=1.000000, probability=0.454515, bonus=1.000000, nodes=19 <= 300.000000)
                                @ 20  som.Dictionary.atPut(Dictionary$CustomHash, Object):void (79 bytes)   relevance-based (relevance=1.000000, probability=0.909030, bonus=1.000000, nodes=70 <= 300.000000)
                                @ 48  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=1.600060, probability=1.322186, bonus=1.000000, nodes=10 <= 300.000000)
                                    @ 7  havlak.BasicBlock.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.322186, bonus=1.000000, nodes=5)
                                  @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   relevance-based (relevance=1.000000, probability=1.322186, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                  @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.322186, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.322186, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 62  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.600060, probability=1.322186, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 26  havlak.BasicBlock.getOutEdges():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  som.Vector.size():int (10 bytes)   inline method (bytecode parsing)
                                  @ 8  havlak.UnionFindNode.initNode(BasicBlock, int):void (21 bytes)   relevance-based (relevance=1.000000, probability=0.826335, bonus=1.000000, nodes=15 <= 300.000000)
                            @ 7  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                      @ 7  havlak.BasicBlock.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=0.826335, bonus=1.000000, nodes=5)
                                    @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   relevance-based (relevance=2.000000, probability=0.826335, bonus=1.000000, nodes=12 <= 300.000000)
                                      @ 8  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=0.413167, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 59  som.Dictionary.insertBucketEntry(Dictionary$CustomHash, Object, int, Dictionary$Entry):void (62 bytes)   relevance-based (relevance=1.000000, probability=0.413167, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 8  som.IdentityDictionary$IdEntry.<init>(int, Object, Object, Dictionary$Entry):void (10 bytes)   inline method (bytecode parsing)
                                      @ 6  som.Dictionary$Entry.<init>(int, Object, Object, Dictionary$Entry):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.413167, bonus=1.000000, nodes=17 <= 300.000000)
                                    @ 36  som.IdentityDictionary.newEntry(Dictionary$CustomHash, Object, int):Dictionary$Entry (12 bytes)   relevance-based (relevance=1.000000, probability=0.413167, bonus=1.000000, nodes=19 <= 300.000000)
                                  @ 20  som.Dictionary.atPut(Dictionary$CustomHash, Object):void (79 bytes)   relevance-based (relevance=1.000000, probability=0.826335, bonus=1.000000, nodes=70 <= 300.000000)
                                  @ 48  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=1.600060, probability=1.201906, bonus=1.000000, nodes=10 <= 300.000000)
                                      @ 7  havlak.BasicBlock.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.201906, bonus=1.000000, nodes=5)
                                    @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   relevance-based (relevance=1.000000, probability=1.201906, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                    @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.201906, bonus=1.000000, nodes=11 <= 300.000000)
                                    @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.201906, bonus=1.000000, nodes=13 <= 300.000000)
                                  @ 62  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.600060, probability=1.201906, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 26  havlak.BasicBlock.getOutEdges():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  som.Vector.size():int (10 bytes)   inline method (bytecode parsing)
                                    @ 8  havlak.UnionFindNode.initNode(BasicBlock, int):void (21 bytes)   relevance-based (relevance=1.000000, probability=0.751163, bonus=1.000000, nodes=15 <= 300.000000)
                            @ 7  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                        @ 7  havlak.BasicBlock.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=0.751163, bonus=1.000000, nodes=5)
                                      @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   relevance-based (relevance=2.000000, probability=0.751163, bonus=1.000000, nodes=12 <= 300.000000)
                                        @ 8  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=0.375581, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 59  som.Dictionary.insertBucketEntry(Dictionary$CustomHash, Object, int, Dictionary$Entry):void (62 bytes)   relevance-based (relevance=1.000000, probability=0.375581, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 8  som.IdentityDictionary$IdEntry.<init>(int, Object, Object, Dictionary$Entry):void (10 bytes)   inline method (bytecode parsing)
                                        @ 6  som.Dictionary$Entry.<init>(int, Object, Object, Dictionary$Entry):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.375581, bonus=1.000000, nodes=17 <= 300.000000)
                                      @ 36  som.IdentityDictionary.newEntry(Dictionary$CustomHash, Object, int):Dictionary$Entry (12 bytes)   relevance-based (relevance=1.000000, probability=0.375581, bonus=1.000000, nodes=19 <= 300.000000)
                                    @ 20  som.Dictionary.atPut(Dictionary$CustomHash, Object):void (79 bytes)   relevance-based (relevance=1.000000, probability=0.751163, bonus=1.000000, nodes=70 <= 300.000000)
                                    @ 48  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=1.600060, probability=1.092568, bonus=1.000000, nodes=10 <= 300.000000)
                                        @ 7  havlak.BasicBlock.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.092568, bonus=1.000000, nodes=5)
                                      @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   relevance-based (relevance=1.000000, probability=1.092568, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                      @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.092568, bonus=1.000000, nodes=11 <= 300.000000)
                                      @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.092568, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 62  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.600060, probability=1.092568, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 26  havlak.BasicBlock.getOutEdges():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  som.Vector.size():int (10 bytes)   inline method (bytecode parsing)
                                      @ 8  havlak.UnionFindNode.initNode(BasicBlock, int):void (21 bytes)   relevance-based (relevance=1.000000, probability=0.682829, bonus=1.000000, nodes=15 <= 300.000000)
                            @ 7  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                          @ 7  havlak.BasicBlock.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=0.682829, bonus=1.000000, nodes=5)
                                        @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   relevance-based (relevance=2.000000, probability=0.682829, bonus=1.000000, nodes=12 <= 300.000000)
                                          @ 8  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=0.341415, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 59  som.Dictionary.insertBucketEntry(Dictionary$CustomHash, Object, int, Dictionary$Entry):void (62 bytes)   relevance-based (relevance=1.000000, probability=0.341415, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 8  som.IdentityDictionary$IdEntry.<init>(int, Object, Object, Dictionary$Entry):void (10 bytes)   inline method (bytecode parsing)
                                          @ 6  som.Dictionary$Entry.<init>(int, Object, Object, Dictionary$Entry):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.341415, bonus=1.000000, nodes=17 <= 300.000000)
                                        @ 36  som.IdentityDictionary.newEntry(Dictionary$CustomHash, Object, int):Dictionary$Entry (12 bytes)   relevance-based (relevance=1.000000, probability=0.341415, bonus=1.000000, nodes=19 <= 300.000000)
                                      @ 20  som.Dictionary.atPut(Dictionary$CustomHash, Object):void (79 bytes)   relevance-based (relevance=1.000000, probability=0.682829, bonus=1.000000, nodes=70 <= 300.000000)
                                      @ 48  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=1.600060, probability=0.993177, bonus=1.000000, nodes=10 <= 300.000000)
                                          @ 7  havlak.BasicBlock.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=0.993177, bonus=1.000000, nodes=5)
                                        @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.993177, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                        @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=0.993177, bonus=1.000000, nodes=11 <= 300.000000)
                                        @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=0.993177, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 62  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.600060, probability=0.993177, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 26  havlak.BasicBlock.getOutEdges():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  som.Vector.size():int (10 bytes)   inline method (bytecode parsing)
                                        @ 8  havlak.UnionFindNode.initNode(BasicBlock, int):void (21 bytes)   relevance-based (relevance=1.000000, probability=0.620712, bonus=1.000000, nodes=15 <= 300.000000)
                            @ 7  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                            @ 7  havlak.BasicBlock.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=0.620712, bonus=1.000000, nodes=5)
                                          @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   relevance-based (relevance=2.000000, probability=0.620712, bonus=1.000000, nodes=12 <= 300.000000)
                                            @ 8  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=0.310356, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 59  som.Dictionary.insertBucketEntry(Dictionary$CustomHash, Object, int, Dictionary$Entry):void (62 bytes)   relevance-based (relevance=1.000000, probability=0.310356, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 8  som.IdentityDictionary$IdEntry.<init>(int, Object, Object, Dictionary$Entry):void (10 bytes)   inline method (bytecode parsing)
                                            @ 6  som.Dictionary$Entry.<init>(int, Object, Object, Dictionary$Entry):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.310356, bonus=1.000000, nodes=17 <= 300.000000)
                                          @ 36  som.IdentityDictionary.newEntry(Dictionary$CustomHash, Object, int):Dictionary$Entry (12 bytes)   relevance-based (relevance=1.000000, probability=0.310356, bonus=1.000000, nodes=19 <= 300.000000)
                                        @ 20  som.Dictionary.atPut(Dictionary$CustomHash, Object):void (79 bytes)   relevance-based (relevance=1.000000, probability=0.620712, bonus=1.000000, nodes=70 <= 300.000000)
                                        @ 48  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=1.600060, probability=0.902827, bonus=1.000000, nodes=10 <= 300.000000)
                                            @ 7  havlak.BasicBlock.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=0.902827, bonus=1.000000, nodes=5)
                                          @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.902827, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                          @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=0.902827, bonus=1.000000, nodes=11 <= 300.000000)
                                          @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=0.902827, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 62  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.600060, probability=0.902827, bonus=1.000000, nodes=35 <= 300.000000)
                                      @ 82  havlak.HavlakLoopFinder.doDFS(BasicBlock, int):int (101 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                      @ 82  havlak.HavlakLoopFinder.doDFS(BasicBlock, int):int (101 bytes)   relevance-based (relevance=1.000000, probability=0.620712, bonus=1.000000, nodes=174 <= 300.000000)
                                    @ 82  havlak.HavlakLoopFinder.doDFS(BasicBlock, int):int (101 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.682829, bonus=1.000000, nodes=332 > 300.000000)
                                  @ 82  havlak.HavlakLoopFinder.doDFS(BasicBlock, int):int (101 bytes)   relevance-based (relevance=1.000000, probability=0.751163, bonus=1.000000, nodes=174 <= 300.000000)
                                @ 82  havlak.HavlakLoopFinder.doDFS(BasicBlock, int):int (101 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.826335, bonus=1.000000, nodes=332 > 300.000000)
                              @ 82  havlak.HavlakLoopFinder.doDFS(BasicBlock, int):int (101 bytes)   relevance-based (relevance=1.000000, probability=0.909030, bonus=1.000000, nodes=174 <= 300.000000)
                            @ 28  java.lang.Integer.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.Number.<init>():void (5 bytes)   inline method (bytecode parsing)
                                @ 7  havlak.BasicBlock.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                              @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 7  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                @ 7  havlak.BasicBlock.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   relevance-based (relevance=1.964215, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 8  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=0.964215, probability=0.490891, bonus=1.000000, nodes=13 <= 289.264414)
                              @ 59  som.Dictionary.insertBucketEntry(Dictionary$CustomHash, Object, int, Dictionary$Entry):void (62 bytes)   relevance-based (relevance=0.964215, probability=0.490891, bonus=1.000000, nodes=24 <= 289.264414)
                            @ 8  som.IdentityDictionary$IdEntry.<init>(int, Object, Object, Dictionary$Entry):void (10 bytes)   inline method (bytecode parsing)
                                @ 6  som.Dictionary$Entry.<init>(int, Object, Object, Dictionary$Entry):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.509109, bonus=1.000000, nodes=17 <= 300.000000)
                              @ 36  som.IdentityDictionary.newEntry(Dictionary$CustomHash, Object, int):Dictionary$Entry (12 bytes)   relevance-based (relevance=1.000000, probability=0.509109, bonus=1.000000, nodes=19 <= 300.000000)
                            @ 4  havlak.ControlFlowGraph.getStartBasicBlock():BasicBlock (5 bytes)   inline accessor method (bytecode parsing)
                            @ 15  havlak.ControlFlowGraph.getNumNodes():int (8 bytes)   inline method (bytecode parsing)
                              @ 4  som.Vector.size():int (10 bytes)   inline method (bytecode parsing)
                            @ 98  som.Set.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Set.<init>(int):void (17 bytes)   inline method (bytecode parsing)
                                @ 10  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 112  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 127  havlak.UnionFindNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 165  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 175  havlak.UnionFindNode.getBb():BasicBlock (5 bytes)   inline accessor method (bytecode parsing)
                            @ 195  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 203  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  havlak.HavlakLoopFinder$$Lambda/0x00007f8b9c00cc70.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 212  som.Vector.size():int (10 bytes)   inline method (bytecode parsing)
                            @ 251  havlak.UnionFindNode.getDfsNumber():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 260  som.Set.size():int (8 bytes)   inline method (bytecode parsing)
                              @ 4  som.Vector.size():int (10 bytes)   inline method (bytecode parsing)
                            @ 287  som.Vector.size():int (10 bytes)   inline method (bytecode parsing)
                              @ 23  som.Vector.removeAll():void (23 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                              @ 30  som.Vector.removeAll():void (23 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                              @ 37  som.Dictionary.removeAll():void (18 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 4  havlak.ControlFlowGraph.getBasicBlocks():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  havlak.HavlakLoopFinder$$Lambda/0x00007f8b9c00c1f8.<init>(HavlakLoopFinder):void (10 bytes)   inline method (bytecode parsing)
                            @ 21  havlak.ControlFlowGraph.getStartBasicBlock():BasicBlock (5 bytes)   inline accessor method (bytecode parsing)
                            @ 7  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                      @ 10  som.Dictionary.atPut(Dictionary$CustomHash, Object):void (79 bytes)   not inlining too large previous low-level graph (low-level-nodes: 375, relevance=0.691118, probability=0.691118, bonus=1.000000, nodes=41)
                                    @ 8  havlak.HavlakLoopFinder.lambda$initAllNodes$0(BasicBlock):void (14 bytes)   relevance-based (relevance=0.691118, probability=0.691118, bonus=1.000000, nodes=11 <= 207.335387)
                                  @ 20  havlak.HavlakLoopFinder$$Lambda/0x00007f8b9c00c1f8.apply(Object):void (12 bytes)   relevance-based (relevance=0.691118, probability=0.691118, bonus=1.000000, nodes=19 <= 207.335387)
                                @ 13  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=36 <= 300.000000)
                            @ 26  havlak.BasicBlock.getOutEdges():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  som.Vector.size():int (10 bytes)   inline method (bytecode parsing)
                                @ 25  havlak.HavlakLoopFinder.doDFS(BasicBlock, int):int (101 bytes)   not inlining too large previous low-level graph (low-level-nodes: 1481, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=70)
                              @ 138  havlak.HavlakLoopFinder.initAllNodes():void (30 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=62 <= 300.000000)
                            @ 29  havlak.UnionFindNode.getBb():BasicBlock (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  havlak.BasicBlock.getNumPred():int (8 bytes)   inline method (bytecode parsing)
                              @ 4  som.Vector.size():int (10 bytes)   inline method (bytecode parsing)
                            @ 8  havlak.BasicBlock.getInEdges():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 13  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, int, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.LambdaForm$DMH/0x00007f8b9c009000.newInvokeSpecial(Object, Object, int):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                  @ 19  havlak.HavlakLoopFinder$$Lambda/0x00007f8b9c00c418.<init>(HavlakLoopFinder, int):void (15 bytes)   relevance-based (relevance=1.000000, probability=11.001737, bonus=1.000000, nodes=11 <= 300.000000)
                                            @ 7  havlak.BasicBlock.customHash():int (5 bytes)   trivial (relevance=0.850619, probability=7.603498, bonus=1.000000, nodes=5)
                                          @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   relevance-based (relevance=0.850619, probability=7.603498, bonus=1.000000, nodes=12 <= 255.185813)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                          @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=0.850619, probability=7.603498, bonus=1.000000, nodes=11 <= 255.185813)
                                          @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=0.850619, probability=7.603498, bonus=1.000000, nodes=13 <= 255.185813)
                                        @ 5  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=0.850619, probability=7.603498, bonus=1.000000, nodes=35 <= 255.185813)
                                        @ 24  havlak.HavlakLoopFinder.isAncestor(int, int):boolean (21 bytes)   relevance-based (relevance=0.850619, probability=7.603498, bonus=1.000000, nodes=21 <= 255.185813)
                                        @ 35  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=0.227074, probability=1.425748, bonus=1.000000, nodes=10 <= 68.122137)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                          @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000006, probability=0.000037, bonus=1.000000, nodes=41 > 0.001786)
                                        @ 45  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=0.227074, probability=1.425748, bonus=1.000000, nodes=35 <= 68.122137)
                                        @ 56  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=0.983908, probability=6.177750, bonus=1.000000, nodes=10 <= 295.172498)
                            @ 2  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  som.Set$$Lambda/0x00007f8b9c00c830.<init>(Object):void (10 bytes)   inline method (bytecode parsing)
                            @ 7  som.Set.hasSome(TestInterface):boolean (9 bytes)   inline method (bytecode parsing)
                            @ 5  som.Set.lambda$contains$1(Object, Object):boolean (6 bytes)   inline method (bytecode parsing)
                                                @ 2  java.lang.Integer.equals(Object):boolean (29 bytes)   relevance-based (relevance=0.870877, probability=5.211949, bonus=1.000000, nodes=19 <= 261.263026)
                                              @ 20  som.Set$$Lambda/0x00007f8b9c00c830.test(Object):boolean (9 bytes)   relevance-based (relevance=0.870877, probability=5.211949, bonus=1.000000, nodes=28 <= 261.263026)
                                            @ 5  som.Vector.hasSome(TestInterface):boolean (38 bytes)   relevance-based (relevance=1.000000, probability=6.177750, bonus=1.000000, nodes=47 <= 300.000000)
                                          @ 2  som.Set.contains(Object):boolean (11 bytes)   relevance-based (relevance=1.023668, probability=6.177750, bonus=1.000000, nodes=66 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                            @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000025, probability=0.000157, bonus=1.000000, nodes=41 > 0.007497)
                                          @ 13  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=0.953164, probability=5.984715, bonus=1.000000, nodes=35 <= 285.949291)
                                        @ 66  som.Set.add(Object):void (17 bytes)   relevance-based (relevance=0.983908, probability=6.177750, bonus=1.000000, nodes=99 <= 295.172498)
                                      @ 12  havlak.HavlakLoopFinder.lambda$processEdges$1(int, BasicBlock):void (70 bytes)   not inlining relevance-based (relevance=0.691118, probability=7.603498, bonus=1.000000, nodes=227 > 207.335387)
                                    @ 20  havlak.HavlakLoopFinder$$Lambda/0x00007f8b9c00c418.apply(Object):void (16 bytes)   relevance-based (relevance=0.691118, probability=7.603498, bonus=1.000000, nodes=13 <= 207.335387)
                                  @ 18  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=11.001737, bonus=1.000000, nodes=30 <= 300.000000)
                                @ 52  havlak.HavlakLoopFinder.processEdges(BasicBlock, int):void (22 bytes)   relevance-based (relevance=1.000000, probability=11.001737, bonus=1.000000, nodes=58 <= 300.000000)
                              @ 143  havlak.HavlakLoopFinder.identifyEdges(int):void (62 bytes)   not inlining callee invoke probability is too high (invokeP=7.603498, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=84)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000026, probability=0.000288, bonus=1.000000, nodes=41 > 0.007866)
                              @ 101  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=10.999810, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000026, probability=0.000288, bonus=1.000000, nodes=41 > 0.007866)
                              @ 115  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000026, probability=10.999810, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 14  java.lang.invoke.LambdaForm$MH/0x00007f8b9c00a000.linkToTargetMethod(Object, int, Object, Object):Object (11 bytes)   inline method (bytecode parsing)
                              @ 7  java.lang.invoke.LambdaForm$DMH/0x00007f8b9c009800.newInvokeSpecial(Object, Object, int, Object):Object (28 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 5  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=1.000000, probability=11.001513, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 22  havlak.HavlakLoopFinder$$Lambda/0x00007f8b9c00ca50.<init>(HavlakLoopFinder, int, Vector):void (20 bytes)   relevance-based (relevance=1.000000, probability=11.001513, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 47  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  havlak.UnionFindNode$$Lambda/0x00007f8b9c00ce90.<init>(UnionFindNode):void (10 bytes)   inline method (bytecode parsing)
                            @ 8  havlak.UnionFindNode.lambda$findSet$0(UnionFindNode):void (9 bytes)   inline method (bytecode parsing)
                              @ 5  havlak.UnionFindNode.union(UnionFindNode):void (6 bytes)   inline method (bytecode parsing)
                                          @ 20  havlak.UnionFindNode$$Lambda/0x00007f8b9c00ce90.apply(Object):void (12 bytes)   relevance-based (relevance=0.477644, probability=5.254807, bonus=1.000000, nodes=20 <= 143.293209)
                                        @ 52  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=0.691118, probability=7.603343, bonus=1.000000, nodes=37 <= 207.335387)
                                      @ 18  havlak.UnionFindNode.findSet():UnionFindNode (57 bytes)   relevance-based (relevance=0.691118, probability=7.603343, bonus=1.000000, nodes=68 <= 207.335387)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                        @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000018, probability=0.000199, bonus=1.000000, nodes=41 > 0.005436)
                                      @ 21  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=0.691118, probability=7.603343, bonus=1.000000, nodes=35 <= 207.335387)
                                    @ 16  havlak.HavlakLoopFinder.lambda$stepD$6(int, Vector, Integer):void (37 bytes)   relevance-based (relevance=0.691118, probability=7.603343, bonus=1.000000, nodes=117 <= 207.335387)
                                  @ 20  havlak.HavlakLoopFinder$$Lambda/0x00007f8b9c00ca50.apply(Object):void (20 bytes)   relevance-based (relevance=0.691118, probability=7.603343, bonus=1.000000, nodes=125 <= 207.335387)
                                @ 19  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=11.001513, bonus=1.000000, nodes=141 <= 300.000000)
                              @ 188  havlak.HavlakLoopFinder.stepD(int, Vector):void (23 bytes)   relevance-based (relevance=1.374974, probability=11.001513, bonus=1.000000, nodes=170 <= 300.000000)
                            @ 8  havlak.HavlakLoopFinder.lambda$findLoops$2(Vector, UnionFindNode):void (6 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000018, probability=0.000199, bonus=1.000000, nodes=41 > 0.005436)
                                  @ 2  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=0.691118, probability=7.603343, bonus=1.000000, nodes=35 <= 207.335387)
                                @ 20  havlak.HavlakLoopFinder$$Lambda/0x00007f8b9c00cc70.apply(Object):void (12 bytes)   relevance-based (relevance=0.691118, probability=7.603343, bonus=1.000000, nodes=44 <= 207.335387)
                              @ 208  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=11.001513, bonus=1.000000, nodes=60 <= 300.000000)
                              @ 229  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.818135, probability=20.002241, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  havlak.SimpleLoop.setCounter(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 34  som.IdentitySet.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  som.Set.<init>():void (7 bytes)   inline method (bytecode parsing)
                                @ 3  som.Set.<init>(int):void (17 bytes)   inline method (bytecode parsing)
                                  @ 10  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 45  som.IdentitySet.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  som.Set.<init>():void (7 bytes)   inline method (bytecode parsing)
                                @ 3  som.Set.<init>(int):void (17 bytes)   inline method (bytecode parsing)
                                  @ 10  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 2  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  som.IdentitySet$$Lambda/0x00007f8b9c00d4f0.<init>(Object):void (10 bytes)   inline method (bytecode parsing)
                            @ 7  som.Set.hasSome(TestInterface):boolean (9 bytes)   inline method (bytecode parsing)
                                          @ 5  som.IdentitySet.lambda$contains$0(Object, Object):boolean (11 bytes)   trivial (relevance=0.247098, probability=2.531228, bonus=1.000000, nodes=8)
                                        @ 20  som.IdentitySet$$Lambda/0x00007f8b9c00d4f0.test(Object):boolean (9 bytes)   trivial (relevance=0.247098, probability=2.531228, bonus=1.000000, nodes=9)
                                      @ 5  som.Vector.hasSome(TestInterface):boolean (38 bytes)   relevance-based (relevance=0.283735, probability=3.000277, bonus=1.000000, nodes=25 <= 85.120581)
                                    @ 2  som.IdentitySet.contains(Object):boolean (11 bytes)   relevance-based (relevance=0.283735, probability=3.000277, bonus=1.000000, nodes=40 <= 85.120581)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                      @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000007, probability=0.000079, bonus=1.000000, nodes=41 > 0.002145)
                                    @ 13  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=0.272715, probability=3.000277, bonus=1.000000, nodes=35 <= 81.814483)
                                  @ 60  som.Set.add(Object):void (17 bytes)   relevance-based (relevance=0.272715, probability=3.000277, bonus=1.000000, nodes=74 <= 81.814483)
                                @ 6  havlak.SimpleLoop.<init>(BasicBlock, boolean):void (69 bytes)   not inlining relevance-based (relevance=0.272715, probability=3.000277, bonus=1.000000, nodes=128 > 81.814483)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000007, probability=0.000079, bonus=1.000000, nodes=41 > 0.002145)
                                @ 33  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=0.272715, probability=3.000277, bonus=1.000000, nodes=35 <= 81.814483)
                              @ 328  havlak.LoopStructureGraph.createNewLoop(BasicBlock, boolean):SimpleLoop (38 bytes)   relevance-based (relevance=0.272715, probability=3.000277, bonus=1.000000, nodes=52 <= 81.814483)
                            @ 7  havlak.UnionFindNode.setLoop(SimpleLoop):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  java.lang.invoke.LambdaForm$MH/0x00007f8b9c00a000.linkToTargetMethod(Object, int, Object, Object):Object (11 bytes)   inline method (bytecode parsing)
                              @ 7  java.lang.invoke.LambdaForm$DMH/0x00007f8b9c009800.newInvokeSpecial(Object, Object, int, Object):Object (28 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 22  havlak.HavlakLoopFinder$$Lambda/0x00007f8b9c00d710.<init>(HavlakLoopFinder, int, SimpleLoop):void (20 bytes)   relevance-based (relevance=0.272715, probability=3.000277, bonus=1.000000, nodes=14 <= 81.814483)
                            @ 5  havlak.UnionFindNode.getDfsNumber():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 17  havlak.UnionFindNode.union(UnionFindNode):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  havlak.UnionFindNode.getLoop():SimpleLoop (5 bytes)   inline accessor method (bytecode parsing)
                            @ 28  havlak.UnionFindNode.getLoop():SimpleLoop (5 bytes)   inline accessor method (bytecode parsing)
                            @ 40  havlak.UnionFindNode.getBb():BasicBlock (5 bytes)   inline accessor method (bytecode parsing)
                            @ 43  havlak.SimpleLoop.addNode(BasicBlock):void (9 bytes)   inline method (bytecode parsing)
                            @ 10  havlak.SimpleLoop.addChildLoop(SimpleLoop):void (9 bytes)   inline method (bytecode parsing)
                                        @ 5  som.Set.add(Object):void (17 bytes)   not inlining relevance-based (relevance=0.053856, probability=0.460823, bonus=1.000000, nodes=21 > 16.156856)
                                      @ 32  havlak.SimpleLoop.setParent(SimpleLoop):void (14 bytes)   relevance-based (relevance=0.053856, probability=0.460823, bonus=1.000000, nodes=16 <= 16.156856)
                            @ 2  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  som.IdentitySet$$Lambda/0x00007f8b9c00d4f0.<init>(Object):void (10 bytes)   inline method (bytecode parsing)
                            @ 7  som.Set.hasSome(TestInterface):boolean (9 bytes)   inline method (bytecode parsing)
                                              @ 5  som.IdentitySet.lambda$contains$0(Object, Object):boolean (11 bytes)   trivial (relevance=0.170774, probability=1.360597, bonus=1.000000, nodes=8)
                                            @ 20  som.IdentitySet$$Lambda/0x00007f8b9c00d4f0.test(Object):boolean (9 bytes)   trivial (relevance=0.170774, probability=1.360597, bonus=1.000000, nodes=9)
                                          @ 5  som.Vector.hasSome(TestInterface):boolean (38 bytes)   relevance-based (relevance=0.196095, probability=1.612722, bonus=1.000000, nodes=25 <= 58.828362)
                                        @ 2  som.IdentitySet.contains(Object):boolean (11 bytes)   relevance-based (relevance=0.196095, probability=1.612722, bonus=1.000000, nodes=40 <= 58.828362)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                          @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000005, probability=0.000042, bonus=1.000000, nodes=41 > 0.001482)
                                        @ 13  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=0.188478, probability=1.612722, bonus=1.000000, nodes=35 <= 56.543459)
                                      @ 5  som.Set.add(Object):void (17 bytes)   not inlining relevance-based (relevance=0.188478, probability=1.612722, bonus=1.000000, nodes=74 > 56.543459)
                                    @ 16  havlak.HavlakLoopFinder.lambda$setLoopAttributes$5(int, SimpleLoop, UnionFindNode):void (47 bytes)   relevance-based (relevance=0.188478, probability=2.073545, bonus=1.000000, nodes=53 <= 56.543459)
                                  @ 20  havlak.HavlakLoopFinder$$Lambda/0x00007f8b9c00d710.apply(Object):void (20 bytes)   not inlining relevance-based (relevance=0.188478, probability=2.073545, bonus=1.000000, nodes=61 > 56.543459)
                                @ 19  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=0.272715, probability=3.000277, bonus=1.000000, nodes=24 <= 81.814483)
                              @ 338  havlak.HavlakLoopFinder.setLoopAttributes(int, Vector, SimpleLoop):void (23 bytes)   relevance-based (relevance=0.272715, probability=3.000277, bonus=1.000000, nodes=47 <= 81.814483)
                                @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=0.818135, probability=9.000728, bonus=1.000000, nodes=10 <= 245.440626)
                              @ 237  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=0.818135, probability=9.000728, bonus=1.000000, nodes=18 <= 245.440626)
                              @ 254  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=0.818135, probability=9.000728, bonus=1.000000, nodes=10 <= 245.440626)
                            @ 6  havlak.UnionFindNode.getDfsNumber():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 19  java.lang.invoke.LambdaForm$MH/0x00007f8b9c00b400.linkToTargetMethod(Object, int, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f8b9c00ac00.newInvokeSpecial(Object, Object, int, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                            @ 24  som.Set.forEach(ForEachInterface):void (9 bytes)   inline method (bytecode parsing)
                                @ 9  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=0.818135, probability=9.000728, bonus=1.000000, nodes=10 <= 245.440626)
                                @ 24  havlak.HavlakLoopFinder$$Lambda/0x00007f8b9c00d0b0.<init>(HavlakLoopFinder, int, Vector, Vector):void (26 bytes)   relevance-based (relevance=0.818135, probability=9.000728, bonus=1.000000, nodes=17 <= 245.440626)
                            @ 23  havlak.UnionFindNode.getDfsNumber():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 54  havlak.UnionFindNode.getDfsNumber():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 68  havlak.UnionFindNode.getDfsNumber():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 78  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  havlak.HavlakLoopFinder$$Lambda/0x00007f8b9c00d2d0.<init>(UnionFindNode):void (10 bytes)   inline method (bytecode parsing)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 47  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  havlak.UnionFindNode$$Lambda/0x00007f8b9c00ce90.<init>(UnionFindNode):void (10 bytes)   inline method (bytecode parsing)
                            @ 8  havlak.UnionFindNode.lambda$findSet$0(UnionFindNode):void (9 bytes)   inline method (bytecode parsing)
                              @ 5  havlak.UnionFindNode.union(UnionFindNode):void (6 bytes)   inline method (bytecode parsing)
                                          @ 20  havlak.UnionFindNode$$Lambda/0x00007f8b9c00ce90.apply(Object):void (12 bytes)   relevance-based (relevance=0.691118, probability=4.299144, bonus=1.000000, nodes=20 <= 207.335387)
                                        @ 52  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=6.220564, bonus=1.000000, nodes=37 <= 300.000000)
                                      @ 14  havlak.UnionFindNode.findSet():UnionFindNode (57 bytes)   relevance-based (relevance=1.130843, probability=6.220564, bonus=1.000000, nodes=68 <= 300.000000)
                                      @ 26  havlak.HavlakLoopFinder.isAncestor(int, int):boolean (21 bytes)   relevance-based (relevance=0.565428, probability=6.220564, bonus=1.000000, nodes=21 <= 169.628424)
                                          @ 8  havlak.HavlakLoopFinder.lambda$stepEProcessNonBackPreds$3(UnionFindNode, UnionFindNode):boolean (11 bytes)   trivial (relevance=0.246212, probability=2.624065, bonus=1.000000, nodes=8)
                                        @ 20  havlak.HavlakLoopFinder$$Lambda/0x00007f8b9c00d2d0.test(Object):boolean (12 bytes)   relevance-based (relevance=0.246212, probability=2.624065, bonus=1.000000, nodes=12 <= 73.863580)
                                      @ 83  som.Vector.hasSome(TestInterface):boolean (38 bytes)   relevance-based (relevance=0.282717, probability=3.110318, bonus=1.000000, nodes=28 <= 84.815193)
                                    @ 20  havlak.HavlakLoopFinder.lambda$stepEProcessNonBackPreds$4(int, Vector, Vector, Integer):void (102 bytes)   not inlining relevance-based (relevance=0.565428, probability=6.220564, bonus=1.000000, nodes=174 > 169.628424)
                                  @ 20  havlak.HavlakLoopFinder$$Lambda/0x00007f8b9c00d0b0.apply(Object):void (24 bytes)   relevance-based (relevance=0.565428, probability=6.220564, bonus=1.000000, nodes=15 <= 169.628424)
                                @ 5  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=0.818135, probability=9.000728, bonus=1.000000, nodes=32 <= 245.440626)
                              @ 280  havlak.HavlakLoopFinder.stepEProcessNonBackPreds(int, Vector, Vector, UnionFindNode):void (28 bytes)   relevance-based (relevance=0.818135, probability=9.000728, bonus=1.000000, nodes=74 <= 245.440626)
                            @ 29  havlak.UnionFindNode.getBb():BasicBlock (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  havlak.BasicBlock.getNumPred():int (8 bytes)   inline method (bytecode parsing)
                              @ 4  som.Vector.size():int (10 bytes)   inline method (bytecode parsing)
                            @ 8  havlak.BasicBlock.getInEdges():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 13  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, int, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.LambdaForm$DMH/0x00007f8b9c009000.newInvokeSpecial(Object, Object, int):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 19  havlak.HavlakLoopFinder$$Lambda/0x00007f8b9c00c418.<init>(HavlakLoopFinder, int):void (15 bytes)   relevance-based (relevance=1.000000, probability=11.727561, bonus=1.000000, nodes=11 <= 300.000000)
                                          @ 7  havlak.BasicBlock.customHash():int (5 bytes)   trivial (relevance=0.682124, probability=6.490539, bonus=1.000000, nodes=5)
                                        @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   relevance-based (relevance=0.682124, probability=6.490539, bonus=1.000000, nodes=12 <= 204.637120)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                        @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=0.682124, probability=6.490539, bonus=1.000000, nodes=11 <= 204.637120)
                                        @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=0.682124, probability=6.490539, bonus=1.000000, nodes=21 <= 204.637120)
                                      @ 5  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=0.682124, probability=6.490539, bonus=1.000000, nodes=47 <= 204.637120)
                                      @ 24  havlak.HavlakLoopFinder.isAncestor(int, int):boolean (21 bytes)   relevance-based (relevance=0.553504, probability=6.490539, bonus=1.000000, nodes=21 <= 166.051350)
                                      @ 35  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=0.104417, probability=1.224420, bonus=1.000000, nodes=14 <= 31.325072)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                      @ 45  som.Vector.append(Object):void (51 bytes)   not inlining relevance-based (relevance=0.104417, probability=1.224420, bonus=1.000000, nodes=35 > 31.325072)
                                      @ 56  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=0.449088, probability=5.266119, bonus=1.000000, nodes=14 <= 134.726278)
                            @ 2  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  som.Set$$Lambda/0x00007f8b9c00c830.<init>(Object):void (10 bytes)   inline method (bytecode parsing)
                            @ 7  som.Set.hasSome(TestInterface):boolean (9 bytes)   inline method (bytecode parsing)
                            @ 5  som.Set.lambda$contains$1(Object, Object):boolean (6 bytes)   inline method (bytecode parsing)
                                              @ 2  java.lang.Integer.equals(Object):boolean (29 bytes)   relevance-based (relevance=0.477538, probability=5.646655, bonus=1.000000, nodes=19 <= 143.261314)
                                            @ 20  som.Set$$Lambda/0x00007f8b9c00c830.test(Object):boolean (9 bytes)   relevance-based (relevance=0.477538, probability=5.646655, bonus=1.000000, nodes=28 <= 143.261314)
                                          @ 5  som.Vector.hasSome(TestInterface):boolean (38 bytes)   relevance-based (relevance=0.466014, probability=5.266119, bonus=1.000000, nodes=47 <= 139.804120)
                                        @ 2  som.Set.contains(Object):boolean (11 bytes)   relevance-based (relevance=0.466014, probability=5.266119, bonus=1.000000, nodes=66 <= 139.804120)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                          @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000011, probability=0.000134, bonus=1.000000, nodes=41 > 0.003441)
                                        @ 13  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=0.437467, probability=5.129853, bonus=1.000000, nodes=35 <= 131.240115)
                                      @ 66  som.Set.add(Object):void (17 bytes)   relevance-based (relevance=0.449088, probability=5.266119, bonus=1.000000, nodes=99 <= 134.726278)
                                    @ 12  havlak.HavlakLoopFinder.lambda$processEdges$1(int, BasicBlock):void (70 bytes)   not inlining relevance-based (relevance=0.553443, probability=6.490539, bonus=1.000000, nodes=223 > 166.032963)
                                  @ 20  havlak.HavlakLoopFinder$$Lambda/0x00007f8b9c00c418.apply(Object):void (16 bytes)   relevance-based (relevance=0.553443, probability=6.490539, bonus=1.000000, nodes=13 <= 166.032963)
                                @ 18  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=11.727561, bonus=1.000000, nodes=30 <= 300.000000)
                              @ 52  havlak.HavlakLoopFinder.processEdges(BasicBlock, int):void (22 bytes)   relevance-based (relevance=1.000000, probability=11.727561, bonus=1.000000, nodes=58 <= 300.000000)
                            @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                                  @ 7  havlak.BasicBlock.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=21 <= 300.000000)
                              @ 5  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.234045, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                              @ 24  havlak.HavlakLoopFinder.isAncestor(int, int):boolean (21 bytes)   relevance-based (relevance=1.000221, probability=1.000000, bonus=1.000000, nodes=21 <= 300.000000)
                              @ 35  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=0.189699, probability=0.189657, bonus=1.000000, nodes=14 <= 56.909712)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000005, probability=0.000005, bonus=1.000000, nodes=41 > 0.001492)
                              @ 45  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=0.189699, probability=0.189657, bonus=1.000000, nodes=35 <= 56.909712)
                              @ 56  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=0.810522, probability=0.810343, bonus=1.000000, nodes=14 <= 243.156734)
                            @ 2  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  som.Set$$Lambda/0x00007f8b9c00c830.<init>(Object):void (10 bytes)   inline method (bytecode parsing)
                            @ 7  som.Set.hasSome(TestInterface):boolean (9 bytes)   inline method (bytecode parsing)
                            @ 5  som.Set.lambda$contains$1(Object, Object):boolean (6 bytes)   inline method (bytecode parsing)
                                      @ 2  java.lang.Integer.equals(Object):boolean (29 bytes)   relevance-based (relevance=0.853159, probability=0.984100, bonus=1.000000, nodes=19 <= 255.947807)
                                    @ 20  som.Set$$Lambda/0x00007f8b9c00c830.test(Object):boolean (9 bytes)   relevance-based (relevance=0.853159, probability=0.984100, bonus=1.000000, nodes=28 <= 255.947807)
                                  @ 5  som.Vector.hasSome(TestInterface):boolean (38 bytes)   relevance-based (relevance=0.839187, probability=0.810343, bonus=1.000000, nodes=47 <= 251.756218)
                                @ 2  som.Set.contains(Object):boolean (11 bytes)   relevance-based (relevance=0.839187, probability=0.810343, bonus=1.000000, nodes=66 <= 251.756218)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000021, probability=0.000021, bonus=1.000000, nodes=41 > 0.006248)
                                @ 13  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=0.794403, probability=0.794227, bonus=1.000000, nodes=35 <= 238.320760)
                              @ 66  som.Set.add(Object):void (17 bytes)   relevance-based (relevance=0.810522, probability=0.810343, bonus=1.000000, nodes=99 <= 243.156734)
                            @ 5  som.Set.lambda$contains$1(Object, Object):boolean (6 bytes)   inline method (bytecode parsing)
                                @ 2  java.lang.Integer.equals(Object):boolean (29 bytes)   relevance-based (relevance=0.144099, probability=0.092131, bonus=1.000000, nodes=19 <= 43.229786)
                                @ 8  havlak.HavlakLoopFinder.lambda$stepEProcessNonBackPreds$3(UnionFindNode, UnionFindNode):boolean (11 bytes)   trivial (relevance=0.860373, probability=0.550085, bonus=1.000000, nodes=9)
                                @ 5  som.IdentitySet.lambda$contains$0(Object, Object):boolean (11 bytes)   trivial (relevance=1.000000, probability=0.647462, bonus=1.000000, nodes=9)
                              @ 20  som.IdentitySet$$Lambda/0x00007f8b9c00d4f0.test(Object):boolean (9 bytes)   relevance-based (relevance=1.012678, probability=1.289678, bonus=1.000000, nodes=51 <= 300.000000)
                            @ 3  som.Set.<init>(int):void (17 bytes)   inline method (bytecode parsing)
                              @ 10  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                              @ 12  havlak.HavlakLoopFinder.lambda$processEdges$1(int, BasicBlock):void (70 bytes)   not inlining too large previous low-level graph (low-level-nodes: 927, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=57)
                            @ 2  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  som.Set$$Lambda/0x00007f8b9c00c830.<init>(Object):void (10 bytes)   inline method (bytecode parsing)
                            @ 7  som.Set.hasSome(TestInterface):boolean (9 bytes)   inline method (bytecode parsing)
                            @ 5  som.Set.lambda$contains$1(Object, Object):boolean (6 bytes)   inline method (bytecode parsing)
                                  @ 2  java.lang.Integer.equals(Object):boolean (29 bytes)   relevance-based (relevance=1.000000, probability=1.293896, bonus=1.000000, nodes=19 <= 300.000000)
                                @ 20  som.Set$$Lambda/0x00007f8b9c00c830.test(Object):boolean (9 bytes)   relevance-based (relevance=1.012052, probability=1.293896, bonus=1.000000, nodes=28 <= 300.000000)
                              @ 5  som.Vector.hasSome(TestInterface):boolean (38 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 47  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  havlak.UnionFindNode$$Lambda/0x00007f8b9c00ce90.<init>(UnionFindNode):void (10 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                              @ 34  som.Vector.append(Object):void (51 bytes)   not inlining relevance-based (relevance=0.000073, probability=0.000073, bonus=1.000000, nodes=35 > 0.021802)
                            @ 8  havlak.UnionFindNode.lambda$findSet$0(UnionFindNode):void (9 bytes)   inline method (bytecode parsing)
                              @ 5  havlak.UnionFindNode.union(UnionFindNode):void (6 bytes)   inline method (bytecode parsing)
                                @ 20  havlak.UnionFindNode$$Lambda/0x00007f8b9c00ce90.apply(Object):void (12 bytes)   relevance-based (relevance=0.447150, probability=0.447150, bonus=1.000000, nodes=20 <= 134.145067)
                              @ 52  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=37 <= 300.000000)
                            @ 7  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                @ 7  havlak.BasicBlock.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   relevance-based (relevance=1.560561, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 8  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=0.561247, probability=0.359205, bonus=1.000000, nodes=21 <= 168.373998)
                            @ 8  som.IdentityDictionary$IdEntry.<init>(int, Object, Object, Dictionary$Entry):void (10 bytes)   inline method (bytecode parsing)
                                @ 45  som.IdentityDictionary.newEntry(Dictionary$CustomHash, Object, int):Dictionary$Entry (12 bytes)   not inlining relevance-based (relevance=0.000685, probability=0.000439, bonus=1.000000, nodes=12 > 0.205467)
                              @ 59  som.Dictionary.insertBucketEntry(Dictionary$CustomHash, Object, int, Dictionary$Entry):void (62 bytes)   relevance-based (relevance=0.560561, probability=0.359205, bonus=1.000000, nodes=51 <= 168.168393)
                            @ 8  som.IdentityDictionary$IdEntry.<init>(int, Object, Object, Dictionary$Entry):void (10 bytes)   inline method (bytecode parsing)
                                @ 6  som.Dictionary$Entry.<init>(int, Object, Object, Dictionary$Entry):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.640795, bonus=1.000000, nodes=17 <= 300.000000)
                              @ 36  som.IdentityDictionary.newEntry(Dictionary$CustomHash, Object, int):Dictionary$Entry (12 bytes)   relevance-based (relevance=1.000000, probability=0.640795, bonus=1.000000, nodes=19 <= 300.000000)
                              @ 75  som.Dictionary.resize():void (24 bytes)   not inlining relevance-based (relevance=0.000675, probability=0.000432, bonus=1.000000, nodes=14 > 0.202396)
                            @ 23  havlak.UnionFindNode.getDfsNumber():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 54  havlak.UnionFindNode.getDfsNumber():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 68  havlak.UnionFindNode.getDfsNumber():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 78  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  havlak.HavlakLoopFinder$$Lambda/0x00007f8b9c00d2d0.<init>(UnionFindNode):void (10 bytes)   inline method (bytecode parsing)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 47  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  havlak.UnionFindNode$$Lambda/0x00007f8b9c00ce90.<init>(UnionFindNode):void (10 bytes)   inline method (bytecode parsing)
                              @ 14  havlak.UnionFindNode.findSet():UnionFindNode (57 bytes)   not inlining too large previous low-level graph (low-level-nodes: 614, relevance=1.917114, probability=1.000000, bonus=1.000000, nodes=50)
                              @ 26  havlak.HavlakLoopFinder.isAncestor(int, int):boolean (21 bytes)   relevance-based (relevance=1.917114, probability=1.000000, bonus=1.000000, nodes=21 <= 300.000000)
                                  @ 8  havlak.HavlakLoopFinder.lambda$stepEProcessNonBackPreds$3(UnionFindNode, UnionFindNode):boolean (11 bytes)   trivial (relevance=0.873246, probability=0.675728, bonus=1.000000, nodes=9)
                                @ 20  havlak.HavlakLoopFinder$$Lambda/0x00007f8b9c00d2d0.test(Object):boolean (12 bytes)   relevance-based (relevance=0.873246, probability=0.675728, bonus=1.000000, nodes=13 <= 261.973799)
                              @ 83  som.Vector.hasSome(TestInterface):boolean (38 bytes)   relevance-based (relevance=0.862847, probability=0.522243, bonus=1.000000, nodes=32 <= 258.854101)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000022, probability=0.000013, bonus=1.000000, nodes=41 > 0.006682)
                              @ 92  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=0.849552, probability=0.514196, bonus=1.000000, nodes=35 <= 254.865606)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000022, probability=0.000013, bonus=1.000000, nodes=41 > 0.006682)
                              @ 98  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=0.849552, probability=0.514196, bonus=1.000000, nodes=35 <= 254.865606)
                              @ 46  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=0.099928, probability=0.060482, bonus=1.000000, nodes=14 <= 29.978318)
                            @ 2  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  som.Set$$Lambda/0x00007f8b9c00c830.<init>(Object):void (10 bytes)   inline method (bytecode parsing)
                            @ 7  som.Set.hasSome(TestInterface):boolean (9 bytes)   inline method (bytecode parsing)
                                  @ 5  som.Vector.hasSome(TestInterface):boolean (38 bytes)   not inlining relevance-based (relevance=0.103008, probability=0.060482, bonus=1.000000, nodes=31 > 30.902375)
                                @ 2  som.Set.contains(Object):boolean (11 bytes)   relevance-based (relevance=0.103008, probability=0.060482, bonus=1.000000, nodes=19 <= 30.902375)
                              @ 60  som.Set.add(Object):void (17 bytes)   not inlining relevance-based (relevance=0.099928, probability=0.060482, bonus=1.000000, nodes=33 > 29.978318)
                            @ 23  havlak.UnionFindNode.getDfsNumber():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 54  havlak.UnionFindNode.getDfsNumber():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 68  havlak.UnionFindNode.getDfsNumber():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 78  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  havlak.HavlakLoopFinder$$Lambda/0x00007f8b9c00d2d0.<init>(UnionFindNode):void (10 bytes)   inline method (bytecode parsing)
                              @ 20  havlak.HavlakLoopFinder.lambda$stepEProcessNonBackPreds$4(int, Vector, Vector, Integer):void (102 bytes)   not inlining too large previous low-level graph (low-level-nodes: 903, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=81)
                            @ 7  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                @ 10  som.Dictionary.atPut(Dictionary$CustomHash, Object):void (79 bytes)   not inlining too large previous low-level graph (low-level-nodes: 481, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=50)
                              @ 8  havlak.HavlakLoopFinder.lambda$initAllNodes$0(BasicBlock):void (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 5  havlak.UnionFindNode.getDfsNumber():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 17  havlak.UnionFindNode.union(UnionFindNode):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  havlak.UnionFindNode.getLoop():SimpleLoop (5 bytes)   inline accessor method (bytecode parsing)
                            @ 28  havlak.UnionFindNode.getLoop():SimpleLoop (5 bytes)   inline accessor method (bytecode parsing)
                            @ 40  havlak.UnionFindNode.getBb():BasicBlock (5 bytes)   inline accessor method (bytecode parsing)
                            @ 43  havlak.SimpleLoop.addNode(BasicBlock):void (9 bytes)   inline method (bytecode parsing)
                            @ 10  havlak.SimpleLoop.addChildLoop(SimpleLoop):void (9 bytes)   inline method (bytecode parsing)
                            @ 2  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  som.IdentitySet$$Lambda/0x00007f8b9c00d4f0.<init>(Object):void (10 bytes)   inline method (bytecode parsing)
                            @ 7  som.Set.hasSome(TestInterface):boolean (9 bytes)   inline method (bytecode parsing)
                                          @ 5  som.IdentitySet.lambda$contains$0(Object, Object):boolean (11 bytes)   trivial (relevance=0.353395, probability=0.327732, bonus=1.000000, nodes=9)
                                        @ 20  som.IdentitySet$$Lambda/0x00007f8b9c00d4f0.test(Object):boolean (9 bytes)   relevance-based (relevance=0.353395, probability=0.327732, bonus=1.000000, nodes=10 <= 106.018590)
                                      @ 5  som.Vector.hasSome(TestInterface):boolean (38 bytes)   relevance-based (relevance=0.349187, probability=0.253291, bonus=1.000000, nodes=29 <= 104.756075)
                                    @ 2  som.IdentitySet.contains(Object):boolean (11 bytes)   relevance-based (relevance=0.349187, probability=0.253291, bonus=1.000000, nodes=48 <= 104.756075)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                      @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000009, probability=0.000007, bonus=1.000000, nodes=41 > 0.002627)
                                    @ 13  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=0.333983, probability=0.249388, bonus=1.000000, nodes=35 <= 100.194814)
                                  @ 5  som.Set.add(Object):void (17 bytes)   relevance-based (relevance=0.339209, probability=0.253291, bonus=1.000000, nodes=81 <= 101.762803)
                                @ 32  havlak.SimpleLoop.setParent(SimpleLoop):void (14 bytes)   relevance-based (relevance=0.339209, probability=0.253291, bonus=1.000000, nodes=93 <= 101.762803)
                            @ 2  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  som.IdentitySet$$Lambda/0x00007f8b9c00d4f0.<init>(Object):void (10 bytes)   inline method (bytecode parsing)
                            @ 7  som.Set.hasSome(TestInterface):boolean (9 bytes)   inline method (bytecode parsing)
                                        @ 5  som.IdentitySet.lambda$contains$0(Object, Object):boolean (11 bytes)   trivial (relevance=1.000000, probability=0.966164, bonus=1.000000, nodes=9)
                                      @ 20  som.IdentitySet$$Lambda/0x00007f8b9c00d4f0.test(Object):boolean (9 bytes)   relevance-based (relevance=1.012052, probability=0.966164, bonus=1.000000, nodes=10 <= 300.000000)
                                    @ 5  som.Vector.hasSome(TestInterface):boolean (38 bytes)   relevance-based (relevance=1.000000, probability=0.746709, bonus=1.000000, nodes=29 <= 300.000000)
                                  @ 2  som.IdentitySet.contains(Object):boolean (11 bytes)   relevance-based (relevance=1.029414, probability=0.746709, bonus=1.000000, nodes=48 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000026, probability=0.000019, bonus=1.000000, nodes=41 > 0.007744)
                                  @ 13  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=0.984592, probability=0.735204, bonus=1.000000, nodes=35 <= 295.377517)
                                @ 5  som.Set.add(Object):void (17 bytes)   relevance-based (relevance=1.000000, probability=0.746709, bonus=1.000000, nodes=81 <= 300.000000)
                              @ 16  havlak.HavlakLoopFinder.lambda$setLoopAttributes$5(int, SimpleLoop, UnionFindNode):void (47 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=198 <= 300.000000)
                            @ 5  havlak.UnionFindNode.getDfsNumber():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 17  havlak.UnionFindNode.union(UnionFindNode):void (6 bytes)   inline method (bytecode parsing)
                            @ 21  havlak.UnionFindNode.getLoop():SimpleLoop (5 bytes)   inline accessor method (bytecode parsing)
                            @ 28  havlak.UnionFindNode.getLoop():SimpleLoop (5 bytes)   inline accessor method (bytecode parsing)
                            @ 40  havlak.UnionFindNode.getBb():BasicBlock (5 bytes)   inline accessor method (bytecode parsing)
                            @ 43  havlak.SimpleLoop.addNode(BasicBlock):void (9 bytes)   inline method (bytecode parsing)
                            @ 10  havlak.SimpleLoop.addChildLoop(SimpleLoop):void (9 bytes)   inline method (bytecode parsing)
                            @ 2  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  som.IdentitySet$$Lambda/0x00007f8b9c00d4f0.<init>(Object):void (10 bytes)   inline method (bytecode parsing)
                            @ 7  som.Set.hasSome(TestInterface):boolean (9 bytes)   inline method (bytecode parsing)
                                        @ 5  som.IdentitySet.lambda$contains$0(Object, Object):boolean (11 bytes)   trivial (relevance=0.360831, probability=0.333150, bonus=1.000000, nodes=9)
                                      @ 20  som.IdentitySet$$Lambda/0x00007f8b9c00d4f0.test(Object):boolean (9 bytes)   relevance-based (relevance=0.360831, probability=0.333150, bonus=1.000000, nodes=10 <= 108.249353)
                                    @ 5  som.Vector.hasSome(TestInterface):boolean (38 bytes)   relevance-based (relevance=0.356534, probability=0.257478, bonus=1.000000, nodes=29 <= 106.960273)
                                  @ 2  som.IdentitySet.contains(Object):boolean (11 bytes)   relevance-based (relevance=0.356534, probability=0.257478, bonus=1.000000, nodes=48 <= 106.960273)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000009, probability=0.000007, bonus=1.000000, nodes=41 > 0.002685)
                                  @ 13  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=0.341419, probability=0.253511, bonus=1.000000, nodes=35 <= 102.425594)
                                @ 5  som.Set.add(Object):void (17 bytes)   relevance-based (relevance=0.346762, probability=0.257478, bonus=1.000000, nodes=81 <= 104.028494)
                              @ 32  havlak.SimpleLoop.setParent(SimpleLoop):void (14 bytes)   relevance-based (relevance=0.346762, probability=0.257478, bonus=1.000000, nodes=93 <= 104.028494)
                            @ 2  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  som.IdentitySet$$Lambda/0x00007f8b9c00d4f0.<init>(Object):void (10 bytes)   inline method (bytecode parsing)
                            @ 7  som.Set.hasSome(TestInterface):boolean (9 bytes)   inline method (bytecode parsing)
                                      @ 5  som.IdentitySet.lambda$contains$0(Object, Object):boolean (11 bytes)   trivial (relevance=1.000000, probability=0.960746, bonus=1.000000, nodes=9)
                                    @ 20  som.IdentitySet$$Lambda/0x00007f8b9c00d4f0.test(Object):boolean (9 bytes)   relevance-based (relevance=1.012052, probability=0.960746, bonus=1.000000, nodes=10 <= 300.000000)
                                  @ 5  som.Vector.hasSome(TestInterface):boolean (38 bytes)   relevance-based (relevance=1.000000, probability=0.742522, bonus=1.000000, nodes=29 <= 300.000000)
                                @ 2  som.IdentitySet.contains(Object):boolean (11 bytes)   relevance-based (relevance=1.028182, probability=0.742522, bonus=1.000000, nodes=48 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000026, probability=0.000019, bonus=1.000000, nodes=41 > 0.007744)
                                @ 13  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=0.984592, probability=0.731081, bonus=1.000000, nodes=35 <= 295.377517)
                              @ 5  som.Set.add(Object):void (17 bytes)   relevance-based (relevance=1.000000, probability=0.742522, bonus=1.000000, nodes=81 <= 300.000000)
                            @ 6  havlak.UnionFindNode.getDfsNumber():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 19  java.lang.invoke.LambdaForm$MH/0x00007f8b9c00b400.linkToTargetMethod(Object, int, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f8b9c00ac00.newInvokeSpecial(Object, Object, int, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                            @ 24  som.Set.forEach(ForEachInterface):void (9 bytes)   inline method (bytecode parsing)
                              @ 9  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                              @ 24  havlak.HavlakLoopFinder$$Lambda/0x00007f8b9c00d0b0.<init>(HavlakLoopFinder, int, Vector, Vector):void (26 bytes)   relevance-based (relevance=1.000004, probability=1.000000, bonus=1.000000, nodes=17 <= 300.000000)
                            @ 23  havlak.UnionFindNode.getDfsNumber():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 54  havlak.UnionFindNode.getDfsNumber():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 68  havlak.UnionFindNode.getDfsNumber():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 78  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  havlak.HavlakLoopFinder$$Lambda/0x00007f8b9c00d2d0.<init>(UnionFindNode):void (10 bytes)   inline method (bytecode parsing)
                                  @ 20  havlak.HavlakLoopFinder.lambda$stepEProcessNonBackPreds$4(int, Vector, Vector, Integer):void (102 bytes)   not inlining too large previous low-level graph (low-level-nodes: 903, relevance=0.412447, probability=0.412447, bonus=1.000000, nodes=81)
                                @ 20  havlak.HavlakLoopFinder$$Lambda/0x00007f8b9c00d0b0.apply(Object):void (24 bytes)   relevance-based (relevance=0.412447, probability=0.412447, bonus=1.000000, nodes=15 <= 123.734114)
                              @ 5  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000004, probability=1.000000, bonus=1.000000, nodes=32 <= 300.000000)
                            @ 4  havlak.ControlFlowGraph.getStartBasicBlock():BasicBlock (5 bytes)   inline accessor method (bytecode parsing)
                            @ 15  havlak.ControlFlowGraph.getNumNodes():int (8 bytes)   inline method (bytecode parsing)
                              @ 4  som.Vector.size():int (10 bytes)   inline method (bytecode parsing)
                            @ 98  som.Set.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Set.<init>(int):void (17 bytes)   inline method (bytecode parsing)
                                @ 10  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 112  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 127  havlak.UnionFindNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 165  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 175  havlak.UnionFindNode.getBb():BasicBlock (5 bytes)   inline accessor method (bytecode parsing)
                            @ 195  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 203  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  havlak.HavlakLoopFinder$$Lambda/0x00007f8b9c00cc70.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 212  som.Vector.size():int (10 bytes)   inline method (bytecode parsing)
                            @ 251  havlak.UnionFindNode.getDfsNumber():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 260  som.Set.size():int (8 bytes)   inline method (bytecode parsing)
                              @ 4  som.Vector.size():int (10 bytes)   inline method (bytecode parsing)
                            @ 287  som.Vector.size():int (10 bytes)   inline method (bytecode parsing)
                              @ 229  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.902096, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=0.902096, probability=0.474264, bonus=1.000000, nodes=10 <= 270.628927)
                              @ 237  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=0.902096, probability=0.474264, bonus=1.000000, nodes=18 <= 270.628927)
                              @ 254  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=0.902096, probability=0.474264, bonus=1.000000, nodes=14 <= 270.628927)
                            @ 6  havlak.UnionFindNode.getDfsNumber():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 19  java.lang.invoke.LambdaForm$MH/0x00007f8b9c00b400.linkToTargetMethod(Object, int, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f8b9c00ac00.newInvokeSpecial(Object, Object, int, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                            @ 24  som.Set.forEach(ForEachInterface):void (9 bytes)   inline method (bytecode parsing)
                                @ 9  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=0.902096, probability=0.474264, bonus=1.000000, nodes=14 <= 270.628927)
                                @ 24  havlak.HavlakLoopFinder$$Lambda/0x00007f8b9c00d0b0.<init>(HavlakLoopFinder, int, Vector, Vector):void (26 bytes)   relevance-based (relevance=0.902100, probability=0.474264, bonus=1.000000, nodes=17 <= 270.630081)
                            @ 23  havlak.UnionFindNode.getDfsNumber():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 54  havlak.UnionFindNode.getDfsNumber():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 68  havlak.UnionFindNode.getDfsNumber():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 78  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  havlak.HavlakLoopFinder$$Lambda/0x00007f8b9c00d2d0.<init>(UnionFindNode):void (10 bytes)   inline method (bytecode parsing)
                                    @ 20  havlak.HavlakLoopFinder.lambda$stepEProcessNonBackPreds$4(int, Vector, Vector, Integer):void (102 bytes)   not inlining too large previous low-level graph (low-level-nodes: 903, relevance=0.369342, probability=0.194175, bonus=1.000000, nodes=81)
                                  @ 20  havlak.HavlakLoopFinder$$Lambda/0x00007f8b9c00d0b0.apply(Object):void (24 bytes)   relevance-based (relevance=0.369342, probability=0.194175, bonus=1.000000, nodes=15 <= 110.802469)
                                @ 5  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=0.902100, probability=0.474264, bonus=1.000000, nodes=32 <= 270.630081)
                              @ 280  havlak.HavlakLoopFinder.stepEProcessNonBackPreds(int, Vector, Vector, UnionFindNode):void (28 bytes)   relevance-based (relevance=0.902096, probability=0.474264, bonus=1.000000, nodes=82 <= 270.628927)
                              @ 229  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=0.911209, probability=0.479055, bonus=1.000000, nodes=10 <= 273.362552)
                              @ 237  som.Vector.removeFirst():Object (31 bytes)   not inlining relevance-based (relevance=0.009112, probability=0.004791, bonus=1.000000, nodes=20 > 2.733626)
                              @ 254  som.Vector.at(int):Object (18 bytes)   not inlining relevance-based (relevance=0.009112, probability=0.004791, bonus=1.000000, nodes=14 > 2.733626)
                            @ 6  havlak.UnionFindNode.getDfsNumber():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 19  java.lang.invoke.LambdaForm$MH/0x00007f8b9c00b400.linkToTargetMethod(Object, int, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f8b9c00ac00.newInvokeSpecial(Object, Object, int, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                            @ 24  som.Set.forEach(ForEachInterface):void (9 bytes)   inline method (bytecode parsing)
                              @ 280  havlak.HavlakLoopFinder.stepEProcessNonBackPreds(int, Vector, Vector, UnionFindNode):void (28 bytes)   not inlining relevance-based (relevance=0.009112, probability=0.004791, bonus=1.000000, nodes=35 > 2.733626)
                            @ 15  havlak.SimpleLoop.setCounter(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 34  som.IdentitySet.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  som.Set.<init>():void (7 bytes)   inline method (bytecode parsing)
                                @ 3  som.Set.<init>(int):void (17 bytes)   inline method (bytecode parsing)
                                  @ 10  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 45  som.IdentitySet.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  som.Set.<init>():void (7 bytes)   inline method (bytecode parsing)
                                @ 3  som.Set.<init>(int):void (17 bytes)   inline method (bytecode parsing)
                                  @ 10  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 2  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  som.IdentitySet$$Lambda/0x00007f8b9c00d4f0.<init>(Object):void (10 bytes)   inline method (bytecode parsing)
                            @ 7  som.Set.hasSome(TestInterface):boolean (9 bytes)   inline method (bytecode parsing)
                                          @ 5  som.IdentitySet.lambda$contains$0(Object, Object):boolean (11 bytes)   trivial (relevance=0.570631, probability=0.373144, bonus=1.000000, nodes=9)
                                        @ 20  som.IdentitySet$$Lambda/0x00007f8b9c00d4f0.test(Object):boolean (9 bytes)   relevance-based (relevance=0.570631, probability=0.373144, bonus=1.000000, nodes=10 <= 171.189357)
                                      @ 5  som.Vector.hasSome(TestInterface):boolean (38 bytes)   relevance-based (relevance=0.563836, probability=0.288388, bonus=1.000000, nodes=29 <= 169.150760)
                                    @ 2  som.IdentitySet.contains(Object):boolean (11 bytes)   relevance-based (relevance=0.563836, probability=0.288388, bonus=1.000000, nodes=48 <= 169.150760)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                      @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000014, probability=0.000007, bonus=1.000000, nodes=41 > 0.004249)
                                    @ 13  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=0.540251, probability=0.283945, bonus=1.000000, nodes=35 <= 162.075287)
                                  @ 60  som.Set.add(Object):void (17 bytes)   relevance-based (relevance=0.548706, probability=0.288388, bonus=1.000000, nodes=81 <= 164.611669)
                                @ 6  havlak.SimpleLoop.<init>(BasicBlock, boolean):void (69 bytes)   relevance-based (relevance=0.548706, probability=0.288474, bonus=1.000000, nodes=138 <= 164.611669)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000014, probability=0.000008, bonus=1.000000, nodes=41 > 0.004317)
                                @ 33  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=0.548869, probability=0.288474, bonus=1.000000, nodes=35 <= 164.660631)
                              @ 328  havlak.LoopStructureGraph.createNewLoop(BasicBlock, boolean):SimpleLoop (38 bytes)   not inlining relevance-based (relevance=0.548706, probability=0.288474, bonus=1.000000, nodes=179 > 164.611669)
                            @ 7  havlak.UnionFindNode.setLoop(SimpleLoop):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  java.lang.invoke.LambdaForm$MH/0x00007f8b9c00a000.linkToTargetMethod(Object, int, Object, Object):Object (11 bytes)   inline method (bytecode parsing)
                              @ 7  java.lang.invoke.LambdaForm$DMH/0x00007f8b9c009800.newInvokeSpecial(Object, Object, int, Object):Object (28 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 22  havlak.HavlakLoopFinder$$Lambda/0x00007f8b9c00d710.<init>(HavlakLoopFinder, int, SimpleLoop):void (20 bytes)   relevance-based (relevance=0.548706, probability=0.288474, bonus=1.000000, nodes=14 <= 164.611669)
                                  @ 20  havlak.HavlakLoopFinder$$Lambda/0x00007f8b9c00d710.apply(Object):void (20 bytes)   not inlining too large previous low-level graph (low-level-nodes: 914, relevance=0.224653, probability=0.118108, bonus=1.000000, nodes=14)
                                @ 19  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=0.548706, probability=0.288474, bonus=1.000000, nodes=24 <= 164.611669)
                              @ 338  havlak.HavlakLoopFinder.setLoopAttributes(int, Vector, SimpleLoop):void (23 bytes)   relevance-based (relevance=0.548706, probability=0.288474, bonus=1.000000, nodes=47 <= 164.611669)
                            @ 14  java.lang.invoke.LambdaForm$MH/0x00007f8b9c00a000.linkToTargetMethod(Object, int, Object, Object):Object (11 bytes)   inline method (bytecode parsing)
                              @ 7  java.lang.invoke.LambdaForm$DMH/0x00007f8b9c009800.newInvokeSpecial(Object, Object, int, Object):Object (28 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 5  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=1.000000, probability=19.371377, bonus=1.000000, nodes=14 <= 300.000000)
                                @ 22  havlak.HavlakLoopFinder$$Lambda/0x00007f8b9c00ca50.<init>(HavlakLoopFinder, int, Vector):void (20 bytes)   relevance-based (relevance=1.000004, probability=19.371377, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 47  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  havlak.UnionFindNode$$Lambda/0x00007f8b9c00ce90.<init>(UnionFindNode):void (10 bytes)   inline method (bytecode parsing)
                                      @ 18  havlak.UnionFindNode.findSet():UnionFindNode (57 bytes)   not inlining too large previous low-level graph (low-level-nodes: 614, relevance=0.409424, probability=7.931108, bonus=1.000000, nodes=50)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                        @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000011, probability=0.000208, bonus=1.000000, nodes=41 > 0.003220)
                                      @ 21  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=0.409424, probability=7.931108, bonus=1.000000, nodes=35 <= 122.827220)
                                    @ 16  havlak.HavlakLoopFinder.lambda$stepD$6(int, Vector, Integer):void (37 bytes)   relevance-based (relevance=0.409424, probability=7.931108, bonus=1.000000, nodes=53 <= 122.827220)
                                  @ 20  havlak.HavlakLoopFinder$$Lambda/0x00007f8b9c00ca50.apply(Object):void (20 bytes)   relevance-based (relevance=0.409424, probability=7.931108, bonus=1.000000, nodes=61 <= 122.827220)
                                @ 19  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000004, probability=19.371377, bonus=1.000000, nodes=77 <= 300.000000)
                              @ 188  havlak.HavlakLoopFinder.stepD(int, Vector):void (23 bytes)   relevance-based (relevance=1.405649, probability=19.371377, bonus=1.000000, nodes=114 <= 300.000000)
                            @ 8  havlak.HavlakLoopFinder.lambda$findLoops$2(Vector, UnionFindNode):void (6 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000011, probability=0.000208, bonus=1.000000, nodes=41 > 0.003220)
                                  @ 2  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=0.409424, probability=7.931108, bonus=1.000000, nodes=35 <= 122.827220)
                                @ 20  havlak.HavlakLoopFinder$$Lambda/0x00007f8b9c00cc70.apply(Object):void (12 bytes)   relevance-based (relevance=0.409424, probability=7.931108, bonus=1.000000, nodes=44 <= 122.827220)
                              @ 208  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000004, probability=19.371377, bonus=1.000000, nodes=60 <= 300.000000)
                              @ 229  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.902096, probability=36.846227, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  havlak.SimpleLoop.setCounter(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 34  som.IdentitySet.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  som.Set.<init>():void (7 bytes)   inline method (bytecode parsing)
                                @ 3  som.Set.<init>(int):void (17 bytes)   inline method (bytecode parsing)
                                  @ 10  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 45  som.IdentitySet.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  som.Set.<init>():void (7 bytes)   inline method (bytecode parsing)
                                @ 3  som.Set.<init>(int):void (17 bytes)   inline method (bytecode parsing)
                                  @ 10  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 2  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  som.IdentitySet$$Lambda/0x00007f8b9c00d4f0.<init>(Object):void (10 bytes)   inline method (bytecode parsing)
                            @ 7  som.Set.hasSome(TestInterface):boolean (9 bytes)   inline method (bytecode parsing)
                                          @ 5  som.IdentitySet.lambda$contains$0(Object, Object):boolean (11 bytes)   trivial (relevance=0.300002, probability=7.228323, bonus=1.000000, nodes=9)
                                        @ 20  som.IdentitySet$$Lambda/0x00007f8b9c00d4f0.test(Object):boolean (9 bytes)   relevance-based (relevance=0.300002, probability=7.228323, bonus=1.000000, nodes=10 <= 90.000741)
                                      @ 5  som.Vector.hasSome(TestInterface):boolean (38 bytes)   relevance-based (relevance=0.296430, probability=5.586479, bonus=1.000000, nodes=29 <= 88.928973)
                                    @ 2  som.IdentitySet.contains(Object):boolean (11 bytes)   relevance-based (relevance=0.296430, probability=5.586479, bonus=1.000000, nodes=48 <= 88.928973)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                      @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000007, probability=0.000144, bonus=1.000000, nodes=41 > 0.002234)
                                    @ 13  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=0.284030, probability=5.500401, bonus=1.000000, nodes=35 <= 85.209128)
                                  @ 60  som.Set.add(Object):void (17 bytes)   relevance-based (relevance=0.288475, probability=5.586479, bonus=1.000000, nodes=81 <= 86.542601)
                                @ 6  havlak.SimpleLoop.<init>(BasicBlock, boolean):void (69 bytes)   not inlining relevance-based (relevance=0.288475, probability=5.588141, bonus=1.000000, nodes=138 > 86.542601)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000008, probability=0.000147, bonus=1.000000, nodes=41 > 0.002269)
                                @ 33  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=0.288475, probability=5.588141, bonus=1.000000, nodes=35 <= 86.542601)
                              @ 328  havlak.LoopStructureGraph.createNewLoop(BasicBlock, boolean):SimpleLoop (38 bytes)   relevance-based (relevance=0.288475, probability=5.588141, bonus=1.000000, nodes=52 <= 86.542601)
                            @ 7  havlak.UnionFindNode.setLoop(SimpleLoop):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  java.lang.invoke.LambdaForm$MH/0x00007f8b9c00a000.linkToTargetMethod(Object, int, Object, Object):Object (11 bytes)   inline method (bytecode parsing)
                              @ 7  java.lang.invoke.LambdaForm$DMH/0x00007f8b9c009800.newInvokeSpecial(Object, Object, int, Object):Object (28 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 22  havlak.HavlakLoopFinder$$Lambda/0x00007f8b9c00d710.<init>(HavlakLoopFinder, int, SimpleLoop):void (20 bytes)   relevance-based (relevance=0.288475, probability=5.588141, bonus=1.000000, nodes=14 <= 86.542601)
                                  @ 20  havlak.HavlakLoopFinder$$Lambda/0x00007f8b9c00d710.apply(Object):void (20 bytes)   not inlining too large previous low-level graph (low-level-nodes: 914, relevance=0.118109, probability=2.287919, bonus=1.000000, nodes=14)
                                @ 19  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=0.288475, probability=5.588141, bonus=1.000000, nodes=24 <= 86.542601)
                              @ 338  havlak.HavlakLoopFinder.setLoopAttributes(int, Vector, SimpleLoop):void (23 bytes)   relevance-based (relevance=0.288475, probability=5.588141, bonus=1.000000, nodes=47 <= 86.542601)
                                @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=0.902096, probability=17.474850, bonus=1.000000, nodes=10 <= 270.628927)
                              @ 237  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=0.902096, probability=17.474850, bonus=1.000000, nodes=18 <= 270.628927)
                              @ 254  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=0.902096, probability=17.474850, bonus=1.000000, nodes=14 <= 270.628927)
                            @ 6  havlak.UnionFindNode.getDfsNumber():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 19  java.lang.invoke.LambdaForm$MH/0x00007f8b9c00b400.linkToTargetMethod(Object, int, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f8b9c00ac00.newInvokeSpecial(Object, Object, int, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                            @ 24  som.Set.forEach(ForEachInterface):void (9 bytes)   inline method (bytecode parsing)
                                @ 9  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=0.902096, probability=17.474850, bonus=1.000000, nodes=14 <= 270.628927)
                                @ 24  havlak.HavlakLoopFinder$$Lambda/0x00007f8b9c00d0b0.<init>(HavlakLoopFinder, int, Vector, Vector):void (26 bytes)   relevance-based (relevance=0.902100, probability=17.474850, bonus=1.000000, nodes=17 <= 270.630081)
                            @ 23  havlak.UnionFindNode.getDfsNumber():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 54  havlak.UnionFindNode.getDfsNumber():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 68  havlak.UnionFindNode.getDfsNumber():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 78  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  havlak.HavlakLoopFinder$$Lambda/0x00007f8b9c00d2d0.<init>(UnionFindNode):void (10 bytes)   inline method (bytecode parsing)
                                    @ 20  havlak.HavlakLoopFinder.lambda$stepEProcessNonBackPreds$4(int, Vector, Vector, Integer):void (102 bytes)   not inlining too large previous low-level graph (low-level-nodes: 903, relevance=0.369342, probability=7.154624, bonus=1.000000, nodes=81)
                                  @ 20  havlak.HavlakLoopFinder$$Lambda/0x00007f8b9c00d0b0.apply(Object):void (24 bytes)   relevance-based (relevance=0.369342, probability=7.154624, bonus=1.000000, nodes=15 <= 110.802469)
                                @ 5  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=0.902100, probability=17.474850, bonus=1.000000, nodes=32 <= 270.630081)
                              @ 280  havlak.HavlakLoopFinder.stepEProcessNonBackPreds(int, Vector, Vector, UnionFindNode):void (28 bytes)   relevance-based (relevance=0.902096, probability=17.474850, bonus=1.000000, nodes=82 <= 270.628927)
                              @ 52  som.Dictionary.splitBucket(Dictionary$Entry[], int, Dictionary$Entry):void (132 bytes)   not inlining relevance-based (relevance=0.001102, probability=0.001100, bonus=1.000000, nodes=83 > 0.330599)
                              @ 52  som.Dictionary.splitBucket(Dictionary$Entry[], int, Dictionary$Entry):void (132 bytes)   not inlining relevance-based (relevance=0.001102, probability=0.989305, bonus=1.000000, nodes=83 > 0.330599)
                            @ 4  havlak.ControlFlowGraph.getStartBasicBlock():BasicBlock (5 bytes)   inline accessor method (bytecode parsing)
                            @ 15  havlak.ControlFlowGraph.getNumNodes():int (8 bytes)   inline method (bytecode parsing)
                              @ 4  som.Vector.size():int (10 bytes)   inline method (bytecode parsing)
                            @ 98  som.Set.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Set.<init>(int):void (17 bytes)   inline method (bytecode parsing)
                                @ 10  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 112  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 127  havlak.UnionFindNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 165  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 175  havlak.UnionFindNode.getBb():BasicBlock (5 bytes)   inline accessor method (bytecode parsing)
                            @ 195  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 203  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  havlak.HavlakLoopFinder$$Lambda/0x00007f8b9c00cc70.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 212  som.Vector.size():int (10 bytes)   inline method (bytecode parsing)
                            @ 251  havlak.UnionFindNode.getDfsNumber():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 260  som.Set.size():int (8 bytes)   inline method (bytecode parsing)
                              @ 4  som.Vector.size():int (10 bytes)   inline method (bytecode parsing)
                            @ 287  som.Vector.size():int (10 bytes)   inline method (bytecode parsing)
                              @ 23  som.Vector.removeAll():void (23 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                              @ 30  som.Vector.removeAll():void (23 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                              @ 37  som.Dictionary.removeAll():void (18 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 4  havlak.ControlFlowGraph.getBasicBlocks():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  havlak.HavlakLoopFinder$$Lambda/0x00007f8b9c00c1f8.<init>(HavlakLoopFinder):void (10 bytes)   inline method (bytecode parsing)
                            @ 21  havlak.ControlFlowGraph.getStartBasicBlock():BasicBlock (5 bytes)   inline accessor method (bytecode parsing)
                            @ 7  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                      @ 10  som.Dictionary.atPut(Dictionary$CustomHash, Object):void (79 bytes)   not inlining too large previous low-level graph (low-level-nodes: 481, relevance=0.387503, probability=0.387503, bonus=1.000000, nodes=50)
                                    @ 8  havlak.HavlakLoopFinder.lambda$initAllNodes$0(BasicBlock):void (14 bytes)   relevance-based (relevance=0.387503, probability=0.387503, bonus=1.000000, nodes=11 <= 116.250916)
                                  @ 20  havlak.HavlakLoopFinder$$Lambda/0x00007f8b9c00c1f8.apply(Object):void (12 bytes)   relevance-based (relevance=0.387503, probability=0.387503, bonus=1.000000, nodes=19 <= 116.250916)
                                @ 13  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=36 <= 300.000000)
                            @ 26  havlak.BasicBlock.getOutEdges():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  som.Vector.size():int (10 bytes)   inline method (bytecode parsing)
                                @ 25  havlak.HavlakLoopFinder.doDFS(BasicBlock, int):int (101 bytes)   not inlining too large previous low-level graph (low-level-nodes: 1481, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=70)
                              @ 138  havlak.HavlakLoopFinder.initAllNodes():void (30 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=62 <= 300.000000)
                            @ 29  havlak.UnionFindNode.getBb():BasicBlock (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  havlak.BasicBlock.getNumPred():int (8 bytes)   inline method (bytecode parsing)
                              @ 4  som.Vector.size():int (10 bytes)   inline method (bytecode parsing)
                            @ 8  havlak.BasicBlock.getInEdges():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 13  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, int, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.LambdaForm$DMH/0x00007f8b9c009000.newInvokeSpecial(Object, Object, int):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                  @ 19  havlak.HavlakLoopFinder$$Lambda/0x00007f8b9c00c418.<init>(HavlakLoopFinder, int):void (15 bytes)   relevance-based (relevance=1.000000, probability=12.207334, bonus=1.000000, nodes=11 <= 300.000000)
                                      @ 12  havlak.HavlakLoopFinder.lambda$processEdges$1(int, BasicBlock):void (70 bytes)   not inlining too large previous low-level graph (low-level-nodes: 927, relevance=0.387503, probability=4.730379, bonus=1.000000, nodes=57)
                                    @ 20  havlak.HavlakLoopFinder$$Lambda/0x00007f8b9c00c418.apply(Object):void (16 bytes)   relevance-based (relevance=0.387503, probability=4.730379, bonus=1.000000, nodes=13 <= 116.250916)
                                  @ 18  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=12.207334, bonus=1.000000, nodes=30 <= 300.000000)
                                @ 52  havlak.HavlakLoopFinder.processEdges(BasicBlock, int):void (22 bytes)   relevance-based (relevance=1.000000, probability=12.207334, bonus=1.000000, nodes=58 <= 300.000000)
                              @ 143  havlak.HavlakLoopFinder.identifyEdges(int):void (62 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=84 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000026, probability=0.000800, bonus=1.000000, nodes=41 > 0.007866)
                              @ 101  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=30.522518, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000026, probability=0.000800, bonus=1.000000, nodes=41 > 0.007866)
                              @ 115  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000026, probability=30.522518, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 14  java.lang.invoke.LambdaForm$MH/0x00007f8b9c00a000.linkToTargetMethod(Object, int, Object, Object):Object (11 bytes)   inline method (bytecode parsing)
                              @ 7  java.lang.invoke.LambdaForm$DMH/0x00007f8b9c009800.newInvokeSpecial(Object, Object, int, Object):Object (28 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 5  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=1.000000, probability=30.295957, bonus=1.000000, nodes=14 <= 300.000000)
                                @ 22  havlak.HavlakLoopFinder$$Lambda/0x00007f8b9c00ca50.<init>(HavlakLoopFinder, int, Vector):void (20 bytes)   relevance-based (relevance=1.000003, probability=30.295957, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 47  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  havlak.UnionFindNode$$Lambda/0x00007f8b9c00ce90.<init>(UnionFindNode):void (10 bytes)   inline method (bytecode parsing)
                                      @ 18  havlak.UnionFindNode.findSet():UnionFindNode (57 bytes)   not inlining too large previous low-level graph (low-level-nodes: 614, relevance=0.387503, probability=11.739776, bonus=1.000000, nodes=50)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                        @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000010, probability=0.000308, bonus=1.000000, nodes=41 > 0.003048)
                                      @ 21  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=0.387503, probability=11.739776, bonus=1.000000, nodes=35 <= 116.250916)
                                    @ 16  havlak.HavlakLoopFinder.lambda$stepD$6(int, Vector, Integer):void (37 bytes)   relevance-based (relevance=0.387503, probability=11.739776, bonus=1.000000, nodes=53 <= 116.250916)
                                  @ 20  havlak.HavlakLoopFinder$$Lambda/0x00007f8b9c00ca50.apply(Object):void (20 bytes)   relevance-based (relevance=0.387503, probability=11.739776, bonus=1.000000, nodes=61 <= 116.250916)
                                @ 19  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000003, probability=30.295957, bonus=1.000000, nodes=77 <= 300.000000)
                              @ 188  havlak.HavlakLoopFinder.stepD(int, Vector):void (23 bytes)   relevance-based (relevance=1.417612, probability=30.295957, bonus=1.000000, nodes=114 <= 300.000000)
                            @ 8  havlak.HavlakLoopFinder.lambda$findLoops$2(Vector, UnionFindNode):void (6 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000010, probability=0.000308, bonus=1.000000, nodes=41 > 0.003048)
                                  @ 2  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=0.387503, probability=11.739776, bonus=1.000000, nodes=35 <= 116.250916)
                                @ 20  havlak.HavlakLoopFinder$$Lambda/0x00007f8b9c00cc70.apply(Object):void (12 bytes)   relevance-based (relevance=0.387503, probability=11.739776, bonus=1.000000, nodes=44 <= 116.250916)
                              @ 208  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000003, probability=30.295957, bonus=1.000000, nodes=60 <= 300.000000)
                              @ 229  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.933739, probability=58.584486, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  havlak.SimpleLoop.setCounter(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 34  som.IdentitySet.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  som.Set.<init>():void (7 bytes)   inline method (bytecode parsing)
                                @ 3  som.Set.<init>(int):void (17 bytes)   inline method (bytecode parsing)
                                  @ 10  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 45  som.IdentitySet.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  som.Set.<init>():void (7 bytes)   inline method (bytecode parsing)
                                @ 3  som.Set.<init>(int):void (17 bytes)   inline method (bytecode parsing)
                                  @ 10  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 2  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  som.IdentitySet$$Lambda/0x00007f8b9c00d4f0.<init>(Object):void (10 bytes)   inline method (bytecode parsing)
                            @ 7  som.Set.hasSome(TestInterface):boolean (9 bytes)   inline method (bytecode parsing)
                                          @ 5  som.IdentitySet.lambda$contains$0(Object, Object):boolean (11 bytes)   trivial (relevance=0.305809, probability=11.544063, bonus=1.000000, nodes=9)
                                        @ 20  som.IdentitySet$$Lambda/0x00007f8b9c00d4f0.test(Object):boolean (9 bytes)   relevance-based (relevance=0.305809, probability=11.544063, bonus=1.000000, nodes=10 <= 91.742666)
                                      @ 5  som.Vector.hasSome(TestInterface):boolean (38 bytes)   relevance-based (relevance=0.302167, probability=8.921941, bonus=1.000000, nodes=29 <= 90.650155)
                                    @ 2  som.IdentitySet.contains(Object):boolean (11 bytes)   relevance-based (relevance=0.302167, probability=8.921941, bonus=1.000000, nodes=48 <= 90.650155)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                      @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000008, probability=0.000230, bonus=1.000000, nodes=41 > 0.002282)
                                    @ 13  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=0.290073, probability=8.784469, bonus=1.000000, nodes=35 <= 87.021781)
                                  @ 60  som.Set.add(Object):void (17 bytes)   relevance-based (relevance=0.294612, probability=8.921941, bonus=1.000000, nodes=81 <= 88.383620)
                                @ 6  havlak.SimpleLoop.<init>(BasicBlock, boolean):void (69 bytes)   not inlining relevance-based (relevance=0.294612, probability=8.925524, bonus=1.000000, nodes=138 > 88.383620)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000008, probability=0.000234, bonus=1.000000, nodes=41 > 0.002317)
                                @ 33  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=0.294612, probability=8.925524, bonus=1.000000, nodes=35 <= 88.383620)
                              @ 328  havlak.LoopStructureGraph.createNewLoop(BasicBlock, boolean):SimpleLoop (38 bytes)   relevance-based (relevance=0.294612, probability=8.925524, bonus=1.000000, nodes=52 <= 88.383620)
                            @ 7  havlak.UnionFindNode.setLoop(SimpleLoop):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  java.lang.invoke.LambdaForm$MH/0x00007f8b9c00a000.linkToTargetMethod(Object, int, Object, Object):Object (11 bytes)   inline method (bytecode parsing)
                              @ 7  java.lang.invoke.LambdaForm$DMH/0x00007f8b9c009800.newInvokeSpecial(Object, Object, int, Object):Object (28 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 22  havlak.HavlakLoopFinder$$Lambda/0x00007f8b9c00d710.<init>(HavlakLoopFinder, int, SimpleLoop):void (20 bytes)   relevance-based (relevance=0.294612, probability=8.925524, bonus=1.000000, nodes=14 <= 88.383620)
                                  @ 20  havlak.HavlakLoopFinder$$Lambda/0x00007f8b9c00d710.apply(Object):void (20 bytes)   not inlining too large previous low-level graph (low-level-nodes: 914, relevance=0.114163, probability=3.458668, bonus=1.000000, nodes=14)
                                @ 19  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=0.294612, probability=8.925524, bonus=1.000000, nodes=24 <= 88.383620)
                              @ 338  havlak.HavlakLoopFinder.setLoopAttributes(int, Vector, SimpleLoop):void (23 bytes)   relevance-based (relevance=0.294612, probability=8.925524, bonus=1.000000, nodes=47 <= 88.383620)
                                @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=0.933739, probability=28.288529, bonus=1.000000, nodes=10 <= 280.121816)
                              @ 237  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=0.933739, probability=28.288529, bonus=1.000000, nodes=18 <= 280.121816)
                              @ 254  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=0.933739, probability=28.288529, bonus=1.000000, nodes=14 <= 280.121816)
                            @ 6  havlak.UnionFindNode.getDfsNumber():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 19  java.lang.invoke.LambdaForm$MH/0x00007f8b9c00b400.linkToTargetMethod(Object, int, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f8b9c00ac00.newInvokeSpecial(Object, Object, int, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                            @ 24  som.Set.forEach(ForEachInterface):void (9 bytes)   inline method (bytecode parsing)
                                @ 9  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=0.933739, probability=28.288529, bonus=1.000000, nodes=14 <= 280.121816)
                                @ 24  havlak.HavlakLoopFinder$$Lambda/0x00007f8b9c00d0b0.<init>(HavlakLoopFinder, int, Vector, Vector):void (26 bytes)   relevance-based (relevance=0.933743, probability=28.288529, bonus=1.000000, nodes=17 <= 280.122789)
                            @ 23  havlak.UnionFindNode.getDfsNumber():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 54  havlak.UnionFindNode.getDfsNumber():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 68  havlak.UnionFindNode.getDfsNumber():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 78  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  havlak.HavlakLoopFinder$$Lambda/0x00007f8b9c00d2d0.<init>(UnionFindNode):void (10 bytes)   inline method (bytecode parsing)
                                    @ 20  havlak.HavlakLoopFinder.lambda$stepEProcessNonBackPreds$4(int, Vector, Vector, Integer):void (102 bytes)   not inlining too large previous low-level graph (low-level-nodes: 903, relevance=0.361828, probability=10.961891, bonus=1.000000, nodes=81)
                                  @ 20  havlak.HavlakLoopFinder$$Lambda/0x00007f8b9c00d0b0.apply(Object):void (24 bytes)   relevance-based (relevance=0.361828, probability=10.961891, bonus=1.000000, nodes=15 <= 108.548437)
                                @ 5  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=0.933743, probability=28.288529, bonus=1.000000, nodes=32 <= 280.122789)
                              @ 280  havlak.HavlakLoopFinder.stepEProcessNonBackPreds(int, Vector, Vector, UnionFindNode):void (28 bytes)   relevance-based (relevance=0.933739, probability=28.288529, bonus=1.000000, nodes=82 <= 280.121816)
                              @ 52  som.Dictionary.splitBucket(Dictionary$Entry[], int, Dictionary$Entry):void (132 bytes)   not inlining relevance-based (relevance=0.001102, probability=1.000000, bonus=1.000000, nodes=83 > 0.330599)
                              @ 6  som.Dictionary$Entry.<init>(int, Object, Object, Dictionary$Entry):void (26 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=17 <= 300.000000)
                            @ 8  som.IdentityDictionary$IdEntry.<init>(int, Object, Object, Dictionary$Entry):void (10 bytes)   inline method (bytecode parsing)
                              @ 6  som.Dictionary$Entry.<init>(int, Object, Object, Dictionary$Entry):void (26 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=17 <= 300.000000)
                            @ 34  som.IdentitySet.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  som.Set.<init>():void (7 bytes)   inline method (bytecode parsing)
                                @ 3  som.Set.<init>(int):void (17 bytes)   inline method (bytecode parsing)
                                  @ 10  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 45  som.IdentitySet.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  som.Set.<init>():void (7 bytes)   inline method (bytecode parsing)
                                @ 3  som.Set.<init>(int):void (17 bytes)   inline method (bytecode parsing)
                                  @ 10  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 2  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  som.IdentitySet$$Lambda/0x00007f8b9c00d4f0.<init>(Object):void (10 bytes)   inline method (bytecode parsing)
                            @ 7  som.Set.hasSome(TestInterface):boolean (9 bytes)   inline method (bytecode parsing)
                                      @ 5  som.IdentitySet.lambda$contains$0(Object, Object):boolean (11 bytes)   trivial (relevance=1.000000, probability=1.293377, bonus=1.000000, nodes=9)
                                    @ 20  som.IdentitySet$$Lambda/0x00007f8b9c00d4f0.test(Object):boolean (9 bytes)   relevance-based (relevance=1.012052, probability=1.293377, bonus=1.000000, nodes=10 <= 300.000000)
                                  @ 5  som.Vector.hasSome(TestInterface):boolean (38 bytes)   relevance-based (relevance=1.000000, probability=0.999599, bonus=1.000000, nodes=29 <= 300.000000)
                                @ 2  som.IdentitySet.contains(Object):boolean (11 bytes)   relevance-based (relevance=1.025136, probability=0.999599, bonus=1.000000, nodes=48 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000026, probability=0.000026, bonus=1.000000, nodes=41 > 0.007744)
                                @ 13  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=0.984592, probability=0.984196, bonus=1.000000, nodes=35 <= 295.377517)
                              @ 60  som.Set.add(Object):void (17 bytes)   relevance-based (relevance=1.000000, probability=0.999599, bonus=1.000000, nodes=81 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 47  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  havlak.UnionFindNode$$Lambda/0x00007f8b9c00ce90.<init>(UnionFindNode):void (10 bytes)   inline method (bytecode parsing)
                                @ 18  havlak.UnionFindNode.findSet():UnionFindNode (57 bytes)   not inlining too large previous low-level graph (low-level-nodes: 614, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=50)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000026, probability=0.000026, bonus=1.000000, nodes=41 > 0.007866)
                                @ 21  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 16  havlak.HavlakLoopFinder.lambda$stepD$6(int, Vector, Integer):void (37 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=53 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 47  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  havlak.UnionFindNode$$Lambda/0x00007f8b9c00ce90.<init>(UnionFindNode):void (10 bytes)   inline method (bytecode parsing)
                              @ 18  havlak.UnionFindNode.findSet():UnionFindNode (57 bytes)   not inlining too large previous low-level graph (low-level-nodes: 614, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=50)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000026, probability=0.000026, bonus=1.000000, nodes=41 > 0.007866)
                              @ 21  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 8  havlak.HavlakLoopFinder.lambda$findLoops$2(Vector, UnionFindNode):void (6 bytes)   inline method (bytecode parsing)
                            @ 8  havlak.UnionFindNode.lambda$findSet$0(UnionFindNode):void (9 bytes)   inline method (bytecode parsing)
                              @ 5  havlak.UnionFindNode.union(UnionFindNode):void (6 bytes)   inline method (bytecode parsing)
                              @ 20  havlak.HavlakLoopFinder$$Lambda/0x00007f8b9c00cc70.apply(Object):void (12 bytes)   not inlining too large previous low-level graph (low-level-nodes: 1430, relevance=0.386233, probability=0.278621, bonus=1.000000, nodes=101)
                            @ 8  havlak.HavlakLoopFinder.lambda$findLoops$2(Vector, UnionFindNode):void (6 bytes)   inline method (bytecode parsing)
                            @ 8  havlak.UnionFindNode.lambda$findSet$0(UnionFindNode):void (9 bytes)   inline method (bytecode parsing)
                              @ 5  havlak.UnionFindNode.union(UnionFindNode):void (6 bytes)   inline method (bytecode parsing)
                              @ 20  havlak.HavlakLoopFinder$$Lambda/0x00007f8b9c00cc70.apply(Object):void (12 bytes)   not inlining too large previous low-level graph (low-level-nodes: 1430, relevance=0.003901, probability=0.002814, bonus=1.000000, nodes=101)
                            @ 8  havlak.HavlakLoopFinder.lambda$findLoops$2(Vector, UnionFindNode):void (6 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000026, probability=0.000026, bonus=1.000000, nodes=41 > 0.007866)
                              @ 2  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 15  havlak.SimpleLoop.setCounter(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 34  som.IdentitySet.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  som.Set.<init>():void (7 bytes)   inline method (bytecode parsing)
                                @ 3  som.Set.<init>(int):void (17 bytes)   inline method (bytecode parsing)
                                  @ 10  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 45  som.IdentitySet.<init>():void (5 bytes)   inline method (bytecode parsing)
                              @ 1  som.Set.<init>():void (7 bytes)   inline method (bytecode parsing)
                                @ 3  som.Set.<init>(int):void (17 bytes)   inline method (bytecode parsing)
                                  @ 10  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                              @ 6  havlak.SimpleLoop.<init>(BasicBlock, boolean):void (69 bytes)   not inlining too large previous low-level graph (low-level-nodes: 1079, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=64)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000026, probability=0.000026, bonus=1.000000, nodes=41 > 0.007866)
                              @ 33  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 5  som.IdentitySet.lambda$contains$0(Object, Object):boolean (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                              @ 8  havlak.HavlakLoopFinder.lambda$stepEProcessNonBackPreds$3(UnionFindNode, UnionFindNode):boolean (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                              @ 8  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.001345, probability=1.000000, bonus=1.000000, nodes=21 <= 300.000000)
                            @ 8  som.IdentityDictionary$IdEntry.<init>(int, Object, Object, Dictionary$Entry):void (10 bytes)   inline method (bytecode parsing)
                              @ 45  som.IdentityDictionary.newEntry(Dictionary$CustomHash, Object, int):Dictionary$Entry (12 bytes)   not inlining relevance-based (relevance=0.000609, probability=0.000609, bonus=1.000000, nodes=12 > 0.182724)
                              @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                              @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 1  havlak.SimpleLoop.isRoot():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  havlak.SimpleLoop.getParent():SimpleLoop (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  havlak.SimpleLoop.addChildLoop(SimpleLoop):void (9 bytes)   inline method (bytecode parsing)
                            @ 2  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  som.IdentitySet$$Lambda/0x00007f8b9c00d4f0.<init>(Object):void (10 bytes)   inline method (bytecode parsing)
                            @ 7  som.Set.hasSome(TestInterface):boolean (9 bytes)   inline method (bytecode parsing)
                                          @ 5  som.IdentitySet.lambda$contains$0(Object, Object):boolean (11 bytes)   trivial (relevance=0.490400, probability=0.415311, bonus=1.000000, nodes=9)
                                        @ 20  som.IdentitySet$$Lambda/0x00007f8b9c00d4f0.test(Object):boolean (9 bytes)   relevance-based (relevance=0.490400, probability=0.415311, bonus=1.000000, nodes=10 <= 147.119862)
                                      @ 5  som.Vector.hasSome(TestInterface):boolean (38 bytes)   relevance-based (relevance=0.484560, probability=0.320977, bonus=1.000000, nodes=29 <= 145.367895)
                                    @ 2  som.IdentitySet.contains(Object):boolean (11 bytes)   relevance-based (relevance=0.484560, probability=0.320977, bonus=1.000000, nodes=48 <= 145.367895)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                      @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000012, probability=0.000008, bonus=1.000000, nodes=41 > 0.003661)
                                    @ 13  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=0.465421, probability=0.316031, bonus=1.000000, nodes=35 <= 139.626220)
                                  @ 5  som.Set.add(Object):void (17 bytes)   relevance-based (relevance=0.472704, probability=0.320977, bonus=1.000000, nodes=81 <= 141.811287)
                                @ 19  havlak.SimpleLoop.setParent(SimpleLoop):void (14 bytes)   relevance-based (relevance=0.472704, probability=0.320977, bonus=1.000000, nodes=93 <= 141.811287)
                              @ 8  havlak.LoopStructureGraph.lambda$calculateNestingLevel$0(SimpleLoop):void (23 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=110 <= 300.000000)
                              @ 17  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.180941, probability=0.152338, bonus=1.000000, nodes=9)
                              @ 27  java.lang.StringLatin1.hashCode(byte[]):int (52 bytes)   relevance-based (relevance=0.180941, probability=0.152338, bonus=1.000000, nodes=22 <= 54.282445)
                            @ 2  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  som.Set$$Lambda/0x00007f8b9c00c830.<init>(Object):void (10 bytes)   inline method (bytecode parsing)
                            @ 7  som.Set.hasSome(TestInterface):boolean (9 bytes)   inline method (bytecode parsing)
                            @ 2  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  som.IdentitySet$$Lambda/0x00007f8b9c00d4f0.<init>(Object):void (10 bytes)   inline method (bytecode parsing)
                            @ 7  som.Set.hasSome(TestInterface):boolean (9 bytes)   inline method (bytecode parsing)
                                @ 5  som.Vector.hasSome(TestInterface):boolean (38 bytes)   not inlining relevance-based (relevance=0.000038, probability=0.000015, bonus=1.000000, nodes=31 > 0.011294)
                            @ 5  som.Set.lambda$contains$1(Object, Object):boolean (6 bytes)   inline method (bytecode parsing)
                                    @ 2  java.lang.Integer.equals(Object):boolean (29 bytes)   relevance-based (relevance=1.000000, probability=0.519560, bonus=1.000000, nodes=19 <= 300.000000)
                                  @ 20  som.Set$$Lambda/0x00007f8b9c00c830.test(Object):boolean (9 bytes)   relevance-based (relevance=1.012052, probability=0.519560, bonus=1.000000, nodes=28 <= 300.000000)
                                @ 5  som.Vector.hasSome(TestInterface):boolean (38 bytes)   relevance-based (relevance=1.000000, probability=0.401547, bonus=1.000000, nodes=47 <= 300.000000)
                              @ 2  som.Set.contains(Object):boolean (11 bytes)   relevance-based (relevance=1.025080, probability=1.000000, bonus=1.000000, nodes=85 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000026, probability=0.000026, bonus=1.000000, nodes=41 > 0.007673)
                              @ 13  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=0.975570, probability=0.975534, bonus=1.000000, nodes=35 <= 292.670871)
                            @ 9  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 20  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 31  som.IdentityDictionary.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Dictionary.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                              @ 9  havlak.HavlakLoopFinder.<init>(ControlFlowGraph, LoopStructureGraph):void (53 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 4  havlak.ControlFlowGraph.getStartBasicBlock():BasicBlock (5 bytes)   inline accessor method (bytecode parsing)
                            @ 15  havlak.ControlFlowGraph.getNumNodes():int (8 bytes)   inline method (bytecode parsing)
                              @ 4  som.Vector.size():int (10 bytes)   inline method (bytecode parsing)
                            @ 98  som.Set.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Set.<init>(int):void (17 bytes)   inline method (bytecode parsing)
                                @ 10  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 112  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 127  havlak.UnionFindNode.<init>():void (5 bytes)   inline method (bytecode parsing)
                            @ 165  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 175  havlak.UnionFindNode.getBb():BasicBlock (5 bytes)   inline accessor method (bytecode parsing)
                            @ 195  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 203  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  havlak.HavlakLoopFinder$$Lambda/0x00007f8b9c00cc70.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 212  som.Vector.size():int (10 bytes)   inline method (bytecode parsing)
                            @ 251  havlak.UnionFindNode.getDfsNumber():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 260  som.Set.size():int (8 bytes)   inline method (bytecode parsing)
                              @ 4  som.Vector.size():int (10 bytes)   inline method (bytecode parsing)
                            @ 287  som.Vector.size():int (10 bytes)   inline method (bytecode parsing)
                              @ 14  havlak.HavlakLoopFinder.findLoops():void (348 bytes)   not inlining too large previous low-level graph (low-level-nodes: 5418, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=237)
                            @ 9  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 20  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 31  som.IdentityDictionary.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Dictionary.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 45  havlak.ControlFlowGraph.getNumNodes():int (8 bytes)   inline method (bytecode parsing)
                              @ 4  som.Vector.size():int (10 bytes)   inline method (bytecode parsing)
                              @ 5  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=1.497935, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                              @ 16  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=0.667591, probability=0.667586, bonus=1.000000, nodes=14 <= 200.277356)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 27  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                              @ 31  havlak.BasicBlock.<init>(int):void (34 bytes)   relevance-based (relevance=0.332417, probability=0.332414, bonus=1.000000, nodes=23 <= 99.725095)
                            @ 33  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000382, probability=0.000382, bonus=1.000000, nodes=41 > 0.114676)
                              @ 41  som.Vector.atPut(int, Object):void (64 bytes)   relevance-based (relevance=0.332417, probability=0.332414, bonus=1.000000, nodes=48 <= 99.725095)
                            @ 14  java.lang.invoke.LambdaForm$MH/0x00007f8b9c00a000.linkToTargetMethod(Object, int, Object, Object):Object (11 bytes)   inline method (bytecode parsing)
                              @ 7  java.lang.invoke.LambdaForm$DMH/0x00007f8b9c009800.newInvokeSpecial(Object, Object, int, Object):Object (28 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 5  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                              @ 22  havlak.HavlakLoopFinder$$Lambda/0x00007f8b9c00ca50.<init>(HavlakLoopFinder, int, Vector):void (20 bytes)   relevance-based (relevance=1.000008, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                                @ 20  havlak.HavlakLoopFinder$$Lambda/0x00007f8b9c00ca50.apply(Object):void (20 bytes)   not inlining too large previous low-level graph (low-level-nodes: 355, relevance=0.386233, probability=0.386233, bonus=1.000000, nodes=14)
                              @ 19  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000008, probability=1.000000, bonus=1.000000, nodes=24 <= 300.000000)
                              @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 4  som.Vector.size():int (10 bytes)   inline method (bytecode parsing)
                            @ 8  havlak.HavlakLoopFinder.lambda$findLoops$2(Vector, UnionFindNode):void (6 bytes)   inline method (bytecode parsing)
                            @ 8  havlak.UnionFindNode.lambda$findSet$0(UnionFindNode):void (9 bytes)   inline method (bytecode parsing)
                              @ 5  havlak.UnionFindNode.union(UnionFindNode):void (6 bytes)   inline method (bytecode parsing)
                                @ 20  havlak.HavlakLoopFinder$$Lambda/0x00007f8b9c00cc70.apply(Object):void (12 bytes)   not inlining too large previous low-level graph (low-level-nodes: 1747, relevance=0.386233, probability=0.386233, bonus=1.000000, nodes=101)
                              @ 5  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=24 <= 300.000000)
                            @ 10  havlak.SimpleLoop.addChildLoop(SimpleLoop):void (9 bytes)   inline method (bytecode parsing)
                              @ 5  som.Set.add(Object):void (17 bytes)   not inlining too large previous low-level graph (low-level-nodes: 460, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=21)
                              @ 5  som.Set.add(Object):void (17 bytes)   not inlining too large previous low-level graph (low-level-nodes: 460, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=21)
                            @ 1  havlak.SimpleLoop.isRoot():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  havlak.SimpleLoop.getParent():SimpleLoop (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  havlak.SimpleLoop.addChildLoop(SimpleLoop):void (9 bytes)   inline method (bytecode parsing)
                                @ 5  som.Set.add(Object):void (17 bytes)   not inlining too large previous low-level graph (low-level-nodes: 460, relevance=0.472704, probability=0.320977, bonus=1.000000, nodes=21)
                              @ 19  havlak.SimpleLoop.setParent(SimpleLoop):void (14 bytes)   relevance-based (relevance=0.472704, probability=0.320977, bonus=1.000000, nodes=16 <= 141.811287)
                            @ 1  havlak.SimpleLoop.isRoot():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  havlak.SimpleLoop.getParent():SimpleLoop (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  havlak.SimpleLoop.addChildLoop(SimpleLoop):void (9 bytes)   inline method (bytecode parsing)
                                  @ 5  som.Set.add(Object):void (17 bytes)   not inlining too large previous low-level graph (low-level-nodes: 460, relevance=0.474998, probability=0.322033, bonus=1.000000, nodes=21)
                                @ 19  havlak.SimpleLoop.setParent(SimpleLoop):void (14 bytes)   relevance-based (relevance=0.474998, probability=0.322033, bonus=1.000000, nodes=16 <= 142.499531)
                              @ 8  havlak.LoopStructureGraph.lambda$calculateNestingLevel$0(SimpleLoop):void (23 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=39 <= 300.000000)
                            @ 10  havlak.SimpleLoop.getNestingLevel():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 15  havlak.SimpleLoop.getNestingLevel():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 2  havlak.SimpleLoop.setDepthLevel(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 6  havlak.SimpleLoop.getChildren():IdentitySet (5 bytes)   inline accessor method (bytecode parsing)
                            @ 12  java.lang.invoke.LambdaForm$MH/0x00007f8b9c00a000.linkToTargetMethod(Object, int, Object, Object):Object (11 bytes)   inline method (bytecode parsing)
                              @ 7  java.lang.invoke.LambdaForm$DMH/0x00007f8b9c009800.newInvokeSpecial(Object, Object, int, Object):Object (28 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                            @ 17  som.Set.forEach(ForEachInterface):void (9 bytes)   inline method (bytecode parsing)
                                  @ 22  havlak.LoopStructureGraph$$Lambda/0x00007f8b9c00db50.<init>(LoopStructureGraph, int, SimpleLoop):void (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 10  havlak.SimpleLoop.getNestingLevel():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 15  havlak.SimpleLoop.getNestingLevel():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 2  havlak.SimpleLoop.setDepthLevel(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 6  havlak.SimpleLoop.getChildren():IdentitySet (5 bytes)   inline accessor method (bytecode parsing)
                            @ 12  java.lang.invoke.LambdaForm$MH/0x00007f8b9c00a000.linkToTargetMethod(Object, int, Object, Object):Object (11 bytes)   inline method (bytecode parsing)
                              @ 7  java.lang.invoke.LambdaForm$DMH/0x00007f8b9c009800.newInvokeSpecial(Object, Object, int, Object):Object (28 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                            @ 17  som.Set.forEach(ForEachInterface):void (9 bytes)   inline method (bytecode parsing)
                                          @ 22  havlak.LoopStructureGraph$$Lambda/0x00007f8b9c00db50.<init>(LoopStructureGraph, int, SimpleLoop):void (20 bytes)   relevance-based (relevance=0.386233, probability=0.386233, bonus=1.000000, nodes=14 <= 115.869979)
                            @ 10  havlak.SimpleLoop.getNestingLevel():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 15  havlak.SimpleLoop.getNestingLevel():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 2  havlak.SimpleLoop.setDepthLevel(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 6  havlak.SimpleLoop.getChildren():IdentitySet (5 bytes)   inline accessor method (bytecode parsing)
                            @ 12  java.lang.invoke.LambdaForm$MH/0x00007f8b9c00a000.linkToTargetMethod(Object, int, Object, Object):Object (11 bytes)   inline method (bytecode parsing)
                              @ 7  java.lang.invoke.LambdaForm$DMH/0x00007f8b9c009800.newInvokeSpecial(Object, Object, int, Object):Object (28 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                            @ 17  som.Set.forEach(ForEachInterface):void (9 bytes)   inline method (bytecode parsing)
                                                  @ 22  havlak.LoopStructureGraph$$Lambda/0x00007f8b9c00db50.<init>(LoopStructureGraph, int, SimpleLoop):void (20 bytes)   relevance-based (relevance=0.149176, probability=0.149176, bonus=1.000000, nodes=14 <= 44.752840)
                            @ 10  havlak.SimpleLoop.getNestingLevel():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 15  havlak.SimpleLoop.getNestingLevel():int (5 bytes)   inline accessor method (bytecode parsing)
                                                      @ 16  havlak.LoopStructureGraph.lambda$calculateNestingLevelRec$1(int, SimpleLoop, SimpleLoop):void (26 bytes)   not inlining relevance-based (relevance=0.057617, probability=0.057617, bonus=1.000000, nodes=27 > 17.285035)
                                                    @ 20  havlak.LoopStructureGraph$$Lambda/0x00007f8b9c00db50.apply(Object):void (20 bytes)   relevance-based (relevance=0.057617, probability=0.057617, bonus=1.000000, nodes=14 <= 17.285035)
                                                  @ 5  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=0.149176, probability=0.149176, bonus=1.000000, nodes=31 <= 44.752840)
                                                @ 5  havlak.LoopStructureGraph.calculateNestingLevelRec(SimpleLoop, int):void (21 bytes)   not inlining relevance-based (relevance=0.149176, probability=0.149176, bonus=1.000000, nodes=60 > 44.752840)
                                                @ 19  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.149176, probability=0.149176, bonus=1.000000, nodes=7)
                                                @ 22  havlak.SimpleLoop.setNestingLevel(int):void (14 bytes)   relevance-based (relevance=0.149176, probability=0.149176, bonus=1.000000, nodes=10 <= 44.752840)
                                              @ 16  havlak.LoopStructureGraph.lambda$calculateNestingLevelRec$1(int, SimpleLoop, SimpleLoop):void (26 bytes)   relevance-based (relevance=0.149176, probability=0.149176, bonus=1.000000, nodes=31 <= 44.752840)
                                            @ 20  havlak.LoopStructureGraph$$Lambda/0x00007f8b9c00db50.apply(Object):void (20 bytes)   relevance-based (relevance=0.149176, probability=0.149176, bonus=1.000000, nodes=39 <= 44.752840)
                                          @ 5  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=0.386233, probability=0.386233, bonus=1.000000, nodes=55 <= 115.869979)
                                        @ 5  havlak.LoopStructureGraph.calculateNestingLevelRec(SimpleLoop, int):void (21 bytes)   relevance-based (relevance=0.386233, probability=0.386233, bonus=1.000000, nodes=84 <= 115.869979)
                                        @ 19  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=0.386233, probability=0.386233, bonus=1.000000, nodes=7)
                                        @ 22  havlak.SimpleLoop.setNestingLevel(int):void (14 bytes)   relevance-based (relevance=0.386233, probability=0.386233, bonus=1.000000, nodes=10 <= 115.869979)
                                      @ 16  havlak.LoopStructureGraph.lambda$calculateNestingLevelRec$1(int, SimpleLoop, SimpleLoop):void (26 bytes)   relevance-based (relevance=0.386233, probability=0.386233, bonus=1.000000, nodes=104 <= 115.869979)
                                    @ 20  havlak.LoopStructureGraph$$Lambda/0x00007f8b9c00db50.apply(Object):void (20 bytes)   relevance-based (relevance=0.386233, probability=0.386233, bonus=1.000000, nodes=112 <= 115.869979)
                                  @ 5  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=128 <= 300.000000)
                                @ 5  havlak.LoopStructureGraph.calculateNestingLevelRec(SimpleLoop, int):void (21 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=156 <= 300.000000)
                                @ 19  java.lang.Math.max(int, int):int (11 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=7)
                                @ 22  havlak.SimpleLoop.setNestingLevel(int):void (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 16  havlak.LoopStructureGraph.lambda$calculateNestingLevelRec$1(int, SimpleLoop, SimpleLoop):void (26 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=176 <= 300.000000)
                            @ 30  havlak.BasicBlock.addOutEdge(BasicBlock):void (9 bytes)   inline method (bytecode parsing)
                            @ 41  havlak.BasicBlock.addInEdge(BasicBlock):void (9 bytes)   inline method (bytecode parsing)
                            @ 46  havlak.ControlFlowGraph.addEdge(BasicBlockEdge):void (9 bytes)   inline method (bytecode parsing)
                            @ 45  havlak.ControlFlowGraph.getNumNodes():int (8 bytes)   inline method (bytecode parsing)
                              @ 4  som.Vector.size():int (10 bytes)   inline method (bytecode parsing)
                              @ 7  havlak.ControlFlowGraph.createNode(int):BasicBlock (59 bytes)   not inlining too large previous low-level graph (low-level-nodes: 817, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=51)
                            @ 45  havlak.ControlFlowGraph.getNumNodes():int (8 bytes)   inline method (bytecode parsing)
                              @ 4  som.Vector.size():int (10 bytes)   inline method (bytecode parsing)
                              @ 16  havlak.ControlFlowGraph.createNode(int):BasicBlock (59 bytes)   not inlining too large previous low-level graph (low-level-nodes: 817, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=51)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000026, probability=0.000026, bonus=1.000000, nodes=41 > 0.007866)
                              @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000026, probability=0.000026, bonus=1.000000, nodes=41 > 0.007866)
                              @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000026, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000026, probability=0.000026, bonus=1.000000, nodes=41 > 0.007866)
                              @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000026, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 30  havlak.BasicBlock.addOutEdge(BasicBlock):void (9 bytes)   inline method (bytecode parsing)
                            @ 41  havlak.BasicBlock.addInEdge(BasicBlock):void (9 bytes)   inline method (bytecode parsing)
                            @ 46  havlak.ControlFlowGraph.addEdge(BasicBlockEdge):void (9 bytes)   inline method (bytecode parsing)
                              @ 10  havlak.BasicBlockEdge.<init>(ControlFlowGraph, int, int):void (50 bytes)   not inlining too large previous low-level graph (low-level-nodes: 1042, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=46)
                            @ 30  havlak.BasicBlock.addOutEdge(BasicBlock):void (9 bytes)   inline method (bytecode parsing)
                            @ 41  havlak.BasicBlock.addInEdge(BasicBlock):void (9 bytes)   inline method (bytecode parsing)
                            @ 46  havlak.ControlFlowGraph.addEdge(BasicBlockEdge):void (9 bytes)   inline method (bytecode parsing)
                                @ 10  havlak.BasicBlockEdge.<init>(ControlFlowGraph, int, int):void (50 bytes)   not inlining too large previous low-level graph (low-level-nodes: 1042, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=46)
                              @ 16  havlak.LoopTesterApp.buildConnect(int, int):void (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 14  java.lang.Class.getComponentType():Class (14 bytes)   not inlining relevance-based (relevance=0.007278, probability=0.007225, bonus=1.000000, nodes=11 > 2.183320)
                              @ 32  java.lang.Math.min(int, int):int (11 bytes)   trivial (relevance=1.007278, probability=1.000000, bonus=1.000000, nodes=7)
                              @ 12  havlak.LoopTesterApp.findLoops(LoopStructureGraph):void (18 bytes)   not inlining too large previous low-level graph (low-level-nodes: 611, relevance=1.000000, probability=0.999950, bonus=1.000000, nodes=13)
                              @ 12  havlak.LoopTesterApp.findLoops(LoopStructureGraph):void (18 bytes)   not inlining too large previous low-level graph (low-level-nodes: 611, relevance=1.000000, probability=20031.500100, bonus=1.000000, nodes=13)
                              @ 12  havlak.LoopTesterApp.findLoops(LoopStructureGraph):void (18 bytes)   not inlining too large previous low-level graph (low-level-nodes: 611, relevance=1.000000, probability=16075.666667, bonus=1.000000, nodes=13)
                            @ 30  havlak.BasicBlock.addOutEdge(BasicBlock):void (9 bytes)   inline method (bytecode parsing)
                            @ 41  havlak.BasicBlock.addInEdge(BasicBlock):void (9 bytes)   inline method (bytecode parsing)
                            @ 46  havlak.ControlFlowGraph.addEdge(BasicBlockEdge):void (9 bytes)   inline method (bytecode parsing)
                              @ 14  havlak.BasicBlockEdge.<init>(ControlFlowGraph, int, int):void (50 bytes)   not inlining too large previous low-level graph (low-level-nodes: 1042, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=46)
                            @ 30  havlak.BasicBlock.addOutEdge(BasicBlock):void (9 bytes)   inline method (bytecode parsing)
                            @ 41  havlak.BasicBlock.addInEdge(BasicBlock):void (9 bytes)   inline method (bytecode parsing)
                            @ 46  havlak.ControlFlowGraph.addEdge(BasicBlockEdge):void (9 bytes)   inline method (bytecode parsing)
                              @ 30  havlak.BasicBlockEdge.<init>(ControlFlowGraph, int, int):void (50 bytes)   not inlining too large previous low-level graph (low-level-nodes: 1042, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=46)
                            @ 30  havlak.BasicBlock.addOutEdge(BasicBlock):void (9 bytes)   inline method (bytecode parsing)
                            @ 41  havlak.BasicBlock.addInEdge(BasicBlock):void (9 bytes)   inline method (bytecode parsing)
                            @ 46  havlak.ControlFlowGraph.addEdge(BasicBlockEdge):void (9 bytes)   inline method (bytecode parsing)
                              @ 48  havlak.BasicBlockEdge.<init>(ControlFlowGraph, int, int):void (50 bytes)   not inlining too large previous low-level graph (low-level-nodes: 1042, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=46)
                            @ 30  havlak.BasicBlock.addOutEdge(BasicBlock):void (9 bytes)   inline method (bytecode parsing)
                            @ 41  havlak.BasicBlock.addInEdge(BasicBlock):void (9 bytes)   inline method (bytecode parsing)
                            @ 46  havlak.ControlFlowGraph.addEdge(BasicBlockEdge):void (9 bytes)   inline method (bytecode parsing)
                              @ 66  havlak.BasicBlockEdge.<init>(ControlFlowGraph, int, int):void (50 bytes)   not inlining too large previous low-level graph (low-level-nodes: 1042, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=46)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 1  java.lang.String.length():int (11 bytes)   trivial (relevance=1.172956, probability=1.000000, bonus=1.000000, nodes=8)
                              @ 43  jdk.internal.org.objectweb.asm.ByteVector.enlarge(int):void (73 bytes)   relevance-based (relevance=0.172956, probability=0.147453, bonus=1.000000, nodes=31 <= 51.886792)
                                @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=22.652639, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=22.652639, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 85  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=22.652639, bonus=1.000000, nodes=16 <= 300.000000)
