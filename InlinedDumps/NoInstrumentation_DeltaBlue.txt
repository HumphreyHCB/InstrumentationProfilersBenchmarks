VM Arguments: 
sun.java.command=Harness DeltaBlue 10 60000
                                @ 12  deltablue.Planner.lambda$addConstraintsConsumingTo$2(AbstractConstraint, Vector, AbstractConstraint):void (18 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                              @ 20  deltablue.Planner$$Lambda/0x00007f20a8009160.apply(Object):void (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 26  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                                @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                              @ 1  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=21 <= 300.000000)
                              @ 6  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=2.000000, probability=2.000000, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 13  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=18 <= 300.000000)
                              @ 23  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 39  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 45  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 50  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 53  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 57  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 2  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 42  deltablue.Strength.weakest(Strength):Strength (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 64  deltablue.EqualityConstraint.execute():void (42 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=20 <= 300.000000)
                              @ 42  deltablue.BinaryConstraint.recalculate():void (68 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=55 <= 300.000000)
                              @ 48  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 19  deltablue.Planner$$Lambda/0x00007f20a8009160.<init>(AbstractConstraint, Vector):void (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                    @ 12  deltablue.Planner.lambda$addConstraintsConsumingTo$2(AbstractConstraint, Vector, AbstractConstraint):void (18 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                  @ 20  deltablue.Planner$$Lambda/0x00007f20a8009160.apply(Object):void (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                                @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=30 <= 300.000000)
                              @ 52  deltablue.Planner.addConstraintsConsumingTo(Variable, Vector):void (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=49 <= 300.000000)
                                  @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   trivial (relevance=0.267345, probability=0.105474, bonus=1.000000, nodes=8)
                                @ 12  deltablue.Planner.lambda$addConstraintsConsumingTo$2(AbstractConstraint, Vector, AbstractConstraint):void (18 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=19 <= 300.000000)
                              @ 20  deltablue.Planner$$Lambda/0x00007f20a8009160.apply(Object):void (16 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=25 <= 300.000000)
                              @ 20  deltablue.Planner$$Lambda/0x00007f20a8009160.apply(Object):void (16 bytes)   not inlining relevance-based (relevance=0.010101, probability=0.005051, bonus=1.000000, nodes=16 > 3.030303)
                              @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 4  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 65  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 76  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 91  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 126  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 133  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 189  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 20  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 23  deltablue.Strength.stronger(Strength):boolean (17 bytes)   not inlining relevance-based (relevance=0.000018, probability=0.000007, bonus=1.000000, nodes=13 > 0.005493)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 136  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.715696, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 192  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.715696, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 94  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=0.397222, probability=0.284290, bonus=1.000000, nodes=13 <= 119.166667)
                                @ 2  deltablue.BinaryConstraint.chooseMethod(int):Direction (220 bytes)   relevance-based (relevance=1.392206, probability=1.000000, bonus=1.000000, nodes=109 <= 300.000000)
                                @ 7  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=1.397241, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.999987, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 20  deltablue.BinaryConstraint.inputsDo(ForEachInterface):void (34 bytes)   relevance-based (relevance=1.397241, probability=1.000000, bonus=1.000000, nodes=22 <= 300.000000)
                                @ 24  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.397241, probability=1.000000, bonus=1.000000, nodes=22 <= 300.000000)
                                @ 40  deltablue.BinaryConstraint.markUnsatisfied():void (6 bytes)   trivial (relevance=0.393624, probability=0.281716, bonus=1.000000, nodes=7)
                            @ 26  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                                    @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                                  @ 1  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=21 <= 300.000000)
                                  @ 6  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.999988, probability=2.000012, bonus=1.000000, nodes=10 <= 300.000000)
                                    @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=1.000012, bonus=1.000000, nodes=10 <= 300.000000)
                                  @ 13  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=1.000000, probability=1.000012, bonus=1.000000, nodes=18 <= 300.000000)
                                  @ 23  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.000000, probability=1.000012, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 39  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 45  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 50  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 53  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 57  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 34  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 16  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   not inlining no type profile exists
                                  @ 41  deltablue.UnaryConstraint.execute():void (0 bytes)   not inlining no type profile exists
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 2  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                    @ 42  deltablue.Strength.weakest(Strength):Strength (14 bytes)   relevance-based (relevance=1.485669, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 35  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                    @ 64  deltablue.EqualityConstraint.execute():void (42 bytes)   relevance-based (relevance=1.485669, probability=1.000000, bonus=1.000000, nodes=38 <= 300.000000)
                                  @ 42  deltablue.BinaryConstraint.recalculate():void (68 bytes)   relevance-based (relevance=1.442586, probability=1.000012, bonus=1.000000, nodes=122 <= 300.000000)
                                  @ 48  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.442586, probability=1.000012, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                    @ 19  deltablue.Planner$$Lambda/0x00007f20a8009160.<init>(AbstractConstraint, Vector):void (15 bytes)   relevance-based (relevance=1.000000, probability=1.000012, bonus=1.000000, nodes=11 <= 300.000000)
                                          @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   trivial (relevance=0.393979, probability=0.340719, bonus=1.000000, nodes=8)
                                        @ 12  deltablue.Planner.lambda$addConstraintsConsumingTo$2(AbstractConstraint, Vector, AbstractConstraint):void (18 bytes)   relevance-based (relevance=1.000000, probability=1.205533, bonus=1.000000, nodes=19 <= 300.000000)
                                      @ 20  deltablue.Planner$$Lambda/0x00007f20a8009160.apply(Object):void (16 bytes)   relevance-based (relevance=1.000000, probability=1.205533, bonus=1.000000, nodes=25 <= 300.000000)
                                    @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=1.000012, bonus=1.000000, nodes=41 <= 300.000000)
                                  @ 52  deltablue.Planner.addConstraintsConsumingTo(Variable, Vector):void (20 bytes)   relevance-based (relevance=1.442586, probability=1.000012, bonus=1.000000, nodes=60 <= 300.000000)
                                @ 52  deltablue.Planner.addPropagate(AbstractConstraint, int):boolean (60 bytes)   relevance-based (relevance=1.397241, probability=1.000000, bonus=1.000000, nodes=284 <= 300.000000)
                              @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=497 > 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 4  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 65  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 76  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 91  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 126  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 133  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 189  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 20  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 23  deltablue.Strength.stronger(Strength):boolean (17 bytes)   not inlining relevance-based (relevance=0.000007, probability=0.000002, bonus=1.000000, nodes=13 > 0.002030)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 136  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=0.514625, probability=0.264555, bonus=1.000000, nodes=14 <= 154.387622)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 192  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=0.514625, probability=0.264555, bonus=1.000000, nodes=13 <= 154.387622)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 94  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=0.204421, probability=0.105087, bonus=1.000000, nodes=13 <= 61.326194)
                                @ 2  deltablue.BinaryConstraint.chooseMethod(int):Direction (220 bytes)   relevance-based (relevance=0.514625, probability=0.369647, bonus=1.000000, nodes=109 <= 154.387622)
                              @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining relevance-based (relevance=0.369647, probability=0.369647, bonus=1.000000, nodes=167 > 110.894234)
                                @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   trivial (relevance=0.477692, probability=0.323269, bonus=1.000000, nodes=8)
                              @ 12  deltablue.Planner.lambda$addConstraintsConsumingTo$2(AbstractConstraint, Vector, AbstractConstraint):void (18 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=19 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 4  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 65  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 76  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 91  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 126  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 133  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 189  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 20  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 23  deltablue.Strength.stronger(Strength):boolean (17 bytes)   not inlining relevance-based (relevance=0.000018, probability=0.000005, bonus=1.000000, nodes=13 > 0.005484)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 136  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.554300, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 192  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.554300, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 94  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=0.804058, probability=0.445690, bonus=1.000000, nodes=13 <= 241.217532)
                              @ 2  deltablue.BinaryConstraint.chooseMethod(int):Direction (220 bytes)   relevance-based (relevance=1.800534, probability=1.000000, bonus=1.000000, nodes=109 <= 300.000000)
                              @ 7  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=1.804077, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.999990, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 20  deltablue.BinaryConstraint.inputsDo(ForEachInterface):void (34 bytes)   relevance-based (relevance=1.804077, probability=1.000000, bonus=1.000000, nodes=22 <= 300.000000)
                              @ 24  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.804077, probability=1.000000, bonus=1.000000, nodes=22 <= 300.000000)
                              @ 40  deltablue.BinaryConstraint.markUnsatisfied():void (6 bytes)   trivial (relevance=0.802109, probability=0.444609, bonus=1.000000, nodes=7)
                            @ 26  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                                  @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                                @ 1  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=21 <= 300.000000)
                                @ 6  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=2.000000, probability=2.000000, bonus=1.000000, nodes=10 <= 300.000000)
                                  @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 13  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=18 <= 300.000000)
                                @ 23  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 39  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 45  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 50  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 53  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 57  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 34  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   not inlining no type profile exists
                                @ 41  deltablue.UnaryConstraint.execute():void (0 bytes)   not inlining no type profile exists
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 2  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.999990, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 42  deltablue.Strength.weakest(Strength):Strength (14 bytes)   relevance-based (relevance=1.922266, probability=0.999990, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 35  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 64  deltablue.EqualityConstraint.execute():void (42 bytes)   relevance-based (relevance=1.922266, probability=0.999990, bonus=1.000000, nodes=38 <= 300.000000)
                                @ 42  deltablue.BinaryConstraint.recalculate():void (68 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=122 <= 300.000000)
                                @ 48  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                  @ 19  deltablue.Planner$$Lambda/0x00007f20a8009160.<init>(AbstractConstraint, Vector):void (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                        @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   trivial (relevance=0.543031, probability=0.505002, bonus=1.000000, nodes=8)
                                      @ 12  deltablue.Planner.lambda$addConstraintsConsumingTo$2(AbstractConstraint, Vector, AbstractConstraint):void (18 bytes)   relevance-based (relevance=1.000000, probability=1.434970, bonus=1.000000, nodes=19 <= 300.000000)
                                    @ 20  deltablue.Planner$$Lambda/0x00007f20a8009160.apply(Object):void (16 bytes)   relevance-based (relevance=1.000000, probability=1.434970, bonus=1.000000, nodes=25 <= 300.000000)
                                  @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=41 <= 300.000000)
                                @ 52  deltablue.Planner.addConstraintsConsumingTo(Variable, Vector):void (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=60 <= 300.000000)
                              @ 52  deltablue.Planner.addPropagate(AbstractConstraint, int):boolean (60 bytes)   relevance-based (relevance=1.804077, probability=1.000000, bonus=1.000000, nodes=284 <= 300.000000)
                                  @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   trivial (relevance=0.649812, probability=0.623856, bonus=1.000000, nodes=8)
                                @ 12  deltablue.Planner.lambda$addConstraintsConsumingTo$2(AbstractConstraint, Vector, AbstractConstraint):void (18 bytes)   relevance-based (relevance=1.000000, probability=1.583911, bonus=1.000000, nodes=19 <= 300.000000)
                              @ 20  deltablue.Planner$$Lambda/0x00007f20a8009160.apply(Object):void (16 bytes)   relevance-based (relevance=1.000000, probability=1.583911, bonus=1.000000, nodes=25 <= 300.000000)
                            @ 26  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                                @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=16 <= 300.000000)
                              @ 1  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=21 <= 300.000000)
                              @ 6  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.999993, probability=2.000007, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=1.000007, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 13  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=1.000000, probability=1.000007, bonus=1.000000, nodes=18 <= 300.000000)
                              @ 23  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.000000, probability=1.000007, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 39  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 45  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 50  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 53  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 57  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 34  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                              @ 16  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   not inlining no type profile exists
                              @ 41  deltablue.UnaryConstraint.execute():void (0 bytes)   not inlining no type profile exists
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 2  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.999993, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 42  deltablue.Strength.weakest(Strength):Strength (14 bytes)   relevance-based (relevance=1.661748, probability=0.999993, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 35  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 64  deltablue.EqualityConstraint.execute():void (42 bytes)   relevance-based (relevance=1.264898, probability=0.761181, bonus=1.000000, nodes=38 <= 300.000000)
                              @ 42  deltablue.BinaryConstraint.recalculate():void (68 bytes)   relevance-based (relevance=1.658877, probability=1.000007, bonus=1.000000, nodes=125 <= 300.000000)
                              @ 48  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.658877, probability=1.000007, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 19  deltablue.Planner$$Lambda/0x00007f20a8009160.<init>(AbstractConstraint, Vector):void (15 bytes)   relevance-based (relevance=1.000000, probability=1.000007, bonus=1.000000, nodes=11 <= 300.000000)
                                      @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   trivial (relevance=0.690084, probability=0.668352, bonus=1.000000, nodes=8)
                                    @ 12  deltablue.Planner.lambda$addConstraintsConsumingTo$2(AbstractConstraint, Vector, AbstractConstraint):void (18 bytes)   relevance-based (relevance=1.000000, probability=1.636860, bonus=1.000000, nodes=19 <= 300.000000)
                                  @ 20  deltablue.Planner$$Lambda/0x00007f20a8009160.apply(Object):void (16 bytes)   relevance-based (relevance=1.000000, probability=1.636860, bonus=1.000000, nodes=25 <= 300.000000)
                                @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=1.000007, bonus=1.000000, nodes=41 <= 300.000000)
                              @ 52  deltablue.Planner.addConstraintsConsumingTo(Variable, Vector):void (20 bytes)   relevance-based (relevance=1.658877, probability=1.000007, bonus=1.000000, nodes=60 <= 300.000000)
                                @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=0.729299, probability=0.421731, bonus=1.000000, nodes=13 <= 218.789668)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 14  som.Vector.append(Object):void (51 bytes)   not inlining relevance-based (relevance=0.023605, probability=0.013650, bonus=1.000000, nodes=35 > 7.081577)
                              @ 12  deltablue.Planner.lambda$addConstraintsConsumingTo$2(AbstractConstraint, Vector, AbstractConstraint):void (18 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=42 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000069, probability=0.000069, bonus=1.000000, nodes=41 > 0.020721)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 4  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 15  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 30  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 65  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 76  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 91  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 126  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 133  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 189  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 136  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=0.924000, probability=0.316005, bonus=1.000000, nodes=14 <= 277.200000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 192  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=0.924000, probability=0.316005, bonus=1.000000, nodes=13 <= 277.200000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 94  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.341997, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 33  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.341997, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 39  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 45  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 50  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 53  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 57  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 2  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 42  deltablue.Strength.weakest(Strength):Strength (14 bytes)   relevance-based (relevance=1.521177, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 35  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 64  deltablue.EqualityConstraint.execute():void (42 bytes)   relevance-based (relevance=1.000000, probability=0.657386, bonus=1.000000, nodes=38 <= 300.000000)
                                @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   not inlining relevance-based (relevance=0.000003, probability=0.000006, bonus=1.000000, nodes=28 > 0.000981)
                                  @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=0.732689, probability=0.730348, bonus=1.000000, nodes=13 <= 219.806690)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 14  som.Vector.append(Object):void (51 bytes)   not inlining relevance-based (relevance=0.035653, probability=0.035539, bonus=1.000000, nodes=35 > 10.695926)
                                @ 12  deltablue.Planner.lambda$addConstraintsConsumingTo$2(AbstractConstraint, Vector, AbstractConstraint):void (18 bytes)   relevance-based (relevance=1.000000, probability=1.727153, bonus=1.000000, nodes=42 <= 300.000000)
                              @ 20  deltablue.Planner$$Lambda/0x00007f20a8009160.apply(Object):void (16 bytes)   relevance-based (relevance=1.000000, probability=1.727159, bonus=1.000000, nodes=61 <= 300.000000)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 35  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                              @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.Planner.lambda$chainTest$7(int):Variable (8 bytes)   inline method (bytecode parsing)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.Variable.<init>():void (44 bytes)   not inlining too large previous low-level graph (low-level-nodes: 356, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=27)
                            @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                                        @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                      @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                      @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                      @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=38 <= 300.000000)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=42 <= 300.000000)
                              @ 6  deltablue.BinaryConstraint.<init>(Variable, Variable, Strength$Sym, Planner):void (21 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=52 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 13  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=0.000075, bonus=1.000000, nodes=41 > 0.022454)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=0.000075, bonus=1.000000, nodes=41 > 0.022454)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000075, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 1  deltablue.BinaryConstraint.addToGraph():void (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=86 <= 300.000000)
                                @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 980, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 980, relevance=1.000000, probability=1.070492, bonus=1.000000, nodes=72)
                              @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000075, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 4  deltablue.Plan.lambda$execute$0(AbstractConstraint):void (5 bytes)   inline method (bytecode parsing)
                                @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   not inlining relevance-based (relevance=0.000002, probability=0.000001, bonus=1.000000, nodes=28 > 0.000469)
                                  @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=0.370915, probability=0.119047, bonus=1.000000, nodes=13 <= 111.274490)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 14  som.Vector.append(Object):void (51 bytes)   not inlining relevance-based (relevance=0.018049, probability=0.005793, bonus=1.000000, nodes=35 > 5.414684)
                                @ 12  deltablue.Planner.lambda$addConstraintsConsumingTo$2(AbstractConstraint, Vector, AbstractConstraint):void (18 bytes)   relevance-based (relevance=0.506238, probability=0.281526, bonus=1.000000, nodes=42 <= 151.871387)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 35  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 1  deltablue.EqualityConstraint.execute():void (42 bytes)   relevance-based (relevance=1.000000, probability=0.556114, bonus=1.000000, nodes=41 <= 300.000000)
                              @ 20  deltablue.Plan$$Lambda/0x00007f20a8009eb8.apply(Object):void (8 bytes)   relevance-based (relevance=1.000000, probability=0.837640, bonus=1.000000, nodes=116 <= 300.000000)
                            @ 4  deltablue.Plan.lambda$execute$0(AbstractConstraint):void (5 bytes)   inline method (bytecode parsing)
                                @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   not inlining relevance-based (relevance=0.000002, probability=0.000004, bonus=1.000000, nodes=28 > 0.000469)
                                  @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=0.370915, probability=0.495134, bonus=1.000000, nodes=13 <= 111.274490)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 14  som.Vector.append(Object):void (51 bytes)   not inlining relevance-based (relevance=0.018049, probability=0.024094, bonus=1.000000, nodes=35 > 5.414684)
                                @ 12  deltablue.Planner.lambda$addConstraintsConsumingTo$2(AbstractConstraint, Vector, AbstractConstraint):void (18 bytes)   relevance-based (relevance=0.506238, probability=1.170911, bonus=1.000000, nodes=42 <= 151.871387)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 35  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 1  deltablue.EqualityConstraint.execute():void (42 bytes)   relevance-based (relevance=1.000000, probability=2.312966, bonus=1.000000, nodes=41 <= 300.000000)
                              @ 20  deltablue.Plan$$Lambda/0x00007f20a8009eb8.apply(Object):void (8 bytes)   relevance-based (relevance=1.000000, probability=3.483881, bonus=1.000000, nodes=116 <= 300.000000)
                            @ 4  deltablue.Plan.lambda$execute$0(AbstractConstraint):void (5 bytes)   inline method (bytecode parsing)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 35  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 1  deltablue.EqualityConstraint.execute():void (42 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=41 <= 300.000000)
                            @ 4  deltablue.Plan.lambda$execute$0(AbstractConstraint):void (5 bytes)   inline method (bytecode parsing)
                                @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   not inlining relevance-based (relevance=0.000001, probability=0.000005, bonus=1.000000, nodes=28 > 0.000173)
                                  @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=0.136932, probability=0.735842, bonus=1.000000, nodes=13 <= 41.079645)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 14  som.Vector.append(Object):void (51 bytes)   not inlining relevance-based (relevance=0.006663, probability=0.035807, bonus=1.000000, nodes=35 > 1.998960)
                                @ 12  deltablue.Planner.lambda$addConstraintsConsumingTo$2(AbstractConstraint, Vector, AbstractConstraint):void (18 bytes)   relevance-based (relevance=0.186890, probability=1.740145, bonus=1.000000, nodes=42 <= 56.066963)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 35  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 1  deltablue.EqualityConstraint.execute():void (42 bytes)   relevance-based (relevance=1.000000, probability=9.311072, bonus=1.000000, nodes=41 <= 300.000000)
                              @ 20  deltablue.Plan$$Lambda/0x00007f20a8009eb8.apply(Object):void (8 bytes)   relevance-based (relevance=1.000000, probability=11.051222, bonus=1.000000, nodes=116 <= 300.000000)
                            @ 2  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8009ca0.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 8  deltablue.AbstractConstraint.lambda$inputsKnown$0(int, Variable):boolean (28 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                                @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f20a8009ca0.test(Object):boolean (12 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 7  deltablue.BinaryConstraint.inputsHasOne(TestInterface):boolean (32 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=18 <= 300.000000)
                            @ 1  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.lambda$inputsKnown$0(int, Variable):boolean (28 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                              @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f20a8009ca0.test(Object):boolean (12 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                              @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 17  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=0.178084, probability=0.150232, bonus=1.000000, nodes=9)
                              @ 27  java.lang.StringLatin1.hashCode(byte[]):int (52 bytes)   relevance-based (relevance=0.178084, probability=0.150232, bonus=1.000000, nodes=22 <= 53.425197)
                              @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=0.732689, probability=0.422862, bonus=1.000000, nodes=13 <= 219.806690)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                              @ 14  som.Vector.append(Object):void (51 bytes)   not inlining relevance-based (relevance=0.035653, probability=0.020577, bonus=1.000000, nodes=35 > 10.695926)
                              @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 19  deltablue.Planner$$Lambda/0x00007f20a8009160.<init>(AbstractConstraint, Vector):void (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining too large previous low-level graph (low-level-nodes: 337, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=24)
                            @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 4  deltablue.Plan.lambda$execute$0(AbstractConstraint):void (5 bytes)   inline method (bytecode parsing)
                                @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   not inlining relevance-based (relevance=0.000001, probability=0.000005, bonus=1.000000, nodes=28 > 0.000154)
                                @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   not inlining relevance-based (relevance=0.000001, probability=0.000009, bonus=1.000000, nodes=26 > 0.000308)
                                @ 8  deltablue.Planner.lambda$removePropagateFrom$4(Vector, AbstractConstraint):void (13 bytes)   not inlining relevance-based (relevance=0.012780, probability=0.117912, bonus=1.000000, nodes=11 > 3.834044)
                                @ 12  deltablue.Planner.lambda$constraintsConsuming$3(AbstractConstraint, ForEachInterface, AbstractConstraint):void (20 bytes)   not inlining relevance-based (relevance=0.012781, probability=0.117922, bonus=1.000000, nodes=23 > 3.834352)
                                  @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=0.121948, probability=0.649349, bonus=1.000000, nodes=13 <= 36.584491)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 14  som.Vector.append(Object):void (51 bytes)   not inlining relevance-based (relevance=0.005934, probability=0.031598, bonus=1.000000, nodes=35 > 1.780223)
                                @ 12  deltablue.Planner.lambda$addConstraintsConsumingTo$2(AbstractConstraint, Vector, AbstractConstraint):void (18 bytes)   relevance-based (relevance=0.166439, probability=1.535604, bonus=1.000000, nodes=42 <= 49.931817)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 35  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 1  deltablue.EqualityConstraint.execute():void (42 bytes)   relevance-based (relevance=1.000000, probability=9.226206, bonus=1.000000, nodes=41 <= 300.000000)
                              @ 20  deltablue.Plan$$Lambda/0x00007f20a8009eb8.apply(Object):void (8 bytes)   relevance-based (relevance=1.000000, probability=10.997658, bonus=1.000000, nodes=159 <= 300.000000)
                            @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                                @ 1  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                              @ 8  deltablue.Planner.lambda$removePropagateFrom$4(Vector, AbstractConstraint):void (13 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=8)
                                @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   trivial (relevance=0.999965, probability=0.499991, bonus=1.000000, nodes=8)
                            @ 39  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 45  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 50  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 53  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 57  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 2  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.499991, bonus=1.000000, nodes=11 <= 300.000000)
                                      @ 42  deltablue.Strength.weakest(Strength):Strength (14 bytes)   relevance-based (relevance=1.521125, probability=0.499991, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 35  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                      @ 64  deltablue.EqualityConstraint.execute():void (42 bytes)   relevance-based (relevance=0.999965, probability=0.328687, bonus=1.000000, nodes=38 <= 299.989630)
                                    @ 1  deltablue.BinaryConstraint.recalculate():void (68 bytes)   relevance-based (relevance=0.999965, probability=0.499991, bonus=1.000000, nodes=86 <= 299.989630)
                                    @ 6  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.521125, probability=0.499991, bonus=1.000000, nodes=17 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                      @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=0.000037, bonus=1.000000, nodes=41 > 0.022454)
                                    @ 9  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.521125, probability=0.499991, bonus=1.000000, nodes=35 <= 300.000000)
                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$5(Vector, AbstractConstraint):void (13 bytes)   relevance-based (relevance=0.999965, probability=0.499991, bonus=1.000000, nodes=135 <= 299.989630)
                                @ 14  deltablue.Planner$$Lambda/0x00007f20a800a510.apply(Object):void (12 bytes)   relevance-based (relevance=0.999965, probability=0.499991, bonus=1.000000, nodes=137 <= 299.989630)
                              @ 12  deltablue.Planner.lambda$constraintsConsuming$3(AbstractConstraint, ForEachInterface, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=158 <= 300.000000)
                            @ 26  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=0.000075, bonus=1.000000, nodes=41 > 0.022454)
                                @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 1  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                              @ 6  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=2.000000, probability=2.000000, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 13  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=18 <= 300.000000)
                              @ 23  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 39  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 45  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 50  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 53  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 57  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 34  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                              @ 16  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   not inlining no type profile exists
                              @ 41  deltablue.UnaryConstraint.execute():void (0 bytes)   not inlining no type profile exists
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 2  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 42  deltablue.Strength.weakest(Strength):Strength (14 bytes)   relevance-based (relevance=1.521177, probability=0.999983, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 35  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 64  deltablue.EqualityConstraint.execute():void (42 bytes)   relevance-based (relevance=1.000000, probability=0.657375, bonus=1.000000, nodes=38 <= 300.000000)
                              @ 42  deltablue.BinaryConstraint.recalculate():void (68 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=125 <= 300.000000)
                              @ 48  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 19  deltablue.Planner$$Lambda/0x00007f20a8009160.<init>(AbstractConstraint, Vector):void (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining too large previous low-level graph (low-level-nodes: 430, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=24)
                              @ 52  deltablue.Planner.addConstraintsConsumingTo(Variable, Vector):void (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=23 <= 300.000000)
                            @ 4  deltablue.Plan.lambda$execute$0(AbstractConstraint):void (5 bytes)   inline method (bytecode parsing)
                            @ 8  deltablue.Planner.lambda$incrementalRemove$0(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                              @ 20  deltablue.Plan$$Lambda/0x00007f20a8009eb8.apply(Object):void (8 bytes)   not inlining too large previous low-level graph (low-level-nodes: 626, relevance=1.000000, probability=8.632291, bonus=1.000000, nodes=98)
                                @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=0.801770, probability=0.444990, bonus=1.000000, nodes=14 <= 240.531099)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 14  som.Vector.append(Object):void (51 bytes)   not inlining relevance-based (relevance=0.026439, probability=0.014674, bonus=1.000000, nodes=35 > 7.931599)
                              @ 12  deltablue.Planner.lambda$addConstraintsConsumingTo$2(AbstractConstraint, Vector, AbstractConstraint):void (18 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=42 <= 300.000000)
                            @ 26  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=0.000075, bonus=1.000000, nodes=41 > 0.022454)
                                @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 1  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                              @ 6  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.999995, probability=2.000005, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=1.000005, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 13  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=1.000000, probability=1.000005, bonus=1.000000, nodes=18 <= 300.000000)
                              @ 23  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.000000, probability=1.000005, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 39  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 45  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 50  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 53  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 57  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 34  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 39  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 45  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 50  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 60  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 70  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 81  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 85  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                                @ 42  deltablue.Strength.weakest(Strength):Strength (14 bytes)   not inlining relevance-based (relevance=0.010446, probability=0.003153, bonus=1.000000, nodes=11 > 3.133800)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 25  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 33  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 37  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 51  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 58  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 66  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 70  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 92  deltablue.ScaleConstraint.execute():void (74 bytes)   not inlining relevance-based (relevance=0.005223, probability=0.001576, bonus=1.000000, nodes=62 > 1.566900)
                              @ 16  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   not inlining no type profile exists
                              @ 41  deltablue.UnaryConstraint.execute():void (0 bytes)   not inlining no type profile exists
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 2  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.993690, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 42  deltablue.Strength.weakest(Strength):Strength (14 bytes)   relevance-based (relevance=1.521177, probability=0.993690, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 35  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 64  deltablue.EqualityConstraint.execute():void (42 bytes)   relevance-based (relevance=1.000000, probability=0.653237, bonus=1.000000, nodes=38 <= 300.000000)
                              @ 42  deltablue.BinaryConstraint.recalculate():void (68 bytes)   relevance-based (relevance=1.646160, probability=1.000005, bonus=1.000000, nodes=203 <= 300.000000)
                              @ 48  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.646160, probability=1.000005, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 19  deltablue.Planner$$Lambda/0x00007f20a8009160.<init>(AbstractConstraint, Vector):void (15 bytes)   relevance-based (relevance=1.000000, probability=1.000005, bonus=1.000000, nodes=11 <= 300.000000)
                                      @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=0.798160, probability=3.702650, bonus=1.000000, nodes=14 <= 239.448137)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                      @ 14  som.Vector.append(Object):void (51 bytes)   not inlining relevance-based (relevance=0.026320, probability=0.122096, bonus=1.000000, nodes=35 > 7.895888)
                                    @ 12  deltablue.Planner.lambda$addConstraintsConsumingTo$2(AbstractConstraint, Vector, AbstractConstraint):void (18 bytes)   relevance-based (relevance=1.000000, probability=8.341630, bonus=1.000000, nodes=42 <= 300.000000)
                                  @ 20  deltablue.Planner$$Lambda/0x00007f20a8009160.apply(Object):void (16 bytes)   relevance-based (relevance=1.000000, probability=8.341630, bonus=1.000000, nodes=49 <= 300.000000)
                                @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=1.000005, bonus=1.000000, nodes=62 <= 300.000000)
                              @ 52  deltablue.Planner.addConstraintsConsumingTo(Variable, Vector):void (20 bytes)   relevance-based (relevance=1.646160, probability=1.000005, bonus=1.000000, nodes=81 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 4  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 15  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 30  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 65  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 76  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 91  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 126  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 133  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 189  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 20  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                              @ 2  deltablue.BinaryConstraint.chooseMethod(int):Direction (220 bytes)   not inlining too large previous low-level graph (low-level-nodes: 334, relevance=1.466120, probability=1.000000, bonus=1.000000, nodes=107)
                              @ 7  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=1.466120, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.apply(Object):void (12 bytes)   relevance-based (relevance=0.064600, probability=0.054498, bonus=1.000000, nodes=13 <= 19.379930)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 25  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.apply(Object):void (12 bytes)   relevance-based (relevance=0.064600, probability=0.054498, bonus=1.000000, nodes=13 <= 19.379930)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 35  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.apply(Object):void (12 bytes)   relevance-based (relevance=0.064600, probability=0.054498, bonus=1.000000, nodes=13 <= 19.379930)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.890989, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 20  deltablue.BinaryConstraint.inputsDo(ForEachInterface):void (34 bytes)   relevance-based (relevance=1.056142, probability=0.999996, bonus=1.000000, nodes=61 <= 300.000000)
                              @ 24  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.056142, probability=0.999996, bonus=1.000000, nodes=22 <= 300.000000)
                              @ 40  deltablue.BinaryConstraint.markUnsatisfied():void (6 bytes)   relevance-based (relevance=0.720368, probability=0.682073, bonus=1.000000, nodes=14 <= 216.110497)
                            @ 26  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 52  deltablue.Planner.addPropagate(AbstractConstraint, int):boolean (60 bytes)   not inlining too large previous low-level graph (low-level-nodes: 850, relevance=1.056142, probability=0.999996, bonus=1.000000, nodes=53)
                            @ 4  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 15  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 30  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 65  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 76  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 91  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 126  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 133  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 189  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 136  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.401259, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 192  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.401259, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 94  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=0.745453, probability=0.299120, bonus=1.000000, nodes=13 <= 223.635821)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 33  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=0.746702, probability=0.299621, bonus=1.000000, nodes=13 <= 224.010533)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.Variable.<init>():void (44 bytes)   not inlining too large previous low-level graph (low-level-nodes: 356, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=27)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 19  deltablue.Planner$$Lambda/0x00007f20a800a730.<init>(AbstractConstraint, ForEachInterface):void (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 20  deltablue.Planner$$Lambda/0x00007f20a800a730.apply(Object):void (16 bytes)   not inlining too large previous low-level graph (low-level-nodes: 489, relevance=1.000000, probability=8.341591, bonus=1.000000, nodes=16)
                              @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=8.341591, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=24)
                            @ 39  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 45  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 50  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 53  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 57  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 2  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 42  deltablue.Strength.weakest(Strength):Strength (14 bytes)   relevance-based (relevance=1.521177, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 35  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 64  deltablue.EqualityConstraint.execute():void (42 bytes)   relevance-based (relevance=1.000000, probability=0.657386, bonus=1.000000, nodes=38 <= 300.000000)
                                @ 1  deltablue.BinaryConstraint.recalculate():void (68 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=86 <= 300.000000)
                                @ 6  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.521177, probability=1.000000, bonus=1.000000, nodes=17 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=0.000075, bonus=1.000000, nodes=41 > 0.022454)
                                @ 9  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.521177, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 8  deltablue.Planner.lambda$removePropagateFrom$5(Vector, AbstractConstraint):void (13 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=135 <= 300.000000)
                            @ 5  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 20  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 23  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=0.833523, probability=0.454602, bonus=1.000000, nodes=14 <= 250.057027)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                              @ 14  som.Vector.append(Object):void (51 bytes)   not inlining relevance-based (relevance=0.064569, probability=0.035216, bonus=1.000000, nodes=35 > 19.370606)
                                @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=0.994053, probability=0.498509, bonus=1.000000, nodes=14 <= 298.215863)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000017, probability=0.000008, bonus=1.000000, nodes=41 > 0.005038)
                                @ 14  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=0.224385, probability=0.112527, bonus=1.000000, nodes=35 <= 67.315480)
                              @ 12  deltablue.Planner.lambda$addConstraintsConsumingTo$2(AbstractConstraint, Vector, AbstractConstraint):void (18 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72 <= 300.000000)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 25  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 33  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 37  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 51  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 58  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 66  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 70  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                                        @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                      @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                      @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                      @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=38 <= 300.000000)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=42 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=0.000075, bonus=1.000000, nodes=41 > 0.022454)
                                  @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                                  @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 20  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 23  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.999965, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 2  deltablue.UnaryConstraint.chooseMethod(int):Direction (39 bytes)   relevance-based (relevance=1.548938, probability=1.000000, bonus=1.000000, nodes=38 <= 300.000000)
                                    @ 7  deltablue.UnaryConstraint.isSatisfied():boolean (5 bytes)   trivial (relevance=1.000035, probability=1.000000, bonus=1.000000, nodes=5)
                                    @ 20  deltablue.UnaryConstraint.inputsDo(ForEachInterface):void (1 bytes)   trivial (relevance=1.000027, probability=0.999993, bonus=1.000000, nodes=3)
                                    @ 24  deltablue.UnaryConstraint.getOutput():Variable (5 bytes)   trivial (relevance=1.000027, probability=0.999993, bonus=1.000000, nodes=5)
                                    @ 40  deltablue.BinaryConstraint.markUnsatisfied():void (6 bytes)   relevance-based (relevance=0.645626, probability=0.645604, bonus=1.000000, nodes=14 <= 193.687818)
                            @ 26  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 52  deltablue.Planner.addPropagate(AbstractConstraint, int):boolean (60 bytes)   not inlining too large previous low-level graph (low-level-nodes: 850, relevance=1.000027, probability=0.999993, bonus=1.000000, nodes=53)
                                  @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=112 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 4  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 15  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 30  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 65  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 76  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 91  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 126  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 133  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 189  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 20  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 2  deltablue.BinaryConstraint.chooseMethod(int):Direction (220 bytes)   not inlining too large previous low-level graph (low-level-nodes: 371, relevance=1.548938, probability=1.070492, bonus=1.000000, nodes=114)
                                    @ 7  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=1.548938, probability=1.070492, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                      @ 48  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.apply(Object):void (12 bytes)   not inlining relevance-based (relevance=0.000005, probability=0.000004, bonus=1.000000, nodes=13 > 0.001554)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                      @ 58  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.apply(Object):void (12 bytes)   not inlining relevance-based (relevance=0.000005, probability=0.000004, bonus=1.000000, nodes=13 > 0.001554)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                      @ 68  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.apply(Object):void (12 bytes)   not inlining relevance-based (relevance=0.000005, probability=0.000004, bonus=1.000000, nodes=13 > 0.001554)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                      @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.apply(Object):void (12 bytes)   relevance-based (relevance=0.101109, probability=0.084064, bonus=1.000000, nodes=13 <= 30.332775)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                      @ 25  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.apply(Object):void (12 bytes)   relevance-based (relevance=0.101109, probability=0.084064, bonus=1.000000, nodes=13 <= 30.332775)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                      @ 35  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.apply(Object):void (12 bytes)   relevance-based (relevance=0.101109, probability=0.084064, bonus=1.000000, nodes=13 <= 30.332775)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                      @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.902336, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 20  deltablue.BinaryConstraint.inputsDo(ForEachInterface):void (34 bytes)   relevance-based (relevance=1.085239, probability=1.070484, bonus=1.000000, nodes=79 <= 300.000000)
                                    @ 24  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.085239, probability=1.070484, bonus=1.000000, nodes=22 <= 300.000000)
                                    @ 40  deltablue.BinaryConstraint.markUnsatisfied():void (6 bytes)   relevance-based (relevance=0.700639, probability=0.691114, bonus=1.000000, nodes=14 <= 210.191802)
                            @ 26  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 52  deltablue.Planner.addPropagate(AbstractConstraint, int):boolean (60 bytes)   not inlining too large previous low-level graph (low-level-nodes: 850, relevance=1.085239, probability=1.070484, bonus=1.000000, nodes=53)
                                  @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   relevance-based (relevance=1.000000, probability=1.070492, bonus=1.000000, nodes=200 <= 300.000000)
                                @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   not inlining relevance-based (relevance=1.000075, probability=1.000000, bonus=1.000000, nodes=304 > 300.000000)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=96 <= 300.000000)
                            @ 2  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8009ca0.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 8  deltablue.AbstractConstraint.lambda$inputsKnown$0(int, Variable):boolean (28 bytes)   not inlining relevance-based (relevance=0.000011, probability=0.000011, bonus=1.000000, nodes=12 > 0.003433)
                                @ 26  deltablue.AbstractConstraint$$Lambda/0x00007f20a8009ca0.test(Object):boolean (12 bytes)   trivial (relevance=0.000011, probability=0.000011, bonus=1.000000, nodes=9)
                            @ 1  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 8  deltablue.AbstractConstraint.lambda$inputsKnown$0(int, Variable):boolean (28 bytes)   relevance-based (relevance=1.000000, probability=0.999954, bonus=1.000000, nodes=12 <= 300.000000)
                                @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f20a8009ca0.test(Object):boolean (12 bytes)   relevance-based (relevance=1.000000, probability=0.999954, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 7  deltablue.BinaryConstraint.inputsHasOne(TestInterface):boolean (32 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=31 <= 300.000000)
                            @ 1  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.lambda$inputsKnown$0(int, Variable):boolean (28 bytes)   not inlining relevance-based (relevance=0.000011, probability=0.000011, bonus=1.000000, nodes=12 > 0.003209)
                              @ 26  deltablue.AbstractConstraint$$Lambda/0x00007f20a8009ca0.test(Object):boolean (12 bytes)   trivial (relevance=0.000011, probability=0.000011, bonus=1.000000, nodes=9)
                            @ 1  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.lambda$inputsKnown$0(int, Variable):boolean (28 bytes)   relevance-based (relevance=1.000000, probability=0.999989, bonus=1.000000, nodes=12 <= 300.000000)
                              @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f20a8009ca0.test(Object):boolean (12 bytes)   relevance-based (relevance=1.000000, probability=0.999989, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 39  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 45  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 50  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 60  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 70  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 81  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 85  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 2  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 42  deltablue.Strength.weakest(Strength):Strength (14 bytes)   relevance-based (relevance=1.000029, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 25  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 33  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 37  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 51  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 58  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 66  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 70  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 92  deltablue.ScaleConstraint.execute():void (74 bytes)   not inlining relevance-based (relevance=0.144153, probability=0.144149, bonus=1.000000, nodes=62 > 43.245942)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 13  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 21  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 29  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=0.000075, bonus=1.000000, nodes=41 > 0.022454)
                              @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=0.000075, bonus=1.000000, nodes=41 > 0.022454)
                              @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000075, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=0.000075, bonus=1.000000, nodes=41 > 0.022454)
                              @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000075, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=0.000075, bonus=1.000000, nodes=41 > 0.022454)
                              @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000075, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 4  deltablue.Plan.lambda$execute$0(AbstractConstraint):void (5 bytes)   inline method (bytecode parsing)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 35  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 25  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 33  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 37  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 51  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 58  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 66  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 70  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 1  deltablue.EqualityConstraint.execute():void (42 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=103 <= 300.000000)
                            @ 24  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                                        @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                      @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                      @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                      @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=38 <= 300.000000)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=42 <= 300.000000)
                              @ 8  deltablue.BinaryConstraint.<init>(Variable, Variable, Strength$Sym, Planner):void (21 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=52 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 13  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 21  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 29  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                              @ 1  deltablue.ScaleConstraint.addToGraph():void (38 bytes)   not inlining too large previous low-level graph (low-level-nodes: 1163, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=43)
                                @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 4  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 15  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 30  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 65  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 76  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 91  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 126  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 133  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 189  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 2  deltablue.BinaryConstraint.chooseMethod(int):Direction (220 bytes)   not inlining too large previous low-level graph (low-level-nodes: 334, relevance=1.548938, probability=1.000000, bonus=1.000000, nodes=81)
                                  @ 7  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   trivial (relevance=1.548938, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                    @ 48  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.apply(Object):void (12 bytes)   not inlining relevance-based (relevance=0.000051, probability=0.000051, bonus=1.000000, nodes=13 > 0.015370)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                    @ 58  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.apply(Object):void (12 bytes)   not inlining relevance-based (relevance=0.000051, probability=0.000051, bonus=1.000000, nodes=13 > 0.015370)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                    @ 68  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.apply(Object):void (12 bytes)   not inlining relevance-based (relevance=0.000051, probability=0.000051, bonus=1.000000, nodes=13 > 0.015370)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                    @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.999942, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                    @ 25  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.999942, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                    @ 35  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.999942, bonus=1.000000, nodes=13 <= 300.000000)
                                  @ 20  deltablue.ScaleConstraint.inputsDo(ForEachInterface):void (74 bytes)   relevance-based (relevance=1.548927, probability=0.999993, bonus=1.000000, nodes=57 <= 300.000000)
                                  @ 24  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.000051, probability=0.999993, bonus=1.000000, nodes=17 <= 300.000000)
                                  @ 40  deltablue.BinaryConstraint.markUnsatisfied():void (6 bytes)   relevance-based (relevance=0.645641, probability=0.645604, bonus=1.000000, nodes=14 <= 193.692427)
                            @ 26  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 52  deltablue.Planner.addPropagate(AbstractConstraint, int):boolean (60 bytes)   not inlining too large previous low-level graph (low-level-nodes: 850, relevance=1.000051, probability=0.999993, bonus=1.000000, nodes=53)
                                @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=148 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 4  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 15  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 30  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 65  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 76  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 91  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 126  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 133  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 189  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 20  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 2  deltablue.BinaryConstraint.chooseMethod(int):Direction (220 bytes)   not inlining too large previous low-level graph (low-level-nodes: 371, relevance=1.548938, probability=1.070492, bonus=1.000000, nodes=114)
                                  @ 7  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=1.548938, probability=1.070492, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                    @ 48  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.apply(Object):void (12 bytes)   not inlining relevance-based (relevance=0.000005, probability=0.000004, bonus=1.000000, nodes=13 > 0.001554)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                    @ 58  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.apply(Object):void (12 bytes)   not inlining relevance-based (relevance=0.000005, probability=0.000004, bonus=1.000000, nodes=13 > 0.001554)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                    @ 68  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.apply(Object):void (12 bytes)   not inlining relevance-based (relevance=0.000005, probability=0.000004, bonus=1.000000, nodes=13 > 0.001554)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                    @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.apply(Object):void (12 bytes)   relevance-based (relevance=0.101109, probability=0.084064, bonus=1.000000, nodes=13 <= 30.332775)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                    @ 25  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.apply(Object):void (12 bytes)   relevance-based (relevance=0.101109, probability=0.084064, bonus=1.000000, nodes=13 <= 30.332775)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                    @ 35  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.apply(Object):void (12 bytes)   relevance-based (relevance=0.101109, probability=0.084064, bonus=1.000000, nodes=13 <= 30.332775)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                    @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.902336, bonus=1.000000, nodes=13 <= 300.000000)
                                  @ 20  deltablue.BinaryConstraint.inputsDo(ForEachInterface):void (34 bytes)   relevance-based (relevance=1.085239, probability=1.070484, bonus=1.000000, nodes=79 <= 300.000000)
                                  @ 24  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.085239, probability=1.070484, bonus=1.000000, nodes=22 <= 300.000000)
                                  @ 40  deltablue.BinaryConstraint.markUnsatisfied():void (6 bytes)   relevance-based (relevance=0.700639, probability=0.691114, bonus=1.000000, nodes=14 <= 210.191802)
                            @ 26  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 52  deltablue.Planner.addPropagate(AbstractConstraint, int):boolean (60 bytes)   not inlining too large previous low-level graph (low-level-nodes: 850, relevance=1.085239, probability=1.070484, bonus=1.000000, nodes=53)
                                @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   relevance-based (relevance=1.000000, probability=1.070492, bonus=1.000000, nodes=200 <= 300.000000)
                              @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   not inlining relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=340 > 300.000000)
                                @ 1  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                              @ 8  deltablue.Planner.lambda$removePropagateFrom$4(Vector, AbstractConstraint):void (13 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=17 <= 300.000000)
                                @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=0.999965, probability=0.499991, bonus=1.000000, nodes=14 <= 299.989631)
                                @ 14  deltablue.Planner$$Lambda/0x00007f20a800a510.apply(Object):void (12 bytes)   not inlining too large previous low-level graph (low-level-nodes: 460, relevance=0.999931, probability=0.499974, bonus=1.000000, nodes=9)
                              @ 12  deltablue.Planner.lambda$constraintsConsuming$3(AbstractConstraint, ForEachInterface, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=42 <= 300.000000)
                            @ 39  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 45  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 50  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 60  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 70  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 81  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 85  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 39  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 45  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 50  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 53  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 57  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                                @ 1  deltablue.ScaleConstraint.recalculate():void (96 bytes)   not inlining too large previous low-level graph (low-level-nodes: 336, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=127)
                                @ 6  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=17 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=0.000075, bonus=1.000000, nodes=41 > 0.022454)
                                @ 9  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.533584, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 8  deltablue.Planner.lambda$removePropagateFrom$5(Vector, AbstractConstraint):void (13 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=65 <= 300.000000)
                              @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=26 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=0.000075, bonus=1.000000, nodes=41 > 0.022454)
                              @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 2  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=0.000075, bonus=1.000000, nodes=41 > 0.022454)
                              @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=0.999965, probability=0.499991, bonus=1.000000, nodes=14 <= 299.989631)
                              @ 14  deltablue.Planner$$Lambda/0x00007f20a800a510.apply(Object):void (12 bytes)   not inlining too large previous low-level graph (low-level-nodes: 353, relevance=0.999931, probability=0.499974, bonus=1.000000, nodes=12)
                              @ 1  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=9)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 13  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 13  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 21  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 29  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                              @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   not inlining too large previous low-level graph (low-level-nodes: 1163, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=84)
                                @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 4  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 15  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 30  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 65  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 76  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 91  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 126  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 133  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 189  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 20  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 2  deltablue.BinaryConstraint.chooseMethod(int):Direction (220 bytes)   not inlining too large previous low-level graph (low-level-nodes: 371, relevance=1.548943, probability=1.000000, bonus=1.000000, nodes=114)
                                  @ 7  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=1.548943, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                    @ 48  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.apply(Object):void (12 bytes)   not inlining relevance-based (relevance=0.000005, probability=0.000004, bonus=1.000000, nodes=13 > 0.001554)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                    @ 58  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.apply(Object):void (12 bytes)   not inlining relevance-based (relevance=0.000005, probability=0.000004, bonus=1.000000, nodes=13 > 0.001554)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                    @ 68  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.apply(Object):void (12 bytes)   not inlining relevance-based (relevance=0.000005, probability=0.000004, bonus=1.000000, nodes=13 > 0.001554)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                    @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.apply(Object):void (12 bytes)   relevance-based (relevance=0.101110, probability=0.078528, bonus=1.000000, nodes=13 <= 30.332884)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                    @ 25  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.apply(Object):void (12 bytes)   relevance-based (relevance=0.101110, probability=0.078528, bonus=1.000000, nodes=13 <= 30.332884)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                    @ 35  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.apply(Object):void (12 bytes)   relevance-based (relevance=0.101110, probability=0.078528, bonus=1.000000, nodes=13 <= 30.332884)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                    @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.842914, bonus=1.000000, nodes=13 <= 300.000000)
                                  @ 20  deltablue.BinaryConstraint.inputsDo(ForEachInterface):void (34 bytes)   relevance-based (relevance=1.085243, probability=0.999993, bonus=1.000000, nodes=79 <= 300.000000)
                                  @ 24  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.085243, probability=0.999993, bonus=1.000000, nodes=22 <= 300.000000)
                                  @ 40  deltablue.BinaryConstraint.markUnsatisfied():void (6 bytes)   relevance-based (relevance=0.700639, probability=0.645601, bonus=1.000000, nodes=14 <= 210.191802)
                            @ 26  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 52  deltablue.Planner.addPropagate(AbstractConstraint, int):boolean (60 bytes)   not inlining too large previous low-level graph (low-level-nodes: 850, relevance=1.085243, probability=0.999993, bonus=1.000000, nodes=53)
                                @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=200 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 4  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 15  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 30  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 65  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 76  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 91  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 126  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 133  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 189  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 20  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 2  deltablue.BinaryConstraint.chooseMethod(int):Direction (220 bytes)   not inlining too large previous low-level graph (low-level-nodes: 371, relevance=1.548943, probability=1.070492, bonus=1.000000, nodes=114)
                                  @ 7  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=1.548943, probability=1.070492, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                    @ 48  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.apply(Object):void (12 bytes)   not inlining relevance-based (relevance=0.000005, probability=0.000004, bonus=1.000000, nodes=13 > 0.001554)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                    @ 58  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.apply(Object):void (12 bytes)   not inlining relevance-based (relevance=0.000005, probability=0.000004, bonus=1.000000, nodes=13 > 0.001554)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                    @ 68  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.apply(Object):void (12 bytes)   not inlining relevance-based (relevance=0.000005, probability=0.000004, bonus=1.000000, nodes=13 > 0.001554)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                    @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.apply(Object):void (12 bytes)   relevance-based (relevance=0.101110, probability=0.084064, bonus=1.000000, nodes=13 <= 30.332884)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                    @ 25  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.apply(Object):void (12 bytes)   relevance-based (relevance=0.101110, probability=0.084064, bonus=1.000000, nodes=13 <= 30.332884)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                    @ 35  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.apply(Object):void (12 bytes)   relevance-based (relevance=0.101110, probability=0.084064, bonus=1.000000, nodes=13 <= 30.332884)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                    @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.902332, bonus=1.000000, nodes=13 <= 300.000000)
                                  @ 20  deltablue.BinaryConstraint.inputsDo(ForEachInterface):void (34 bytes)   relevance-based (relevance=1.085243, probability=1.070484, bonus=1.000000, nodes=79 <= 300.000000)
                                  @ 24  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.085243, probability=1.070484, bonus=1.000000, nodes=22 <= 300.000000)
                                  @ 40  deltablue.BinaryConstraint.markUnsatisfied():void (6 bytes)   relevance-based (relevance=0.700639, probability=0.691111, bonus=1.000000, nodes=14 <= 210.191802)
                            @ 26  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 52  deltablue.Planner.addPropagate(AbstractConstraint, int):boolean (60 bytes)   not inlining too large previous low-level graph (low-level-nodes: 850, relevance=1.085243, probability=1.070484, bonus=1.000000, nodes=53)
                                @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   relevance-based (relevance=1.000000, probability=1.070492, bonus=1.000000, nodes=200 <= 300.000000)
                              @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   not inlining relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=388 > 300.000000)
                            @ 39  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 45  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 50  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 60  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 70  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 81  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 85  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 2  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 42  deltablue.Strength.weakest(Strength):Strength (14 bytes)   relevance-based (relevance=1.000015, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 25  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 33  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 37  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 51  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 58  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 66  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 70  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 92  deltablue.ScaleConstraint.execute():void (74 bytes)   not inlining relevance-based (relevance=0.077675, probability=0.077674, bonus=1.000000, nodes=62 > 23.302538)
                            @ 1  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.lambda$inputsKnown$0(int, Variable):boolean (28 bytes)   not inlining relevance-based (relevance=0.000008, probability=0.000008, bonus=1.000000, nodes=21 > 0.002269)
                              @ 26  deltablue.AbstractConstraint$$Lambda/0x00007f20a8009ca0.test(Object):boolean (12 bytes)   trivial (relevance=0.000008, probability=0.000008, bonus=1.000000, nodes=9)
                            @ 1  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.lambda$inputsKnown$0(int, Variable):boolean (28 bytes)   relevance-based (relevance=1.000000, probability=0.999992, bonus=1.000000, nodes=21 <= 300.000000)
                              @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f20a8009ca0.test(Object):boolean (12 bytes)   relevance-based (relevance=1.000000, probability=0.999992, bonus=1.000000, nodes=23 <= 300.000000)
                            @ 1  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                              @ 8  deltablue.AbstractConstraint.lambda$inputsKnown$0(int, Variable):boolean (28 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=21 <= 300.000000)
                            @ 9  deltablue.Plan.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 67  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 18  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000011, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.999989, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 26  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=1.000000, probability=0.999989, bonus=1.000000, nodes=18 <= 300.000000)
                              @ 36  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.000000, probability=0.999989, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 2  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8009ca0.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 8  deltablue.AbstractConstraint.lambda$inputsKnown$0(int, Variable):boolean (28 bytes)   not inlining relevance-based (relevance=0.000007, probability=0.000007, bonus=1.000000, nodes=21 > 0.002152)
                                  @ 26  deltablue.AbstractConstraint$$Lambda/0x00007f20a8009ca0.test(Object):boolean (12 bytes)   trivial (relevance=0.000007, probability=0.000007, bonus=1.000000, nodes=9)
                            @ 1  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 8  deltablue.AbstractConstraint.lambda$inputsKnown$0(int, Variable):boolean (28 bytes)   relevance-based (relevance=1.000000, probability=0.999956, bonus=1.000000, nodes=21 <= 300.000000)
                                  @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f20a8009ca0.test(Object):boolean (12 bytes)   relevance-based (relevance=1.000000, probability=0.999956, bonus=1.000000, nodes=23 <= 300.000000)
                                @ 7  deltablue.BinaryConstraint.inputsHasOne(TestInterface):boolean (32 bytes)   relevance-based (relevance=1.000000, probability=0.999989, bonus=1.000000, nodes=42 <= 300.000000)
                              @ 49  deltablue.AbstractConstraint.inputsKnown(int):boolean (19 bytes)   relevance-based (relevance=1.533601, probability=0.999989, bonus=1.000000, nodes=59 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=0.000075, bonus=1.000000, nodes=41 > 0.022454)
                              @ 58  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.533601, probability=0.999989, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 63  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.533601, probability=0.999989, bonus=1.000000, nodes=22 <= 300.000000)
                              @ 73  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.533601, probability=0.999989, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 19  deltablue.Planner$$Lambda/0x00007f20a8009160.<init>(AbstractConstraint, Vector):void (15 bytes)   relevance-based (relevance=1.000000, probability=0.999989, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 20  deltablue.Planner$$Lambda/0x00007f20a8009160.apply(Object):void (16 bytes)   not inlining too large previous low-level graph (low-level-nodes: 351, relevance=1.000000, probability=7.211015, bonus=1.000000, nodes=16)
                                @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=7.211095, relevance=1.000000, probability=0.999989, bonus=1.000000, nodes=24)
                              @ 78  deltablue.Planner.addConstraintsConsumingTo(Variable, Vector):void (20 bytes)   relevance-based (relevance=1.533601, probability=0.999989, bonus=1.000000, nodes=23 <= 300.000000)
                              @ 18  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000011, probability=89682.000011, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=89681.000022, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 26  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=1.000000, probability=89681.000022, bonus=1.000000, nodes=18 <= 300.000000)
                              @ 36  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.000000, probability=89681.000022, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 2  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8009ca0.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 8  deltablue.AbstractConstraint.lambda$inputsKnown$0(int, Variable):boolean (28 bytes)   not inlining relevance-based (relevance=0.000007, probability=0.643227, bonus=1.000000, nodes=21 > 0.002152)
                                  @ 26  deltablue.AbstractConstraint$$Lambda/0x00007f20a8009ca0.test(Object):boolean (12 bytes)   trivial (relevance=0.000007, probability=0.643227, bonus=1.000000, nodes=9)
                            @ 1  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 8  deltablue.AbstractConstraint.lambda$inputsKnown$0(int, Variable):boolean (28 bytes)   relevance-based (relevance=1.000000, probability=89678.068124, bonus=1.000000, nodes=21 <= 300.000000)
                                  @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f20a8009ca0.test(Object):boolean (12 bytes)   relevance-based (relevance=1.000000, probability=89678.068124, bonus=1.000000, nodes=23 <= 300.000000)
                                @ 7  deltablue.BinaryConstraint.inputsHasOne(TestInterface):boolean (32 bytes)   relevance-based (relevance=1.000000, probability=89681.000022, bonus=1.000000, nodes=42 <= 300.000000)
                              @ 49  deltablue.AbstractConstraint.inputsKnown(int):boolean (19 bytes)   relevance-based (relevance=1.533601, probability=89681.000022, bonus=1.000000, nodes=59 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=6.711840, bonus=1.000000, nodes=41 > 0.022454)
                              @ 58  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.533601, probability=89681.000022, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 63  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.533601, probability=89681.000022, bonus=1.000000, nodes=22 <= 300.000000)
                              @ 73  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.533601, probability=89681.000022, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 19  deltablue.Planner$$Lambda/0x00007f20a8009160.<init>(AbstractConstraint, Vector):void (15 bytes)   relevance-based (relevance=1.000000, probability=89681.000022, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 20  deltablue.Planner$$Lambda/0x00007f20a8009160.apply(Object):void (16 bytes)   not inlining too large previous low-level graph (low-level-nodes: 351, relevance=1.000000, probability=646698.221912, bonus=1.000000, nodes=16)
                                @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=7.211095, relevance=1.000000, probability=89681.000022, bonus=1.000000, nodes=24)
                              @ 78  deltablue.Planner.addConstraintsConsumingTo(Variable, Vector):void (20 bytes)   relevance-based (relevance=1.533601, probability=89681.000022, bonus=1.000000, nodes=23 <= 300.000000)
                            @ 4  deltablue.Plan.lambda$execute$0(AbstractConstraint):void (5 bytes)   inline method (bytecode parsing)
                            @ 8  deltablue.Planner.lambda$incrementalRemove$0(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                              @ 20  deltablue.Plan$$Lambda/0x00007f20a8009eb8.apply(Object):void (8 bytes)   not inlining too large previous low-level graph (low-level-nodes: 774, relevance=1.000000, probability=0.878803, bonus=1.000000, nodes=98)
                            @ 4  deltablue.Plan.lambda$execute$0(AbstractConstraint):void (5 bytes)   inline method (bytecode parsing)
                            @ 8  deltablue.Planner.lambda$incrementalRemove$0(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                              @ 20  deltablue.Plan$$Lambda/0x00007f20a8009eb8.apply(Object):void (8 bytes)   not inlining too large previous low-level graph (low-level-nodes: 774, relevance=1.000000, probability=5.493395, bonus=1.000000, nodes=98)
                                @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=1.000011, probability=0.753255, bonus=1.000000, nodes=14 <= 300.000000)
                                @ 14  deltablue.Planner$$Lambda/0x00007f20a800a510.apply(Object):void (12 bytes)   not inlining too large previous low-level graph (low-level-nodes: 353, relevance=1.000000, probability=0.753246, bonus=1.000000, nodes=9)
                              @ 12  deltablue.Planner.lambda$constraintsConsuming$3(AbstractConstraint, ForEachInterface, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=42 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f20a800a2f0.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f20a800a510.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f20a8000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 31  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000030, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.999970, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 38  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=1.000000, probability=0.999970, bonus=1.000000, nodes=18 <= 300.000000)
                                    @ 1  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   trivial (relevance=1.000000, probability=7.196605, bonus=1.000000, nodes=9)
                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$4(Vector, AbstractConstraint):void (13 bytes)   relevance-based (relevance=1.000000, probability=7.196605, bonus=1.000000, nodes=14 <= 300.000000)
                                @ 20  deltablue.Planner$$Lambda/0x00007f20a800a2f0.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=7.196605, bonus=1.000000, nodes=20 <= 300.000000)
                              @ 57  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.999970, bonus=1.000000, nodes=36 <= 300.000000)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 19  deltablue.Planner$$Lambda/0x00007f20a800a730.<init>(AbstractConstraint, ForEachInterface):void (15 bytes)   relevance-based (relevance=1.000000, probability=0.999970, bonus=1.000000, nodes=11 <= 300.000000)
                                      @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=1.000011, probability=5.146633, bonus=1.000000, nodes=14 <= 300.000000)
                                      @ 14  deltablue.Planner$$Lambda/0x00007f20a800a510.apply(Object):void (12 bytes)   not inlining too large previous low-level graph (low-level-nodes: 353, relevance=1.000000, probability=5.146575, bonus=1.000000, nodes=9)
                                    @ 12  deltablue.Planner.lambda$constraintsConsuming$3(AbstractConstraint, ForEachInterface, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=7.196605, bonus=1.000000, nodes=42 <= 300.000000)
                                  @ 20  deltablue.Planner$$Lambda/0x00007f20a800a730.apply(Object):void (16 bytes)   relevance-based (relevance=1.000000, probability=7.196605, bonus=1.000000, nodes=49 <= 300.000000)
                                @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=5.146730, relevance=1.000000, probability=0.999970, bonus=1.000000, nodes=62)
                              @ 69  deltablue.Planner.constraintsConsuming(Variable, ForEachInterface):void (20 bytes)   relevance-based (relevance=1.000000, probability=0.999970, bonus=1.000000, nodes=23 <= 300.000000)
                              @ 31  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000030, probability=33223.750030, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=33222.750060, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 38  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=1.000000, probability=33222.750060, bonus=1.000000, nodes=18 <= 300.000000)
                                    @ 1  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   trivial (relevance=1.000000, probability=239098.213824, bonus=1.000000, nodes=9)
                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$4(Vector, AbstractConstraint):void (13 bytes)   relevance-based (relevance=1.000000, probability=239098.213824, bonus=1.000000, nodes=14 <= 300.000000)
                                @ 20  deltablue.Planner$$Lambda/0x00007f20a800a2f0.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=239098.213824, bonus=1.000000, nodes=20 <= 300.000000)
                              @ 57  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=33222.750060, bonus=1.000000, nodes=36 <= 300.000000)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 19  deltablue.Planner$$Lambda/0x00007f20a800a730.<init>(AbstractConstraint, ForEachInterface):void (15 bytes)   relevance-based (relevance=1.000000, probability=33222.750060, bonus=1.000000, nodes=11 <= 300.000000)
                                      @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=1.000011, probability=170990.447724, bonus=1.000000, nodes=14 <= 300.000000)
                                      @ 14  deltablue.Planner$$Lambda/0x00007f20a800a510.apply(Object):void (12 bytes)   not inlining too large previous low-level graph (low-level-nodes: 353, relevance=1.000000, probability=170988.524970, bonus=1.000000, nodes=9)
                                    @ 12  deltablue.Planner.lambda$constraintsConsuming$3(AbstractConstraint, ForEachInterface, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=239098.213824, bonus=1.000000, nodes=42 <= 300.000000)
                                  @ 20  deltablue.Planner$$Lambda/0x00007f20a800a730.apply(Object):void (16 bytes)   relevance-based (relevance=1.000000, probability=239098.213824, bonus=1.000000, nodes=49 <= 300.000000)
                                @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=5.146730, relevance=1.000000, probability=33222.750060, bonus=1.000000, nodes=62)
                              @ 69  deltablue.Planner.constraintsConsuming(Variable, ForEachInterface):void (20 bytes)   relevance-based (relevance=1.000000, probability=33222.750060, bonus=1.000000, nodes=23 <= 300.000000)
                            @ 1  som.Vector.size():int (10 bytes)   inline method (bytecode parsing)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 45  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.250000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 101  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.062500, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 114  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.062500, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 184  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.010417, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 218  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.003906, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.003906, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 45  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.003906, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 101  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000977, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 114  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000977, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 184  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000163, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 218  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 45  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000061, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 101  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000015, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 114  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000015, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 184  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000003, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 218  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 45  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000001, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 101  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 114  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 184  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 218  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                        @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                        @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                                      @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000002, bonus=1.000000, nodes=202 <= 300.000000)
                                    @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000122, bonus=1.000000, nodes=387 > 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 45  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000061, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 101  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000015, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 114  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000015, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 184  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000003, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 218  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 45  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000001, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 101  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 114  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 184  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 218  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                        @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                        @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                                      @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000002, bonus=1.000000, nodes=202 <= 300.000000)
                                    @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000122, bonus=1.000000, nodes=387 > 300.000000)
                                  @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.007812, bonus=1.000000, nodes=202 <= 300.000000)
                                @ 19  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=387 > 300.000000)
                              @ 81  som.Vector.sort(Comparator):void (23 bytes)   relevance-based (relevance=1.000030, probability=1.000000, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 26  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=0.000075, bonus=1.000000, nodes=41 > 0.022454)
                                @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 1  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                              @ 6  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.772991, probability=2.293676, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=1.293676, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 13  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=1.000000, probability=1.293676, bonus=1.000000, nodes=18 <= 300.000000)
                              @ 23  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.000000, probability=1.293676, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 39  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 45  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 50  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 53  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 57  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 39  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 45  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 50  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 60  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 70  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 81  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 85  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 8  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 34  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                              @ 42  deltablue.BinaryConstraint.recalculate():void (68 bytes)   not inlining too large previous low-level graph (low-level-nodes: 336, relevance=1.583627, probability=1.293676, bonus=1.000000, nodes=163)
                              @ 48  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.583627, probability=1.293676, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 19  deltablue.Planner$$Lambda/0x00007f20a8009160.<init>(AbstractConstraint, Vector):void (15 bytes)   relevance-based (relevance=1.000000, probability=1.293676, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 20  deltablue.Planner$$Lambda/0x00007f20a8009160.apply(Object):void (16 bytes)   not inlining too large previous low-level graph (low-level-nodes: 351, relevance=1.000000, probability=9.310359, bonus=1.000000, nodes=16)
                                @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=7.196822, relevance=1.000000, probability=1.293676, bonus=1.000000, nodes=24)
                              @ 52  deltablue.Planner.addConstraintsConsumingTo(Variable, Vector):void (20 bytes)   relevance-based (relevance=1.583627, probability=1.293676, bonus=1.000000, nodes=23 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 4  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 15  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 30  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 65  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 76  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 91  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 126  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 133  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 189  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 20  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                              @ 2  deltablue.BinaryConstraint.chooseMethod(int):Direction (220 bytes)   not inlining too large previous low-level graph (low-level-nodes: 371, relevance=1.736776, probability=1.000000, bonus=1.000000, nodes=114)
                              @ 7  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=1.736776, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 48  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.apply(Object):void (12 bytes)   not inlining relevance-based (relevance=0.000004, probability=0.000003, bonus=1.000000, nodes=13 > 0.001082)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 58  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.apply(Object):void (12 bytes)   not inlining relevance-based (relevance=0.000004, probability=0.000003, bonus=1.000000, nodes=13 > 0.001082)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 68  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.apply(Object):void (12 bytes)   not inlining relevance-based (relevance=0.000004, probability=0.000003, bonus=1.000000, nodes=13 > 0.001082)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.apply(Object):void (12 bytes)   relevance-based (relevance=0.070403, probability=0.058511, bonus=1.000000, nodes=13 <= 21.120824)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 25  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.apply(Object):void (12 bytes)   relevance-based (relevance=0.070403, probability=0.058511, bonus=1.000000, nodes=13 <= 21.120824)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 35  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.apply(Object):void (12 bytes)   relevance-based (relevance=0.070403, probability=0.058511, bonus=1.000000, nodes=13 <= 21.120824)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 28  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.apply(Object):void (12 bytes)   relevance-based (relevance=0.709581, probability=0.366480, bonus=1.000000, nodes=13 <= 212.874203)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.516474, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 20  deltablue.BinaryConstraint.inputsDo(ForEachInterface):void (34 bytes)   relevance-based (relevance=1.062350, probability=0.999995, bonus=1.000000, nodes=95 <= 300.000000)
                              @ 24  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.062350, probability=0.999995, bonus=1.000000, nodes=22 <= 300.000000)
                              @ 40  deltablue.BinaryConstraint.markUnsatisfied():void (6 bytes)   relevance-based (relevance=0.611683, probability=0.575780, bonus=1.000000, nodes=14 <= 183.504755)
                            @ 26  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 52  deltablue.Planner.addPropagate(AbstractConstraint, int):boolean (60 bytes)   not inlining too large previous low-level graph (low-level-nodes: 474, relevance=1.062350, probability=0.999995, bonus=1.000000, nodes=53)
                            @ 39  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 45  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 50  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 53  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 57  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 2  deltablue.Strength.weaker(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 42  deltablue.Strength.weakest(Strength):Strength (14 bytes)   relevance-based (relevance=1.666014, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 35  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 64  deltablue.EqualityConstraint.execute():void (42 bytes)   relevance-based (relevance=1.324248, probability=0.794860, bonus=1.000000, nodes=38 <= 300.000000)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 28  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=0.504266, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 8  deltablue.AbstractConstraint.lambda$satisfy$1(int, Variable):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.apply(Object):void (12 bytes)   relevance-based (relevance=0.983078, probability=0.495734, bonus=1.000000, nodes=13 <= 294.923522)
                            @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                                        @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                      @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                      @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                      @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=38 <= 300.000000)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=42 <= 300.000000)
                              @ 6  deltablue.BinaryConstraint.<init>(Variable, Variable, Strength$Sym, Planner):void (21 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=52 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 13  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=0.000075, bonus=1.000000, nodes=41 > 0.022454)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=0.000075, bonus=1.000000, nodes=41 > 0.022454)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000075, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 1  deltablue.BinaryConstraint.addToGraph():void (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=86 <= 300.000000)
                                @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=1.070492, bonus=1.000000, nodes=72)
                              @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000075, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 9  deltablue.Plan.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 67  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                              @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 18  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000012, probability=82243.500000, bonus=1.000000, nodes=10 <= 300.000000)
                                @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=82242.500000, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 26  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=1.000000, probability=82242.500000, bonus=1.000000, nodes=18 <= 300.000000)
                              @ 36  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.000000, probability=82242.500000, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 2  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8009ca0.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 8  deltablue.AbstractConstraint.lambda$inputsKnown$0(int, Variable):boolean (28 bytes)   not inlining relevance-based (relevance=0.000007, probability=0.589874, bonus=1.000000, nodes=21 > 0.002152)
                                  @ 26  deltablue.AbstractConstraint$$Lambda/0x00007f20a8009ca0.test(Object):boolean (12 bytes)   trivial (relevance=0.000007, probability=0.589874, bonus=1.000000, nodes=9)
                            @ 1  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 9  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                                    @ 8  deltablue.AbstractConstraint.lambda$inputsKnown$0(int, Variable):boolean (28 bytes)   relevance-based (relevance=1.000000, probability=82239.639438, bonus=1.000000, nodes=21 <= 300.000000)
                                  @ 15  deltablue.AbstractConstraint$$Lambda/0x00007f20a8009ca0.test(Object):boolean (12 bytes)   relevance-based (relevance=1.000000, probability=82239.639438, bonus=1.000000, nodes=23 <= 300.000000)
                                @ 7  deltablue.BinaryConstraint.inputsHasOne(TestInterface):boolean (32 bytes)   relevance-based (relevance=1.000000, probability=82242.500000, bonus=1.000000, nodes=42 <= 300.000000)
                              @ 49  deltablue.AbstractConstraint.inputsKnown(int):boolean (19 bytes)   relevance-based (relevance=1.533603, probability=82242.500000, bonus=1.000000, nodes=59 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=6.155133, bonus=1.000000, nodes=41 > 0.022454)
                              @ 58  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.533603, probability=82242.500000, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 63  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.533603, probability=82242.500000, bonus=1.000000, nodes=22 <= 300.000000)
                              @ 73  deltablue.BinaryConstraint.getOutput():Variable (22 bytes)   relevance-based (relevance=1.533603, probability=82242.500000, bonus=1.000000, nodes=22 <= 300.000000)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 19  deltablue.Planner$$Lambda/0x00007f20a8009160.<init>(AbstractConstraint, Vector):void (15 bytes)   relevance-based (relevance=1.000000, probability=82242.500000, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 20  deltablue.Planner$$Lambda/0x00007f20a8009160.apply(Object):void (16 bytes)   not inlining too large previous low-level graph (low-level-nodes: 351, relevance=1.000000, probability=591884.621674, bonus=1.000000, nodes=16)
                                @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=7.196822, relevance=1.000000, probability=82242.500000, bonus=1.000000, nodes=24)
                              @ 78  deltablue.Planner.addConstraintsConsumingTo(Variable, Vector):void (20 bytes)   relevance-based (relevance=1.533603, probability=82242.500000, bonus=1.000000, nodes=23 <= 300.000000)
                            @ 4  deltablue.Planner.<init>():void (10 bytes)   inline method (bytecode parsing)
                            @ 12  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 18  deltablue.Variable.value(int):Variable (15 bytes)   inline method (bytecode parsing)
                              @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 25  deltablue.Variable.value(int):Variable (15 bytes)   inline method (bytecode parsing)
                              @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 75  deltablue.StayConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 114  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 129  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 144  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 157  java.lang.RuntimeException.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                              @ 2  java.lang.Exception.<init>(String):void (6 bytes)   inline method (bytecode parsing)
                            @ 187  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 248  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 242  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 242  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=1.000000, probability=59997.000034, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 44  java.lang.StringLatin1.equals(byte[], byte[]):boolean (36 bytes)   relevance-based (relevance=1.000000, probability=0.846572, bonus=1.000000, nodes=33 <= 300.000000)
                                      @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                    @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=12 <= 300.000000)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                    @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                    @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                  @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=38 <= 300.000000)
                              @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=42 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 13  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=0.000075, bonus=1.000000, nodes=41 > 0.022454)
                              @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=0.000075, bonus=1.000000, nodes=41 > 0.022454)
                              @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000075, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f20a800a2f0.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f20a800a510.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f20a8000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=0.000075, bonus=1.000000, nodes=41 > 0.022454)
                                @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 26  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                              @ 31  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000028, probability=36250.400000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 1  som.Vector.size():int (10 bytes)   inline method (bytecode parsing)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 45  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.250000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 101  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.062500, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.062500, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 114  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.062500, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 184  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.010417, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                      @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=13 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=24 <= 300.000000)
                                  @ 218  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.010417, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.003906, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.003906, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 45  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.003906, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 101  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000977, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000977, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 114  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000977, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 184  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000163, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=13 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=24 <= 300.000000)
                                    @ 218  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000163, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 45  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000061, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 101  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000015, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 114  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000015, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 184  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000003, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 218  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 45  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000001, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 101  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 114  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 184  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 218  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                        @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                        @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                                      @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000002, bonus=1.000000, nodes=202 <= 300.000000)
                                    @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000122, bonus=1.000000, nodes=387 > 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000061, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 45  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000061, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 101  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000015, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000015, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 114  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000015, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 184  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000003, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=13 <= 300.000000)
                                        @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=24 <= 300.000000)
                                      @ 218  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000003, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000001, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 45  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000001, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 101  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 114  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 184  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                            @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                          @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                        @ 218  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                        @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 45  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 101  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 114  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 184  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                              @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                            @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                          @ 218  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 7  som.Vector.defaultSort(int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 59  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 129  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 146  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 250  som.Vector.swap(Object[], int, int):void (8 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 45  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=32.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 101  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 114  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=8.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 184  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=2.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                            @ 1  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.AbstractConstraint.getStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                                @ 8  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                              @ 8  deltablue.Planner.lambda$removePropagateFrom$6(AbstractConstraint, AbstractConstraint):int (20 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=24 <= 300.000000)
                                            @ 218  deltablue.Planner$$Lambda/0x00007f20a800a950.compare(Object, Object):int (12 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=30 <= 300.000000)
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining it exceeds the maximum recursive inlining depth
                                          @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=202 <= 300.000000)
                                        @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000000, bonus=1.000000, nodes=387 > 300.000000)
                                      @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.000002, bonus=1.000000, nodes=202 <= 300.000000)
                                    @ 269  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.000122, bonus=1.000000, nodes=387 > 300.000000)
                                  @ 261  som.Vector.sort(int, int, Comparator):void (273 bytes)   relevance-based (relevance=1.000000, probability=0.007813, bonus=1.000000, nodes=202 <= 300.000000)
                                @ 19  som.Vector.sort(int, int, Comparator):void (273 bytes)   not inlining relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=387 > 300.000000)
                              @ 81  som.Vector.sort(Comparator):void (23 bytes)   relevance-based (relevance=1.000075, probability=1.000000, bonus=1.000000, nodes=22 <= 300.000000)
                                @ 1  som.Vector.isEmpty():boolean (17 bytes)   relevance-based (relevance=1.000000, probability=36249.400000, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 38  som.Vector.removeFirst():Object (31 bytes)   relevance-based (relevance=1.000000, probability=36249.400000, bonus=1.000000, nodes=18 <= 300.000000)
                                    @ 1  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=1.000014, probability=260879.857554, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 9  som.Vector.append(Object):void (51 bytes)   not inlining relevance-based (relevance=0.000014, probability=3.681139, bonus=1.000000, nodes=35 > 0.004233)
                                  @ 8  deltablue.Planner.lambda$removePropagateFrom$4(Vector, AbstractConstraint):void (13 bytes)   relevance-based (relevance=1.000000, probability=260879.857554, bonus=1.000000, nodes=36 <= 300.000000)
                                @ 20  deltablue.Planner$$Lambda/0x00007f20a800a2f0.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=260879.857554, bonus=1.000000, nodes=43 <= 300.000000)
                              @ 57  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=36249.400000, bonus=1.000000, nodes=56 <= 300.000000)
                            @ 1  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 6  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 11  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object):Object (10 bytes)   inline method (bytecode parsing)
                              @ 6  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object, Object):Object (24 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 19  deltablue.Planner$$Lambda/0x00007f20a800a730.<init>(AbstractConstraint, ForEachInterface):void (15 bytes)   relevance-based (relevance=1.000000, probability=36249.400000, bonus=1.000000, nodes=11 <= 300.000000)
                                      @ 6  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=1.000011, probability=186567.531944, bonus=1.000000, nodes=14 <= 300.000000)
                                      @ 14  deltablue.Planner$$Lambda/0x00007f20a800a510.apply(Object):void (12 bytes)   not inlining too large previous low-level graph (low-level-nodes: 353, relevance=1.000000, probability=186565.434030, bonus=1.000000, nodes=9)
                                    @ 12  deltablue.Planner.lambda$constraintsConsuming$3(AbstractConstraint, ForEachInterface, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=260879.857554, bonus=1.000000, nodes=42 <= 300.000000)
                                  @ 20  deltablue.Planner$$Lambda/0x00007f20a800a730.apply(Object):void (16 bytes)   relevance-based (relevance=1.000000, probability=260879.857554, bonus=1.000000, nodes=49 <= 300.000000)
                                @ 16  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=5.146718, relevance=1.000000, probability=36249.400000, bonus=1.000000, nodes=62)
                              @ 69  deltablue.Planner.constraintsConsuming(Variable, ForEachInterface):void (20 bytes)   relevance-based (relevance=1.000000, probability=36249.400000, bonus=1.000000, nodes=23 <= 300.000000)
                                @ 1  deltablue.BinaryConstraint.isSatisfied():boolean (13 bytes)   relevance-based (relevance=1.000013, probability=1.000000, bonus=1.000000, nodes=14 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 9  som.Vector.append(Object):void (51 bytes)   not inlining relevance-based (relevance=0.000013, probability=0.000013, bonus=1.000000, nodes=35 > 0.003819)
                              @ 8  deltablue.Planner.lambda$removePropagateFrom$4(Vector, AbstractConstraint):void (13 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=39 <= 300.000000)
                            @ 5  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 20  deltablue.Variable.getWalkStrength():Strength (5 bytes)   inline accessor method (bytecode parsing)
                            @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 23  deltablue.Strength.stronger(Strength):boolean (17 bytes)   relevance-based (relevance=1.000000, probability=0.999958, bonus=1.000000, nodes=13 <= 300.000000)
                            @ 4  deltablue.Planner.<init>():void (10 bytes)   inline method (bytecode parsing)
                            @ 12  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 18  deltablue.Variable.value(int):Variable (15 bytes)   inline method (bytecode parsing)
                              @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 25  deltablue.Variable.value(int):Variable (15 bytes)   inline method (bytecode parsing)
                              @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 75  deltablue.StayConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 114  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 144  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 187  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 248  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                                @ 4  deltablue.Variable.<init>():void (44 bytes)   not inlining too large previous low-level graph (low-level-nodes: 356, relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=27)
                              @ 47  deltablue.Variable.value(int):Variable (15 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                                @ 4  deltablue.Variable.<init>():void (44 bytes)   not inlining too large previous low-level graph (low-level-nodes: 356, relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=27)
                              @ 54  deltablue.Variable.value(int):Variable (15 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=0.000075, bonus=1.000000, nodes=41 > 0.022454)
                              @ 62  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=35 <= 300.000000)
                                  @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=5)
                                @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000075, probability=0.999983, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=0.000075, bonus=1.000000, nodes=41 > 0.022454)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000075, probability=0.999983, bonus=1.000000, nodes=47 <= 300.000000)
                                @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=1.070474, bonus=1.000000, nodes=72)
                              @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000075, probability=0.999983, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 24  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                              @ 94  deltablue.ScaleConstraint.<init>(Variable, Variable, Variable, Variable, Strength$Sym, Planner):void (28 bytes)   not inlining too large previous low-level graph (low-level-nodes: 580, relevance=1.000075, probability=0.999983, bonus=1.000000, nodes=25)
                            @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                                @ 4  deltablue.Variable.<init>():void (44 bytes)   not inlining too large previous low-level graph (low-level-nodes: 356, relevance=1.000000, probability=59998.000033, bonus=1.000000, nodes=27)
                              @ 47  deltablue.Variable.value(int):Variable (15 bytes)   relevance-based (relevance=1.000000, probability=59998.000033, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                                @ 4  deltablue.Variable.<init>():void (44 bytes)   not inlining too large previous low-level graph (low-level-nodes: 356, relevance=1.000000, probability=59998.000033, bonus=1.000000, nodes=27)
                              @ 54  deltablue.Variable.value(int):Variable (15 bytes)   relevance-based (relevance=1.000000, probability=59998.000033, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=4.490327, bonus=1.000000, nodes=41 > 0.022454)
                              @ 62  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=59998.000033, bonus=1.000000, nodes=35 <= 300.000000)
                                  @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=59998.000033, bonus=1.000000, nodes=5)
                                @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=59998.000033, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=59998.000033, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=59998.000033, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000075, probability=59998.000033, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=4.490327, bonus=1.000000, nodes=41 > 0.022454)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=59998.000033, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000075, probability=59998.000033, bonus=1.000000, nodes=47 <= 300.000000)
                                @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=59998.000033, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=59998.000033, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=64227.372513, bonus=1.000000, nodes=72)
                              @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000075, probability=59998.000033, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 24  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                              @ 94  deltablue.ScaleConstraint.<init>(Variable, Variable, Variable, Variable, Strength$Sym, Planner):void (28 bytes)   not inlining too large previous low-level graph (low-level-nodes: 580, relevance=1.000075, probability=59998.000033, bonus=1.000000, nodes=25)
                            @ 9  deltablue.EditConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 44  deltablue.Plan.execute():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                                @ 4  java.lang.invoke.LambdaForm$MH/0x00007f20a8000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                  @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                  @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=0.000075, bonus=1.000000, nodes=41 > 0.022454)
                                  @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                                  @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=1.070492, bonus=1.000000, nodes=72)
                                @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000075, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=0.000075, bonus=1.000000, nodes=41 > 0.022454)
                                  @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 14  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000075, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f20a8009610.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                                      @ 1  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   not inlining no type profile exists
                                      @ 8  deltablue.AbstractConstraint.isSatisfied():boolean (0 bytes)   not inlining no type profile exists
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                          @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=0.000135, bonus=1.000000, nodes=41 > 0.022454)
                                        @ 16  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.799201, bonus=1.000000, nodes=35 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=7.196805, bonus=1.000000, nodes=59 <= 300.000000)
                                    @ 20  deltablue.Planner$$Lambda/0x00007f20a8009610.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=7.196805, bonus=1.000000, nodes=64 <= 300.000000)
                                  @ 15  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=10.795342, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=77)
                            @ 9  deltablue.Plan.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 67  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 20  deltablue.Planner.makePlan(Vector):Plan (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 817, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=69)
                                @ 22  deltablue.Planner.extractPlanFromConstraints(Vector):Plan (24 bytes)   relevance-based (relevance=1.000075, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                                  @ 1  deltablue.UnaryConstraint.isSatisfied():boolean (5 bytes)   trivial (relevance=2.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 21  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f20a800abe0.<init>(Planner):void (10 bytes)   inline method (bytecode parsing)
                                    @ 1  deltablue.UnaryConstraint.getOutput():Variable (5 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=5)
                                    @ 6  deltablue.UnaryConstraint.markUnsatisfied():void (6 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=7)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f20a800e800.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                          @ 24  som.Vector$$Lambda/0x00007f20a800a0d0.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=17 <= 300.000000)
                                              @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=1.799201, bonus=1.000000, nodes=26 <= 300.000000)
                                            @ 20  som.Vector$$Lambda/0x00007f20a800a0d0.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=1.799201, bonus=1.000000, nodes=28 <= 300.000000)
                                          @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=41 <= 300.000000)
                                        @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.250000, bonus=1.000000, nodes=73 <= 300.000000)
                                      @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=90 <= 300.000000)
                                    @ 10  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=100 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f20a800a2f0.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f20a800a510.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f20a8000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 15  deltablue.Planner.removePropagateFrom(Variable):Vector (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 770, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=81)
                            @ 8  deltablue.Planner.lambda$incrementalRemove$0(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                          @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=3.852061, bonus=1.000000, nodes=72)
                                        @ 2  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=28 <= 300.000000)
                                      @ 20  deltablue.Planner$$Lambda/0x00007f20a800abe0.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=37 <= 300.000000)
                                    @ 26  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=14.900926, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=53)
                                  @ 9  deltablue.Planner.incrementalRemove(AbstractConstraint):void (30 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=121 <= 300.000000)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f20a800e800.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                        @ 24  som.Vector$$Lambda/0x00007f20a800a0d0.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=17 <= 300.000000)
                                            @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=26 <= 300.000000)
                                          @ 20  som.Vector$$Lambda/0x00007f20a800a0d0.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=28 <= 300.000000)
                                        @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=41 <= 300.000000)
                                      @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=73 <= 300.000000)
                                    @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=90 <= 300.000000)
                                  @ 13  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=4.000000, probability=1.000000, bonus=1.000000, nodes=100 <= 300.000000)
                                @ 55  deltablue.AbstractConstraint.destroyConstraint(Planner):void (17 bytes)   relevance-based (relevance=1.000075, probability=1.000000, bonus=1.000000, nodes=224 <= 300.000000)
                              @ 109  deltablue.Planner.change(Variable, int):void (59 bytes)   not inlining relevance-based (relevance=1.000092, probability=1.000000, bonus=1.000000, nodes=415 > 300.000000)
                            @ 9  deltablue.EditConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 44  deltablue.Plan.execute():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                                @ 4  java.lang.invoke.LambdaForm$MH/0x00007f20a8000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                  @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                  @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=0.000075, bonus=1.000000, nodes=41 > 0.022454)
                                  @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                                  @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=1.070492, bonus=1.000000, nodes=72)
                                @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000075, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=0.000075, bonus=1.000000, nodes=41 > 0.022454)
                                  @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 14  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000075, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f20a8009610.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                                      @ 1  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   not inlining no type profile exists
                                      @ 8  deltablue.AbstractConstraint.isSatisfied():boolean (0 bytes)   not inlining no type profile exists
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                          @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=0.000135, bonus=1.000000, nodes=41 > 0.022454)
                                        @ 16  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.799201, bonus=1.000000, nodes=35 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=7.196805, bonus=1.000000, nodes=59 <= 300.000000)
                                    @ 20  deltablue.Planner$$Lambda/0x00007f20a8009610.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=7.196805, bonus=1.000000, nodes=64 <= 300.000000)
                                  @ 15  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=10.795342, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=77)
                            @ 9  deltablue.Plan.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 67  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 20  deltablue.Planner.makePlan(Vector):Plan (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 817, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=69)
                                @ 22  deltablue.Planner.extractPlanFromConstraints(Vector):Plan (24 bytes)   relevance-based (relevance=1.000075, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                                  @ 1  deltablue.UnaryConstraint.isSatisfied():boolean (5 bytes)   trivial (relevance=2.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 21  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f20a800abe0.<init>(Planner):void (10 bytes)   inline method (bytecode parsing)
                                    @ 1  deltablue.UnaryConstraint.getOutput():Variable (5 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=5)
                                    @ 6  deltablue.UnaryConstraint.markUnsatisfied():void (6 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=7)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f20a800e800.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                          @ 24  som.Vector$$Lambda/0x00007f20a800a0d0.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=17 <= 300.000000)
                                              @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=1.799201, bonus=1.000000, nodes=26 <= 300.000000)
                                            @ 20  som.Vector$$Lambda/0x00007f20a800a0d0.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=1.799201, bonus=1.000000, nodes=28 <= 300.000000)
                                          @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=41 <= 300.000000)
                                        @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.250000, bonus=1.000000, nodes=73 <= 300.000000)
                                      @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=90 <= 300.000000)
                                    @ 10  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=100 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f20a800a2f0.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f20a800a510.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f20a8000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 15  deltablue.Planner.removePropagateFrom(Variable):Vector (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 770, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=81)
                            @ 8  deltablue.Planner.lambda$incrementalRemove$0(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                          @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=3.852061, bonus=1.000000, nodes=72)
                                        @ 2  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=28 <= 300.000000)
                                      @ 20  deltablue.Planner$$Lambda/0x00007f20a800abe0.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=37 <= 300.000000)
                                    @ 26  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=14.900926, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=53)
                                  @ 9  deltablue.Planner.incrementalRemove(AbstractConstraint):void (30 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=121 <= 300.000000)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f20a800e800.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                        @ 24  som.Vector$$Lambda/0x00007f20a800a0d0.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=17 <= 300.000000)
                                            @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=26 <= 300.000000)
                                          @ 20  som.Vector$$Lambda/0x00007f20a800a0d0.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=28 <= 300.000000)
                                        @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=41 <= 300.000000)
                                      @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=73 <= 300.000000)
                                    @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=90 <= 300.000000)
                                  @ 13  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=4.000000, probability=1.000000, bonus=1.000000, nodes=100 <= 300.000000)
                                @ 55  deltablue.AbstractConstraint.destroyConstraint(Planner):void (17 bytes)   relevance-based (relevance=1.000075, probability=1.000000, bonus=1.000000, nodes=224 <= 300.000000)
                              @ 139  deltablue.Planner.change(Variable, int):void (59 bytes)   not inlining relevance-based (relevance=1.000092, probability=1.000000, bonus=1.000000, nodes=415 > 300.000000)
                            @ 9  deltablue.EditConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 44  deltablue.Plan.execute():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                                @ 4  java.lang.invoke.LambdaForm$MH/0x00007f20a8000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                  @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                  @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=0.000075, bonus=1.000000, nodes=41 > 0.022454)
                                  @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                                  @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=1.070492, bonus=1.000000, nodes=72)
                                @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000075, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=0.000075, bonus=1.000000, nodes=41 > 0.022454)
                                  @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 14  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000075, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f20a8009610.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                                      @ 1  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   not inlining no type profile exists
                                      @ 8  deltablue.AbstractConstraint.isSatisfied():boolean (0 bytes)   not inlining no type profile exists
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                          @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=0.000135, bonus=1.000000, nodes=41 > 0.022454)
                                        @ 16  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.799201, bonus=1.000000, nodes=35 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=7.196805, bonus=1.000000, nodes=59 <= 300.000000)
                                    @ 20  deltablue.Planner$$Lambda/0x00007f20a8009610.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=7.196805, bonus=1.000000, nodes=64 <= 300.000000)
                                  @ 15  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=10.795342, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=77)
                            @ 9  deltablue.Plan.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 67  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 20  deltablue.Planner.makePlan(Vector):Plan (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 817, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=69)
                                @ 22  deltablue.Planner.extractPlanFromConstraints(Vector):Plan (24 bytes)   relevance-based (relevance=1.000075, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                                  @ 1  deltablue.UnaryConstraint.isSatisfied():boolean (5 bytes)   trivial (relevance=2.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 21  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f20a800abe0.<init>(Planner):void (10 bytes)   inline method (bytecode parsing)
                                    @ 1  deltablue.UnaryConstraint.getOutput():Variable (5 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=5)
                                    @ 6  deltablue.UnaryConstraint.markUnsatisfied():void (6 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=7)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f20a800e800.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                          @ 24  som.Vector$$Lambda/0x00007f20a800a0d0.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=17 <= 300.000000)
                                              @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=1.799201, bonus=1.000000, nodes=26 <= 300.000000)
                                            @ 20  som.Vector$$Lambda/0x00007f20a800a0d0.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=1.799201, bonus=1.000000, nodes=28 <= 300.000000)
                                          @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=41 <= 300.000000)
                                        @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.250000, bonus=1.000000, nodes=73 <= 300.000000)
                                      @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=90 <= 300.000000)
                                    @ 10  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=100 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f20a800a2f0.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f20a800a510.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f20a8000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 15  deltablue.Planner.removePropagateFrom(Variable):Vector (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 770, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=81)
                            @ 8  deltablue.Planner.lambda$incrementalRemove$0(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                          @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=3.852061, bonus=1.000000, nodes=72)
                                        @ 2  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=28 <= 300.000000)
                                      @ 20  deltablue.Planner$$Lambda/0x00007f20a800abe0.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=37 <= 300.000000)
                                    @ 26  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=14.900926, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=53)
                                  @ 9  deltablue.Planner.incrementalRemove(AbstractConstraint):void (30 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=121 <= 300.000000)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f20a800e800.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                        @ 24  som.Vector$$Lambda/0x00007f20a800a0d0.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=17 <= 300.000000)
                                            @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=26 <= 300.000000)
                                          @ 20  som.Vector$$Lambda/0x00007f20a800a0d0.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=28 <= 300.000000)
                                        @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=41 <= 300.000000)
                                      @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=73 <= 300.000000)
                                    @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=90 <= 300.000000)
                                  @ 13  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=4.000000, probability=1.000000, bonus=1.000000, nodes=100 <= 300.000000)
                                @ 55  deltablue.AbstractConstraint.destroyConstraint(Planner):void (17 bytes)   relevance-based (relevance=1.000075, probability=1.000000, bonus=1.000000, nodes=224 <= 300.000000)
                              @ 164  deltablue.Planner.change(Variable, int):void (59 bytes)   not inlining relevance-based (relevance=1.000092, probability=1.000000, bonus=1.000000, nodes=412 > 300.000000)
                            @ 9  deltablue.EditConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 44  deltablue.Plan.execute():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                                @ 4  java.lang.invoke.LambdaForm$MH/0x00007f20a8000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                  @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                  @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=0.000075, bonus=1.000000, nodes=41 > 0.022454)
                                  @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                                  @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=1.070492, bonus=1.000000, nodes=72)
                                @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000075, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=0.000075, bonus=1.000000, nodes=41 > 0.022454)
                                  @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 14  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000075, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f20a8009610.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                                      @ 1  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   not inlining no type profile exists
                                      @ 8  deltablue.AbstractConstraint.isSatisfied():boolean (0 bytes)   not inlining no type profile exists
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                          @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=0.000135, bonus=1.000000, nodes=41 > 0.022454)
                                        @ 16  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.799201, bonus=1.000000, nodes=35 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=7.196805, bonus=1.000000, nodes=59 <= 300.000000)
                                    @ 20  deltablue.Planner$$Lambda/0x00007f20a8009610.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=7.196805, bonus=1.000000, nodes=64 <= 300.000000)
                                  @ 15  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=10.795342, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=77)
                            @ 9  deltablue.Plan.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 67  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 20  deltablue.Planner.makePlan(Vector):Plan (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 817, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=69)
                                @ 22  deltablue.Planner.extractPlanFromConstraints(Vector):Plan (24 bytes)   relevance-based (relevance=1.000075, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                                  @ 1  deltablue.UnaryConstraint.isSatisfied():boolean (5 bytes)   trivial (relevance=2.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 21  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f20a800abe0.<init>(Planner):void (10 bytes)   inline method (bytecode parsing)
                                    @ 1  deltablue.UnaryConstraint.getOutput():Variable (5 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=5)
                                    @ 6  deltablue.UnaryConstraint.markUnsatisfied():void (6 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=7)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f20a800e800.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                          @ 24  som.Vector$$Lambda/0x00007f20a800a0d0.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=17 <= 300.000000)
                                              @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=1.799201, bonus=1.000000, nodes=26 <= 300.000000)
                                            @ 20  som.Vector$$Lambda/0x00007f20a800a0d0.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=1.799201, bonus=1.000000, nodes=28 <= 300.000000)
                                          @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=41 <= 300.000000)
                                        @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.250000, bonus=1.000000, nodes=73 <= 300.000000)
                                      @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=90 <= 300.000000)
                                    @ 10  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=100 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f20a800a2f0.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f20a800a510.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f20a8000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 15  deltablue.Planner.removePropagateFrom(Variable):Vector (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 770, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=81)
                            @ 8  deltablue.Planner.lambda$incrementalRemove$0(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                          @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=3.852061, bonus=1.000000, nodes=72)
                                        @ 2  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=28 <= 300.000000)
                                      @ 20  deltablue.Planner$$Lambda/0x00007f20a800abe0.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=37 <= 300.000000)
                                    @ 26  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=14.900926, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=53)
                                  @ 9  deltablue.Planner.incrementalRemove(AbstractConstraint):void (30 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=121 <= 300.000000)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f20a800e800.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                        @ 24  som.Vector$$Lambda/0x00007f20a800a0d0.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=17 <= 300.000000)
                                            @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=26 <= 300.000000)
                                          @ 20  som.Vector$$Lambda/0x00007f20a800a0d0.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=28 <= 300.000000)
                                        @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=41 <= 300.000000)
                                      @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=73 <= 300.000000)
                                    @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=90 <= 300.000000)
                                  @ 13  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=4.000000, probability=1.000000, bonus=1.000000, nodes=100 <= 300.000000)
                                @ 55  deltablue.AbstractConstraint.destroyConstraint(Planner):void (17 bytes)   relevance-based (relevance=1.000075, probability=1.000000, bonus=1.000000, nodes=224 <= 300.000000)
                              @ 225  deltablue.Planner.change(Variable, int):void (59 bytes)   not inlining relevance-based (relevance=1.000092, probability=1.000000, bonus=1.000000, nodes=412 > 300.000000)
                              @ 181  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=1.000000, probability=55045.500000, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 242  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=1.000000, probability=59999.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 4  deltablue.Planner.<init>():void (10 bytes)   inline method (bytecode parsing)
                            @ 16  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f20a8000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                            @ 55  deltablue.EqualityConstraint.<init>(Variable, Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                              @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  deltablue.StayConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 91  deltablue.EditConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 124  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 129  deltablue.Plan.execute():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                                @ 4  java.lang.invoke.LambdaForm$MH/0x00007f20a8000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                            @ 135  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 6  deltablue.BinaryConstraint.<init>(Variable, Variable, Strength$Sym, Planner):void (21 bytes)   not inlining too large previous low-level graph (low-level-nodes: 394, relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=17)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 13  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                              @ 1  deltablue.BinaryConstraint.addToGraph():void (22 bytes)   not inlining too large previous low-level graph (low-level-nodes: 617, relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=25)
                                @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=1.070474, bonus=1.000000, nodes=72)
                              @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=0.999983, bonus=1.000000, nodes=28 <= 300.000000)
                              @ 6  deltablue.BinaryConstraint.<init>(Variable, Variable, Strength$Sym, Planner):void (21 bytes)   not inlining too large previous low-level graph (low-level-nodes: 394, relevance=1.000000, probability=58803.000034, bonus=1.000000, nodes=17)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 13  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                              @ 1  deltablue.BinaryConstraint.addToGraph():void (22 bytes)   not inlining too large previous low-level graph (low-level-nodes: 617, relevance=1.000000, probability=58803.000034, bonus=1.000000, nodes=25)
                                @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=58803.000034, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=58803.000034, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=62948.134704, bonus=1.000000, nodes=72)
                              @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=58803.000034, bonus=1.000000, nodes=28 <= 300.000000)
                                  @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000017, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=0.000075, bonus=1.000000, nodes=41 > 0.022454)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000017, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                                @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=1.070492, bonus=1.000000, nodes=72)
                              @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000017, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                                  @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000017, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=0.000075, bonus=1.000000, nodes=41 > 0.022454)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000017, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                                @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=1.070492, bonus=1.000000, nodes=72)
                              @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000017, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=0.000075, bonus=1.000000, nodes=41 > 0.022454)
                                @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 96  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000017, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f20a8009610.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                                    @ 1  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   not inlining no type profile exists
                                    @ 8  deltablue.AbstractConstraint.isSatisfied():boolean (0 bytes)   not inlining no type profile exists
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                        @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=0.000135, bonus=1.000000, nodes=41 > 0.022454)
                                      @ 16  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.799201, bonus=1.000000, nodes=35 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=7.196805, bonus=1.000000, nodes=59 <= 300.000000)
                                  @ 20  deltablue.Planner$$Lambda/0x00007f20a8009610.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=7.196805, bonus=1.000000, nodes=64 <= 300.000000)
                                @ 15  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=10.795342, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=77)
                            @ 9  deltablue.Plan.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 67  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 20  deltablue.Planner.makePlan(Vector):Plan (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 817, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=69)
                              @ 104  deltablue.Planner.extractPlanFromConstraints(Vector):Plan (24 bytes)   relevance-based (relevance=1.000017, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                                @ 1  deltablue.UnaryConstraint.isSatisfied():boolean (5 bytes)   trivial (relevance=2.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 21  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f20a800abe0.<init>(Planner):void (10 bytes)   inline method (bytecode parsing)
                                  @ 1  deltablue.UnaryConstraint.getOutput():Variable (5 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=5)
                                  @ 6  deltablue.UnaryConstraint.markUnsatisfied():void (6 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=7)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f20a800e800.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                        @ 24  som.Vector$$Lambda/0x00007f20a800a0d0.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=17 <= 300.000000)
                                            @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=1.799201, bonus=1.000000, nodes=26 <= 300.000000)
                                          @ 20  som.Vector$$Lambda/0x00007f20a800a0d0.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=1.799201, bonus=1.000000, nodes=28 <= 300.000000)
                                        @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=41 <= 300.000000)
                                      @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.250000, bonus=1.000000, nodes=73 <= 300.000000)
                                    @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=90 <= 300.000000)
                                  @ 10  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=100 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f20a800a2f0.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f20a800a510.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f20a8000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                  @ 15  deltablue.Planner.removePropagateFrom(Variable):Vector (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 770, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=81)
                            @ 8  deltablue.Planner.lambda$incrementalRemove$0(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                        @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=3.852061, bonus=1.000000, nodes=72)
                                      @ 2  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=28 <= 300.000000)
                                    @ 20  deltablue.Planner$$Lambda/0x00007f20a800abe0.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=37 <= 300.000000)
                                  @ 26  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=14.900926, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=53)
                                @ 9  deltablue.Planner.incrementalRemove(AbstractConstraint):void (30 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=121 <= 300.000000)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f20a800e800.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                      @ 24  som.Vector$$Lambda/0x00007f20a800a0d0.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=17 <= 300.000000)
                                          @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=26 <= 300.000000)
                                        @ 20  som.Vector$$Lambda/0x00007f20a800a0d0.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=28 <= 300.000000)
                                      @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=41 <= 300.000000)
                                    @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=73 <= 300.000000)
                                  @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=90 <= 300.000000)
                                @ 13  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=4.000000, probability=1.000000, bonus=1.000000, nodes=100 <= 300.000000)
                              @ 161  deltablue.AbstractConstraint.destroyConstraint(Planner):void (17 bytes)   relevance-based (relevance=1.000017, probability=1.000000, bonus=1.000000, nodes=224 <= 300.000000)
                            @ 4  deltablue.Plan.lambda$execute$0(AbstractConstraint):void (5 bytes)   inline method (bytecode parsing)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 35  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 25  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 33  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 37  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 51  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 58  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 66  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 70  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 1  deltablue.EqualityConstraint.execute():void (42 bytes)   relevance-based (relevance=1.000000, probability=719.680485, bonus=1.000000, nodes=103 <= 300.000000)
                                @ 20  deltablue.Plan$$Lambda/0x00007f20a8009eb8.apply(Object):void (8 bytes)   relevance-based (relevance=1.000000, probability=719.680485, bonus=1.000000, nodes=113 <= 300.000000)
                              @ 6  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=100.000000, bonus=1.000000, nodes=127 <= 300.000000)
                            @ 4  deltablue.Planner.<init>():void (10 bytes)   inline method (bytecode parsing)
                            @ 12  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 18  deltablue.Variable.value(int):Variable (15 bytes)   inline method (bytecode parsing)
                              @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 25  deltablue.Variable.value(int):Variable (15 bytes)   inline method (bytecode parsing)
                              @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 75  deltablue.StayConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 114  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 144  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 187  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 248  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                              @ 181  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=1.000000, probability=0.999982, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 181  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=1.000000, probability=56694.666702, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 9  deltablue.EditConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 44  deltablue.Plan.execute():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                                @ 4  java.lang.invoke.LambdaForm$MH/0x00007f20a8000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                  @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                  @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=0.000075, bonus=1.000000, nodes=41 > 0.022454)
                                  @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                                  @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=1.070492, bonus=1.000000, nodes=72)
                                @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000075, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=0.000075, bonus=1.000000, nodes=41 > 0.022454)
                                  @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 14  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000075, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f20a8009610.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                                      @ 1  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   not inlining no type profile exists
                                      @ 8  deltablue.AbstractConstraint.isSatisfied():boolean (0 bytes)   not inlining no type profile exists
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                          @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=0.000135, bonus=1.000000, nodes=41 > 0.022454)
                                        @ 16  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.799201, bonus=1.000000, nodes=35 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=7.196805, bonus=1.000000, nodes=59 <= 300.000000)
                                    @ 20  deltablue.Planner$$Lambda/0x00007f20a8009610.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=7.196805, bonus=1.000000, nodes=64 <= 300.000000)
                                  @ 15  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=10.795342, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=77)
                            @ 9  deltablue.Plan.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 67  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 20  deltablue.Planner.makePlan(Vector):Plan (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 817, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=69)
                                @ 22  deltablue.Planner.extractPlanFromConstraints(Vector):Plan (24 bytes)   relevance-based (relevance=1.000075, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                                  @ 1  deltablue.UnaryConstraint.isSatisfied():boolean (5 bytes)   trivial (relevance=2.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 21  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f20a800abe0.<init>(Planner):void (10 bytes)   inline method (bytecode parsing)
                                    @ 1  deltablue.UnaryConstraint.getOutput():Variable (5 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=5)
                                    @ 6  deltablue.UnaryConstraint.markUnsatisfied():void (6 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=7)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f20a800e800.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                          @ 24  som.Vector$$Lambda/0x00007f20a800a0d0.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=17 <= 300.000000)
                                              @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=1.799201, bonus=1.000000, nodes=26 <= 300.000000)
                                            @ 20  som.Vector$$Lambda/0x00007f20a800a0d0.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=1.799201, bonus=1.000000, nodes=28 <= 300.000000)
                                          @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=41 <= 300.000000)
                                        @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.250000, bonus=1.000000, nodes=73 <= 300.000000)
                                      @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=90 <= 300.000000)
                                    @ 10  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=100 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f20a800a2f0.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f20a800a510.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f20a8000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 15  deltablue.Planner.removePropagateFrom(Variable):Vector (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 770, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=81)
                            @ 8  deltablue.Planner.lambda$incrementalRemove$0(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                          @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=3.852061, bonus=1.000000, nodes=72)
                                        @ 2  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=28 <= 300.000000)
                                      @ 20  deltablue.Planner$$Lambda/0x00007f20a800abe0.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=37 <= 300.000000)
                                    @ 26  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=14.900926, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=53)
                                  @ 9  deltablue.Planner.incrementalRemove(AbstractConstraint):void (30 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=121 <= 300.000000)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f20a800e800.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                        @ 24  som.Vector$$Lambda/0x00007f20a800a0d0.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=17 <= 300.000000)
                                            @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=26 <= 300.000000)
                                          @ 20  som.Vector$$Lambda/0x00007f20a800a0d0.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=28 <= 300.000000)
                                        @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=41 <= 300.000000)
                                      @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=73 <= 300.000000)
                                    @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=90 <= 300.000000)
                                  @ 13  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=4.000000, probability=1.000000, bonus=1.000000, nodes=100 <= 300.000000)
                                @ 55  deltablue.AbstractConstraint.destroyConstraint(Planner):void (17 bytes)   relevance-based (relevance=1.000075, probability=1.000000, bonus=1.000000, nodes=224 <= 300.000000)
                              @ 225  deltablue.Planner.change(Variable, int):void (59 bytes)   not inlining relevance-based (relevance=1.000018, probability=1.000000, bonus=1.000000, nodes=412 > 300.000000)
                              @ 242  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=1.000000, probability=67476.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 1  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.Planner.lambda$chainTest$7(int):Variable (8 bytes)   inline method (bytecode parsing)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                                @ 4  deltablue.Variable.<init>():void (44 bytes)   not inlining too large previous low-level graph (low-level-nodes: 356, relevance=1.000000, probability=0.999982, bonus=1.000000, nodes=27)
                              @ 17  deltablue.Planner$$Lambda/0x00007f20a80071f0.apply(int):Object (5 bytes)   trivial (relevance=1.000000, probability=0.999982, bonus=1.000000, nodes=9)
                            @ 1  deltablue.Planner.lambda$chainTest$7(int):Variable (8 bytes)   inline method (bytecode parsing)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                                @ 4  deltablue.Variable.<init>():void (44 bytes)   not inlining too large previous low-level graph (low-level-nodes: 356, relevance=1.000000, probability=55535.333369, bonus=1.000000, nodes=27)
                              @ 17  deltablue.Planner$$Lambda/0x00007f20a80071f0.apply(int):Object (5 bytes)   trivial (relevance=1.000000, probability=55535.333369, bonus=1.000000, nodes=9)
                            @ 4  deltablue.Planner.<init>():void (10 bytes)   inline method (bytecode parsing)
                            @ 16  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f20a8000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                            @ 55  deltablue.EqualityConstraint.<init>(Variable, Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                              @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  deltablue.StayConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 91  deltablue.EditConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 124  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 129  deltablue.Plan.execute():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                                @ 4  java.lang.invoke.LambdaForm$MH/0x00007f20a8000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                            @ 135  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 1  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.Planner.lambda$chainTest$7(int):Variable (8 bytes)   inline method (bytecode parsing)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                                  @ 4  deltablue.Variable.<init>():void (44 bytes)   not inlining too large previous low-level graph (low-level-nodes: 356, relevance=1.000000, probability=55537.333333, bonus=1.000000, nodes=27)
                                @ 17  deltablue.Planner$$Lambda/0x00007f20a80071f0.apply(int):Object (5 bytes)   trivial (relevance=1.000000, probability=55537.333333, bonus=1.000000, nodes=9)
                              @ 21  java.util.Arrays.setAll(Object[], IntFunction):void (30 bytes)   not inlining callee invoke probability is too high (invokeP=55537.333333, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=27)
                                  @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=0.000075, bonus=1.000000, nodes=41 > 0.022454)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                                @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=1.070492, bonus=1.000000, nodes=72)
                              @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                                  @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=0.000075, bonus=1.000000, nodes=41 > 0.022454)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                                @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=1.070492, bonus=1.000000, nodes=72)
                              @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=0.000075, bonus=1.000000, nodes=41 > 0.022454)
                                @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 96  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f20a8009610.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                                    @ 1  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   not inlining no type profile exists
                                    @ 8  deltablue.AbstractConstraint.isSatisfied():boolean (0 bytes)   not inlining no type profile exists
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                        @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=0.000135, bonus=1.000000, nodes=41 > 0.022454)
                                      @ 16  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.799201, bonus=1.000000, nodes=35 <= 300.000000)
                                    @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=7.196805, bonus=1.000000, nodes=59 <= 300.000000)
                                  @ 20  deltablue.Planner$$Lambda/0x00007f20a8009610.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=7.196805, bonus=1.000000, nodes=64 <= 300.000000)
                                @ 15  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=10.795342, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=77)
                            @ 9  deltablue.Plan.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 67  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                @ 20  deltablue.Planner.makePlan(Vector):Plan (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 817, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=69)
                              @ 104  deltablue.Planner.extractPlanFromConstraints(Vector):Plan (24 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                              @ 6  deltablue.BinaryConstraint.<init>(Variable, Variable, Strength$Sym, Planner):void (21 bytes)   not inlining too large previous low-level graph (low-level-nodes: 394, relevance=1.000000, probability=60827.500000, bonus=1.000000, nodes=17)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 13  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                              @ 1  deltablue.BinaryConstraint.addToGraph():void (22 bytes)   not inlining too large previous low-level graph (low-level-nodes: 617, relevance=1.000000, probability=60827.500000, bonus=1.000000, nodes=25)
                                @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=60827.500000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=60827.500000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=65115.345501, bonus=1.000000, nodes=72)
                              @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=60827.500000, bonus=1.000000, nodes=28 <= 300.000000)
                                @ 1  deltablue.UnaryConstraint.isSatisfied():boolean (5 bytes)   trivial (relevance=2.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 21  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f20a800abe0.<init>(Planner):void (10 bytes)   inline method (bytecode parsing)
                                  @ 1  deltablue.UnaryConstraint.getOutput():Variable (5 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=5)
                                  @ 6  deltablue.UnaryConstraint.markUnsatisfied():void (6 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=7)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f20a800e800.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                        @ 24  som.Vector$$Lambda/0x00007f20a800a0d0.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=17 <= 300.000000)
                                            @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=1.799201, bonus=1.000000, nodes=26 <= 300.000000)
                                          @ 20  som.Vector$$Lambda/0x00007f20a800a0d0.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=1.799201, bonus=1.000000, nodes=28 <= 300.000000)
                                        @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=41 <= 300.000000)
                                      @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.250000, bonus=1.000000, nodes=73 <= 300.000000)
                                    @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=90 <= 300.000000)
                                  @ 10  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=100 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f20a800a2f0.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f20a800a510.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f20a8000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                  @ 15  deltablue.Planner.removePropagateFrom(Variable):Vector (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 770, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=81)
                            @ 8  deltablue.Planner.lambda$incrementalRemove$0(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                        @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                        @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=3.852061, bonus=1.000000, nodes=72)
                                      @ 2  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=28 <= 300.000000)
                                    @ 20  deltablue.Planner$$Lambda/0x00007f20a800abe0.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=37 <= 300.000000)
                                  @ 26  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=14.900926, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=53)
                                @ 9  deltablue.Planner.incrementalRemove(AbstractConstraint):void (30 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=121 <= 300.000000)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f20a800e800.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                      @ 24  som.Vector$$Lambda/0x00007f20a800a0d0.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=17 <= 300.000000)
                                          @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=26 <= 300.000000)
                                        @ 20  som.Vector$$Lambda/0x00007f20a800a0d0.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=28 <= 300.000000)
                                      @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=41 <= 300.000000)
                                    @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=73 <= 300.000000)
                                  @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=90 <= 300.000000)
                                @ 13  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=4.000000, probability=1.000000, bonus=1.000000, nodes=100 <= 300.000000)
                              @ 161  deltablue.AbstractConstraint.destroyConstraint(Planner):void (17 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=224 <= 300.000000)
                            @ 4  deltablue.Plan.lambda$execute$0(AbstractConstraint):void (5 bytes)   inline method (bytecode parsing)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 21  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 35  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 38  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 18  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 25  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 33  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 37  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 51  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 58  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 66  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 70  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 1  deltablue.EqualityConstraint.execute():void (42 bytes)   relevance-based (relevance=1.000000, probability=719.680485, bonus=1.000000, nodes=103 <= 300.000000)
                                @ 20  deltablue.Plan$$Lambda/0x00007f20a8009eb8.apply(Object):void (8 bytes)   relevance-based (relevance=1.000000, probability=719.680485, bonus=1.000000, nodes=113 <= 300.000000)
                              @ 6  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=100.000000, bonus=1.000000, nodes=127 <= 300.000000)
                            @ 4  deltablue.Planner.<init>():void (10 bytes)   inline method (bytecode parsing)
                            @ 12  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 18  deltablue.Variable.value(int):Variable (15 bytes)   inline method (bytecode parsing)
                              @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 25  deltablue.Variable.value(int):Variable (15 bytes)   inline method (bytecode parsing)
                              @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 75  deltablue.StayConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 114  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 144  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 187  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 248  deltablue.Variable.getValue():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.Variable.<init>():void (44 bytes)   not inlining too large previous low-level graph (low-level-nodes: 356, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=27)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.Variable.<init>():void (44 bytes)   not inlining too large previous low-level graph (low-level-nodes: 356, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=27)
                            @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                                @ 4  deltablue.Variable.<init>():void (44 bytes)   not inlining too large previous low-level graph (low-level-nodes: 356, relevance=1.000000, probability=60000.000000, bonus=1.000000, nodes=27)
                              @ 47  deltablue.Variable.value(int):Variable (15 bytes)   relevance-based (relevance=1.000000, probability=60000.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 10  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                                @ 4  deltablue.Variable.<init>():void (44 bytes)   not inlining too large previous low-level graph (low-level-nodes: 356, relevance=1.000000, probability=60000.000000, bonus=1.000000, nodes=27)
                              @ 54  deltablue.Variable.value(int):Variable (15 bytes)   relevance-based (relevance=1.000000, probability=60000.000000, bonus=1.000000, nodes=11 <= 300.000000)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=4.490476, bonus=1.000000, nodes=41 > 0.022454)
                              @ 62  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=60000.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                  @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=60000.000000, bonus=1.000000, nodes=5)
                                @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=60000.000000, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=60000.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=60000.000000, bonus=1.000000, nodes=13 <= 300.000000)
                              @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000075, probability=60000.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                  @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=4.490476, bonus=1.000000, nodes=41 > 0.022454)
                                @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=60000.000000, bonus=1.000000, nodes=35 <= 300.000000)
                              @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000075, probability=60000.000000, bonus=1.000000, nodes=47 <= 300.000000)
                                @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=60000.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=60000.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=64229.513461, bonus=1.000000, nodes=72)
                              @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000075, probability=60000.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 24  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                              @ 94  deltablue.ScaleConstraint.<init>(Variable, Variable, Variable, Variable, Strength$Sym, Planner):void (28 bytes)   not inlining too large previous low-level graph (low-level-nodes: 580, relevance=1.000075, probability=60000.000000, bonus=1.000000, nodes=25)
                            @ 9  deltablue.EditConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 44  deltablue.Plan.execute():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                                @ 4  java.lang.invoke.LambdaForm$MH/0x00007f20a8000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                  @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                  @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=0.000075, bonus=1.000000, nodes=41 > 0.022454)
                                  @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                                  @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=1.070492, bonus=1.000000, nodes=72)
                                @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000075, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=0.000075, bonus=1.000000, nodes=41 > 0.022454)
                                  @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 14  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000075, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f20a8009610.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                                      @ 1  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   not inlining no type profile exists
                                      @ 8  deltablue.AbstractConstraint.isSatisfied():boolean (0 bytes)   not inlining no type profile exists
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                          @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=0.000135, bonus=1.000000, nodes=41 > 0.022454)
                                        @ 16  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.799201, bonus=1.000000, nodes=35 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=7.196805, bonus=1.000000, nodes=59 <= 300.000000)
                                    @ 20  deltablue.Planner$$Lambda/0x00007f20a8009610.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=7.196805, bonus=1.000000, nodes=64 <= 300.000000)
                                  @ 15  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=10.795342, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=77)
                            @ 9  deltablue.Plan.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 67  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 20  deltablue.Planner.makePlan(Vector):Plan (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 817, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=69)
                                @ 22  deltablue.Planner.extractPlanFromConstraints(Vector):Plan (24 bytes)   relevance-based (relevance=1.000075, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                                  @ 1  deltablue.UnaryConstraint.isSatisfied():boolean (5 bytes)   trivial (relevance=2.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 21  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f20a800abe0.<init>(Planner):void (10 bytes)   inline method (bytecode parsing)
                                    @ 1  deltablue.UnaryConstraint.getOutput():Variable (5 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=5)
                                    @ 6  deltablue.UnaryConstraint.markUnsatisfied():void (6 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=7)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f20a800e800.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                          @ 24  som.Vector$$Lambda/0x00007f20a800a0d0.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=17 <= 300.000000)
                                              @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=1.799201, bonus=1.000000, nodes=26 <= 300.000000)
                                            @ 20  som.Vector$$Lambda/0x00007f20a800a0d0.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=1.799201, bonus=1.000000, nodes=28 <= 300.000000)
                                          @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=41 <= 300.000000)
                                        @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.250000, bonus=1.000000, nodes=73 <= 300.000000)
                                      @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=90 <= 300.000000)
                                    @ 10  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=100 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f20a800a2f0.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f20a800a510.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f20a8000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 15  deltablue.Planner.removePropagateFrom(Variable):Vector (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 770, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=81)
                            @ 8  deltablue.Planner.lambda$incrementalRemove$0(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                          @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=3.852061, bonus=1.000000, nodes=72)
                                        @ 2  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=28 <= 300.000000)
                                      @ 20  deltablue.Planner$$Lambda/0x00007f20a800abe0.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=37 <= 300.000000)
                                    @ 26  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=14.900926, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=53)
                                  @ 9  deltablue.Planner.incrementalRemove(AbstractConstraint):void (30 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=121 <= 300.000000)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f20a800e800.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                        @ 24  som.Vector$$Lambda/0x00007f20a800a0d0.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=17 <= 300.000000)
                                            @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=26 <= 300.000000)
                                          @ 20  som.Vector$$Lambda/0x00007f20a800a0d0.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=28 <= 300.000000)
                                        @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=41 <= 300.000000)
                                      @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=73 <= 300.000000)
                                    @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=90 <= 300.000000)
                                  @ 13  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=4.000000, probability=1.000000, bonus=1.000000, nodes=100 <= 300.000000)
                                @ 55  deltablue.AbstractConstraint.destroyConstraint(Planner):void (17 bytes)   relevance-based (relevance=1.000075, probability=1.000000, bonus=1.000000, nodes=224 <= 300.000000)
                              @ 109  deltablue.Planner.change(Variable, int):void (59 bytes)   not inlining relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=415 > 300.000000)
                            @ 9  deltablue.EditConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 44  deltablue.Plan.execute():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                                @ 4  java.lang.invoke.LambdaForm$MH/0x00007f20a8000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                  @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                  @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=0.000075, bonus=1.000000, nodes=41 > 0.022454)
                                  @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                                  @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=1.070492, bonus=1.000000, nodes=72)
                                @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000075, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=0.000075, bonus=1.000000, nodes=41 > 0.022454)
                                  @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 14  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000075, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f20a8009610.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                                      @ 1  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   not inlining no type profile exists
                                      @ 8  deltablue.AbstractConstraint.isSatisfied():boolean (0 bytes)   not inlining no type profile exists
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                          @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=0.000135, bonus=1.000000, nodes=41 > 0.022454)
                                        @ 16  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.799201, bonus=1.000000, nodes=35 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=7.196805, bonus=1.000000, nodes=59 <= 300.000000)
                                    @ 20  deltablue.Planner$$Lambda/0x00007f20a8009610.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=7.196805, bonus=1.000000, nodes=64 <= 300.000000)
                                  @ 15  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=10.795342, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=77)
                            @ 9  deltablue.Plan.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 67  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 20  deltablue.Planner.makePlan(Vector):Plan (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 817, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=69)
                                @ 22  deltablue.Planner.extractPlanFromConstraints(Vector):Plan (24 bytes)   relevance-based (relevance=1.000075, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                                  @ 1  deltablue.UnaryConstraint.isSatisfied():boolean (5 bytes)   trivial (relevance=2.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 21  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f20a800abe0.<init>(Planner):void (10 bytes)   inline method (bytecode parsing)
                                    @ 1  deltablue.UnaryConstraint.getOutput():Variable (5 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=5)
                                    @ 6  deltablue.UnaryConstraint.markUnsatisfied():void (6 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=7)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f20a800e800.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                          @ 24  som.Vector$$Lambda/0x00007f20a800a0d0.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=17 <= 300.000000)
                                              @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=1.799201, bonus=1.000000, nodes=26 <= 300.000000)
                                            @ 20  som.Vector$$Lambda/0x00007f20a800a0d0.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=1.799201, bonus=1.000000, nodes=28 <= 300.000000)
                                          @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=41 <= 300.000000)
                                        @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.250000, bonus=1.000000, nodes=73 <= 300.000000)
                                      @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=90 <= 300.000000)
                                    @ 10  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=100 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f20a800a2f0.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f20a800a510.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f20a8000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 15  deltablue.Planner.removePropagateFrom(Variable):Vector (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 770, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=81)
                            @ 8  deltablue.Planner.lambda$incrementalRemove$0(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                          @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=3.852061, bonus=1.000000, nodes=72)
                                        @ 2  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=28 <= 300.000000)
                                      @ 20  deltablue.Planner$$Lambda/0x00007f20a800abe0.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=37 <= 300.000000)
                                    @ 26  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=14.900926, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=53)
                                  @ 9  deltablue.Planner.incrementalRemove(AbstractConstraint):void (30 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=121 <= 300.000000)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f20a800e800.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                        @ 24  som.Vector$$Lambda/0x00007f20a800a0d0.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=17 <= 300.000000)
                                            @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=26 <= 300.000000)
                                          @ 20  som.Vector$$Lambda/0x00007f20a800a0d0.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=28 <= 300.000000)
                                        @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=41 <= 300.000000)
                                      @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=73 <= 300.000000)
                                    @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=90 <= 300.000000)
                                  @ 13  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=4.000000, probability=1.000000, bonus=1.000000, nodes=100 <= 300.000000)
                                @ 55  deltablue.AbstractConstraint.destroyConstraint(Planner):void (17 bytes)   relevance-based (relevance=1.000075, probability=1.000000, bonus=1.000000, nodes=224 <= 300.000000)
                              @ 139  deltablue.Planner.change(Variable, int):void (59 bytes)   not inlining relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=415 > 300.000000)
                            @ 9  deltablue.EditConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 44  deltablue.Plan.execute():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                                @ 4  java.lang.invoke.LambdaForm$MH/0x00007f20a8000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                  @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                  @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=0.000075, bonus=1.000000, nodes=41 > 0.022454)
                                  @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                                  @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=1.070492, bonus=1.000000, nodes=72)
                                @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000075, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=0.000075, bonus=1.000000, nodes=41 > 0.022454)
                                  @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 14  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000075, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f20a8009610.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                                      @ 1  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   not inlining no type profile exists
                                      @ 8  deltablue.AbstractConstraint.isSatisfied():boolean (0 bytes)   not inlining no type profile exists
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                          @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=0.000135, bonus=1.000000, nodes=41 > 0.022454)
                                        @ 16  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.799201, bonus=1.000000, nodes=35 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=7.196805, bonus=1.000000, nodes=59 <= 300.000000)
                                    @ 20  deltablue.Planner$$Lambda/0x00007f20a8009610.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=7.196805, bonus=1.000000, nodes=64 <= 300.000000)
                                  @ 15  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=10.795342, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=77)
                            @ 9  deltablue.Plan.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 67  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 20  deltablue.Planner.makePlan(Vector):Plan (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 817, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=69)
                                @ 22  deltablue.Planner.extractPlanFromConstraints(Vector):Plan (24 bytes)   relevance-based (relevance=1.000075, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                                  @ 1  deltablue.UnaryConstraint.isSatisfied():boolean (5 bytes)   trivial (relevance=2.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 21  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f20a800abe0.<init>(Planner):void (10 bytes)   inline method (bytecode parsing)
                                    @ 1  deltablue.UnaryConstraint.getOutput():Variable (5 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=5)
                                    @ 6  deltablue.UnaryConstraint.markUnsatisfied():void (6 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=7)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f20a800e800.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                          @ 24  som.Vector$$Lambda/0x00007f20a800a0d0.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=17 <= 300.000000)
                                              @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=1.799201, bonus=1.000000, nodes=26 <= 300.000000)
                                            @ 20  som.Vector$$Lambda/0x00007f20a800a0d0.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=1.799201, bonus=1.000000, nodes=28 <= 300.000000)
                                          @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=41 <= 300.000000)
                                        @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.250000, bonus=1.000000, nodes=73 <= 300.000000)
                                      @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=90 <= 300.000000)
                                    @ 10  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=100 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f20a800a2f0.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f20a800a510.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f20a8000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 15  deltablue.Planner.removePropagateFrom(Variable):Vector (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 770, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=81)
                            @ 8  deltablue.Planner.lambda$incrementalRemove$0(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                          @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=3.852061, bonus=1.000000, nodes=72)
                                        @ 2  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=28 <= 300.000000)
                                      @ 20  deltablue.Planner$$Lambda/0x00007f20a800abe0.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=37 <= 300.000000)
                                    @ 26  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=14.900926, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=53)
                                  @ 9  deltablue.Planner.incrementalRemove(AbstractConstraint):void (30 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=121 <= 300.000000)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f20a800e800.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                        @ 24  som.Vector$$Lambda/0x00007f20a800a0d0.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=17 <= 300.000000)
                                            @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=26 <= 300.000000)
                                          @ 20  som.Vector$$Lambda/0x00007f20a800a0d0.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=28 <= 300.000000)
                                        @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=41 <= 300.000000)
                                      @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=73 <= 300.000000)
                                    @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=90 <= 300.000000)
                                  @ 13  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=4.000000, probability=1.000000, bonus=1.000000, nodes=100 <= 300.000000)
                                @ 55  deltablue.AbstractConstraint.destroyConstraint(Planner):void (17 bytes)   relevance-based (relevance=1.000075, probability=1.000000, bonus=1.000000, nodes=224 <= 300.000000)
                              @ 164  deltablue.Planner.change(Variable, int):void (59 bytes)   not inlining relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=412 > 300.000000)
                            @ 9  deltablue.EditConstraint.<init>(Variable, Strength$Sym, Planner):void (8 bytes)   inline method (bytecode parsing)
                              @ 4  deltablue.UnaryConstraint.<init>(Variable, Strength$Sym, Planner):void (16 bytes)   inline method (bytecode parsing)
                                @ 2  deltablue.AbstractConstraint.<init>(Strength$Sym):void (13 bytes)   inline method (bytecode parsing)
                                  @ 6  deltablue.Strength.of(Strength$Sym):Strength (11 bytes)   inline method (bytecode parsing)
                                @ 12  deltablue.AbstractConstraint.addConstraint(Planner):void (10 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.setValue(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 44  deltablue.Plan.execute():void (10 bytes)   inline method (bytecode parsing)
                              @ 1  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                                @ 4  java.lang.invoke.LambdaForm$MH/0x00007f20a8000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 7  deltablue.Strength$Sym.customHash():int (5 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                                  @ 1  som.Dictionary.hash(Dictionary$CustomHash):int (20 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 6  som.Dictionary.getBucketIdx(int):int (10 bytes)   inline method (bytecode parsing)
                                  @ 7  som.Dictionary.getBucket(int):Dictionary$Entry (11 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=11 <= 300.000000)
                                  @ 18  som.IdentityDictionary$IdEntry.match(int, Object):boolean (22 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=13 <= 300.000000)
                                @ 4  som.Dictionary.at(Dictionary$CustomHash):Object (39 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  deltablue.Variable.addConstraint(AbstractConstraint):void (9 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=0.000075, bonus=1.000000, nodes=41 > 0.022454)
                                  @ 5  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 1  deltablue.UnaryConstraint.addToGraph():void (14 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=47 <= 300.000000)
                                  @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                  @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=1.070492, bonus=1.000000, nodes=72)
                                @ 6  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000075, probability=1.000000, bonus=1.000000, nodes=28 <= 300.000000)
                            @ 5  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                    @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=0.000075, bonus=1.000000, nodes=41 > 0.022454)
                                  @ 11  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=35 <= 300.000000)
                                @ 14  som.Vector.with(Object):Vector (16 bytes)   relevance-based (relevance=1.000075, probability=1.000000, bonus=1.000000, nodes=40 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f20a8009610.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                                      @ 1  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   not inlining no type profile exists
                                      @ 8  deltablue.AbstractConstraint.isSatisfied():boolean (0 bytes)   not inlining no type profile exists
                            @ 24  java.util.Arrays.copyOf(Object[], int):Object[] (10 bytes)   inline method (bytecode parsing)
                                          @ 6  java.util.Arrays.copyOf(Object[], int, Class):Object[] (40 bytes)   not inlining relevance-based (relevance=0.000075, probability=0.000135, bonus=1.000000, nodes=41 > 0.022454)
                                        @ 16  som.Vector.append(Object):void (51 bytes)   relevance-based (relevance=1.000000, probability=1.799201, bonus=1.000000, nodes=35 <= 300.000000)
                                      @ 8  deltablue.Planner.lambda$extractPlanFromConstraints$1(Vector, AbstractConstraint):void (20 bytes)   relevance-based (relevance=1.000000, probability=7.196805, bonus=1.000000, nodes=59 <= 300.000000)
                                    @ 20  deltablue.Planner$$Lambda/0x00007f20a8009610.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=7.196805, bonus=1.000000, nodes=64 <= 300.000000)
                                  @ 15  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=10.795342, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=77)
                            @ 9  deltablue.Plan.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 39  deltablue.Variable.getMark():int (5 bytes)   inline accessor method (bytecode parsing)
                            @ 67  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                                  @ 20  deltablue.Planner.makePlan(Vector):Plan (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 817, relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=69)
                                @ 22  deltablue.Planner.extractPlanFromConstraints(Vector):Plan (24 bytes)   relevance-based (relevance=1.000075, probability=1.000000, bonus=1.000000, nodes=27 <= 300.000000)
                                  @ 1  deltablue.UnaryConstraint.isSatisfied():boolean (5 bytes)   trivial (relevance=2.000000, probability=1.000000, bonus=1.000000, nodes=5)
                            @ 21  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f20a800abe0.<init>(Planner):void (10 bytes)   inline method (bytecode parsing)
                                    @ 1  deltablue.UnaryConstraint.getOutput():Variable (5 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=5)
                                    @ 6  deltablue.UnaryConstraint.markUnsatisfied():void (6 bytes)   trivial (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=7)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f20a800e800.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                          @ 24  som.Vector$$Lambda/0x00007f20a800a0d0.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=17 <= 300.000000)
                                              @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=1.799201, bonus=1.000000, nodes=26 <= 300.000000)
                                            @ 20  som.Vector$$Lambda/0x00007f20a800a0d0.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=1.799201, bonus=1.000000, nodes=28 <= 300.000000)
                                          @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=41 <= 300.000000)
                                        @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.250000, bonus=1.000000, nodes=73 <= 300.000000)
                                      @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.250000, bonus=1.000000, nodes=90 <= 300.000000)
                                    @ 10  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=100 <= 300.000000)
                            @ 4  som.Vector.<init>():void (7 bytes)   inline method (bytecode parsing)
                              @ 3  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 10  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 14  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 17  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 22  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 48  deltablue.Variable.getConstraints():Vector (5 bytes)   inline accessor method (bytecode parsing)
                            @ 52  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f20a800a2f0.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 64  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, Object):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.Planner$$Lambda/0x00007f20a800a510.<init>(Vector):void (10 bytes)   inline method (bytecode parsing)
                            @ 76  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object):Object (8 bytes)   inline method (bytecode parsing)
                              @ 4  java.lang.invoke.LambdaForm$MH/0x00007f20a8000800.invoke(Object):Object (8 bytes)   inline method (bytecode parsing)
                                    @ 15  deltablue.Planner.removePropagateFrom(Variable):Vector (86 bytes)   not inlining too large previous low-level graph (low-level-nodes: 770, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=81)
                            @ 8  deltablue.Planner.lambda$incrementalRemove$0(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                                          @ 1  deltablue.Planner.newMark():int (15 bytes)   relevance-based (relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 8  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=72)
                            @ 15  java.lang.invoke.Invokers$Holder.linkToTargetMethod(int, Object):Object (9 bytes)   inline method (bytecode parsing)
                              @ 5  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Object, int):Object (21 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 6  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                @ 16  deltablue.AbstractConstraint$$Lambda/0x00007f20a8008f48.<init>(int):void (10 bytes)   inline method (bytecode parsing)
                            @ 31  deltablue.Variable.getDeterminedBy():AbstractConstraint (5 bytes)   inline accessor method (bytecode parsing)
                            @ 46  deltablue.Variable.setDeterminedBy(AbstractConstraint):void (6 bytes)   inline method (bytecode parsing)
                            @ 71  deltablue.Variable.setMark(int):void (6 bytes)   inline method (bytecode parsing)
                            @ 83  deltablue.Strength.required():Strength (4 bytes)   inline method (bytecode parsing)
                            @ 86  deltablue.Strength.sameAs(Strength):boolean (17 bytes)   inline method (bytecode parsing)
                              @ 5  deltablue.Strength.getArithmeticValue():int (5 bytes)   inline accessor method (bytecode parsing)
                                          @ 19  deltablue.AbstractConstraint.satisfy(int, Planner):AbstractConstraint (104 bytes)   not inlining too large previous low-level graph (low-level-nodes: 350, relevance=1.000000, probability=3.852061, bonus=1.000000, nodes=72)
                                        @ 2  deltablue.Planner.incrementalAdd(AbstractConstraint):void (27 bytes)   relevance-based (relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=28 <= 300.000000)
                                      @ 20  deltablue.Planner$$Lambda/0x00007f20a800abe0.apply(Object):void (12 bytes)   relevance-based (relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=37 <= 300.000000)
                                    @ 26  som.Vector.forEach(ForEachInterface):void (32 bytes)   not inlining callee invoke probability is too high (invokeP=14.900926, relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=53)
                                  @ 9  deltablue.Planner.incrementalRemove(AbstractConstraint):void (30 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=121 <= 300.000000)
                            @ 1  som.Vector.capacity():int (6 bytes)   inline method (bytecode parsing)
                            @ 31  java.lang.invoke.Invokers$Holder.linkToTargetMethod(Object, Object, Object, Object, Object):Object (13 bytes)   inline method (bytecode parsing)
                              @ 9  java.lang.invoke.LambdaForm$DMH/0x00007f20a800e800.newInvokeSpecial(Object, Object, Object, Object, Object):Object (30 bytes)   inline method (bytecode parsing)
                                @ 1  java.lang.invoke.DirectMethodHandle.allocateInstance(Object):Object (16 bytes)   inline method (bytecode parsing)
                                @ 7  java.lang.invoke.DirectMethodHandle.constructorMethod(Object):Object (10 bytes)   inline method (bytecode parsing)
                                        @ 24  som.Vector$$Lambda/0x00007f20a800a0d0.<init>(Object, boolean[], Object[], int[]):void (26 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=17 <= 300.000000)
                                            @ 17  som.Vector.lambda$remove$0(Object, boolean[], Object[], int[], Object):void (28 bytes)   relevance-based (relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=26 <= 300.000000)
                                          @ 20  som.Vector$$Lambda/0x00007f20a800a0d0.apply(Object):void (21 bytes)   relevance-based (relevance=1.000000, probability=3.598402, bonus=1.000000, nodes=28 <= 300.000000)
                                        @ 36  som.Vector.forEach(ForEachInterface):void (32 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=41 <= 300.000000)
                                      @ 5  som.Vector.remove(Object):boolean (61 bytes)   relevance-based (relevance=2.000000, probability=0.500000, bonus=1.000000, nodes=73 <= 300.000000)
                                    @ 12  deltablue.Variable.removeConstraint(AbstractConstraint):void (23 bytes)   relevance-based (relevance=1.000000, probability=0.500000, bonus=1.000000, nodes=90 <= 300.000000)
                                  @ 13  deltablue.UnaryConstraint.removeFromGraph():void (21 bytes)   relevance-based (relevance=4.000000, probability=1.000000, bonus=1.000000, nodes=100 <= 300.000000)
                                @ 55  deltablue.AbstractConstraint.destroyConstraint(Planner):void (17 bytes)   relevance-based (relevance=1.000075, probability=1.000000, bonus=1.000000, nodes=224 <= 300.000000)
                              @ 225  deltablue.Planner.change(Variable, int):void (59 bytes)   not inlining relevance-based (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=412 > 300.000000)
                              @ 181  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=1.000000, probability=56696.666667, bonus=1.000000, nodes=10 <= 300.000000)
                              @ 242  som.Vector.at(int):Object (18 bytes)   relevance-based (relevance=1.000000, probability=70356.000000, bonus=1.000000, nodes=10 <= 300.000000)
                            @ 8  deltablue.Variable.setWalkStrength(Strength):void (6 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Variable.setStay(boolean):void (6 bytes)   inline method (bytecode parsing)
                            @ 34  deltablue.Variable.getStay():boolean (5 bytes)   inline accessor method (bytecode parsing)
                              @ 16  deltablue.AbstractConstraint.isInput():boolean (2 bytes)   trivial (relevance=1.000094, probability=1.000000, bonus=1.000000, nodes=8)
                              @ 41  deltablue.StayConstraint.execute():void (1 bytes)   trivial (relevance=1.000000, probability=0.999906, bonus=1.000000, nodes=3)
                            @ 1  java.util.Objects.requireNonNull(Object):Object (14 bytes)   inline method (bytecode parsing)
                            @ 1  deltablue.Planner.lambda$chainTest$7(int):Variable (8 bytes)   inline method (bytecode parsing)
                            @ 15  som.Vector.<init>(int):void (13 bytes)   inline method (bytecode parsing)
                            @ 27  deltablue.Strength.absoluteWeakest():Strength (4 bytes)   inline method (bytecode parsing)
                                @ 4  deltablue.Variable.<init>():void (44 bytes)   not inlining too large previous low-level graph (low-level-nodes: 356, relevance=1.000000, probability=55978.333334, bonus=1.000000, nodes=27)
                              @ 17  deltablue.Planner$$Lambda/0x00007f20a80071f0.apply(int):Object (5 bytes)   trivial (relevance=1.000000, probability=55978.333334, bonus=1.000000, nodes=9)
                                @ 6  java.lang.String.coder():byte (15 bytes)   trivial (relevance=1.000000, probability=1.000000, bonus=1.000000, nodes=5)
                              @ 1  java.lang.String.length():int (11 bytes)   trivial (relevance=1.163027, probability=1.000000, bonus=1.000000, nodes=8)
                              @ 43  jdk.internal.org.objectweb.asm.ByteVector.enlarge(int):void (73 bytes)   relevance-based (relevance=0.163027, probability=0.140174, bonus=1.000000, nodes=31 <= 48.907956)
                                @ 1  java.lang.String.isLatin1():boolean (19 bytes)   trivial (relevance=1.000000, probability=22.403085, bonus=1.000000, nodes=9)
                            @ 3  java.lang.String.checkIndex(int, int):void (10 bytes)   inline method (bytecode parsing)
                                @ 12  java.lang.StringLatin1.charAt(byte[], int):char (15 bytes)   relevance-based (relevance=1.000000, probability=22.403085, bonus=1.000000, nodes=11 <= 300.000000)
                              @ 85  java.lang.String.charAt(int):char (25 bytes)   relevance-based (relevance=1.000000, probability=22.403085, bonus=1.000000, nodes=16 <= 300.000000)
